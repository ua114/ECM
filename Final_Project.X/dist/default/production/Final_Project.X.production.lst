

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sun Dec 09 13:05:39 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           ; Version 2.00
    53                           ; Generated 27/05/2018 GMT
    54                           ; 
    55                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F4331 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	smallconst
    88  000300                     __psmallconst:
    89                           	opt stack 0
    90  000300  00                 	db	0
    91  000301                     _dpowers:
    92                           	opt stack 0
    93  000301  0001               	dw	1
    94  000303  000A               	dw	10
    95  000305  0064               	dw	100
    96  000307  03E8               	dw	1000
    97  000309  2710               	dw	10000
    98  00030B                     __end_of_dpowers:
    99                           	opt stack 0
   100  0000                     _PORTCbits	set	3970
   101  0000                     _ANSEL1	set	4025
   102  0000                     _ANSEL0	set	4024
   103  0000                     _PIE1bits	set	3997
   104  0000                     _INTCONbits	set	4082
   105  0000                     _RCONbits	set	4048
   106  0000                     _RCREG	set	4014
   107  0000                     _PIR1bits	set	3998
   108  0000                     _RCSTAbits	set	4011
   109  0000                     _TXSTAbits	set	4012
   110  0000                     _BAUDCONbits	set	4010
   111  0000                     _SPBRGH	set	4016
   112  0000                     _SPBRG	set	4015
   113  0000                     _OSCCONbits	set	4051
   114  0000                     _OSCCON	set	4051
   115  0000                     _TRISCbits	set	3988
   116  0000                     _CAP2BUFL	set	3942
   117  0000                     _CAP2BUFH	set	3943
   118  0000                     _CAP1BUFL	set	3944
   119  0000                     _CAP1BUFH	set	3945
   120  0000                     _DFLTCON	set	3936
   121  0000                     _T5CON	set	4023
   122  0000                     _CAP2CON	set	3938
   123  0000                     _CAP1CON	set	3939
   124  0000                     _TRISA	set	3986
   125  0000                     _TRISD	set	3989
   126  0000                     _TRISC	set	3988
   127  0000                     _LATA	set	3977
   128  0000                     _LATAbits	set	3977
   129  0000                     _LATC	set	3979
   130  0000                     _LATD	set	3980
   131  0000                     _LATCbits	set	3979
   132  0000                     _LATB	set	3978
   133  0000                     _PTPERH	set	3962
   134  0000                     _PTPERL	set	3963
   135  0000                     _PWMCON1	set	3950
   136  0000                     _PWMCON0	set	3951
   137  0000                     _PTCON1	set	3966
   138  0000                     _PTCON0	set	3967
   139  0000                     _TRISBbits	set	3987
   140  0000                     _PDC1H	set	3958
   141  0000                     _PDC1L	set	3959
   142  0000                     _PDC0H	set	3960
   143  0000                     _PDC0L	set	3961
   144  00030B  4C                 	db	76	;'L'
   145  00030C  3A                 	db	58	;':'
   146  00030D  20                 	db	32
   147  00030E  25                 	db	37
   148  00030F  75                 	db	117	;'u'
   149  000310  20                 	db	32
   150  000311  20                 	db	32
   151  000312  20                 	db	32
   152  000313  20                 	db	32
   153  000314  20                 	db	32
   154  000315  20                 	db	32
   155  000316  20                 	db	32
   156  000317  00                 	db	0
   157  000318  52                 	db	82	;'R'
   158  000319  3A                 	db	58	;':'
   159  00031A  20                 	db	32
   160  00031B  25                 	db	37
   161  00031C  75                 	db	117	;'u'
   162  00031D  20                 	db	32
   163  00031E  20                 	db	32
   164  00031F  20                 	db	32
   165  000320  20                 	db	32
   166  000321  20                 	db	32
   167  000322  20                 	db	32
   168  000323  20                 	db	32
   169  000324  00                 	db	0
   170  000325                     STR_3:
   171  000325  50                 	db	80	;'P'
   172  000326  75                 	db	117	;'u'
   173  000327  73                 	db	115	;'s'
   174  000328  68                 	db	104	;'h'
   175  000329  20                 	db	32
   176  00032A  42                 	db	66	;'B'
   177  00032B  75                 	db	117	;'u'
   178  00032C  74                 	db	116	;'t'
   179  00032D  74                 	db	116	;'t'
   180  00032E  6F                 	db	111	;'o'
   181  00032F  6E                 	db	110	;'n'
   182  000330  00                 	db	0
   183  000331                     STR_4:
   184  000331  74                 	db	116	;'t'
   185  000332  6F                 	db	111	;'o'
   186  000333  20                 	db	32
   187  000334  73                 	db	115	;'s'
   188  000335  74                 	db	116	;'t'
   189  000336  61                 	db	97	;'a'
   190  000337  72                 	db	114	;'r'
   191  000338  74                 	db	116	;'t'
   192  000339  00                 	db	0
   193                           
   194                           ; #config settings
   195  00033A  00                 	db	0	; dummy byte at the end
   196  0000                     
   197                           	psect	cinit
   198  00134E                     __pcinit:
   199                           	opt stack 0
   200  00134E                     start_initialization:
   201                           	opt stack 0
   202  00134E                     __initialization:
   203                           	opt stack 0
   204                           
   205                           ; Clear objects allocated to BANK0 (103 bytes)
   206  00134E  EE00  F060         	lfsr	0,__pbssBANK0
   207  001352  0E67               	movlw	103
   208  001354                     clear_0:
   209  001354  6AEE               	clrf	postinc0,c
   210  001356  06E8               	decf	wreg,f,c
   211  001358  E1FD               	bnz	clear_0
   212                           
   213                           ; Clear objects allocated to COMRAM (18 bytes)
   214  00135A  EE00  F02C         	lfsr	0,__pbssCOMRAM
   215  00135E  0E12               	movlw	18
   216  001360                     clear_1:
   217  001360  6AEE               	clrf	postinc0,c
   218  001362  06E8               	decf	wreg,f,c
   219  001364  E1FD               	bnz	clear_1
   220  001366                     end_of_initialization:
   221                           	opt stack 0
   222  001366                     __end_of__initialization:
   223                           	opt stack 0
   224  001366  903E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   225  001368  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   226  00136A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   227  00136C  6EF8               	movwf	tblptru,c
   228  00136E  0100               	movlb	0
   229  001370  EF51  F003         	goto	_main	;jump to C main() function
   230                           tblptru	equ	0xFF8
   231                           postinc0	equ	0xFEE
   232                           wreg	equ	0xFE8
   233                           
   234                           	psect	bssCOMRAM
   235  00002C                     __pbssCOMRAM:
   236                           	opt stack 0
   237  00002C                     _motorR:
   238                           	opt stack 0
   239  00002C                     	ds	9
   240  000035                     _motorL:
   241                           	opt stack 0
   242  000035                     	ds	9
   243                           tblptru	equ	0xFF8
   244                           postinc0	equ	0xFEE
   245                           wreg	equ	0xFE8
   246                           
   247                           	psect	bssBANK0
   248  000060                     __pbssBANK0:
   249                           	opt stack 0
   250  000060                     _arrayCount:
   251                           	opt stack 0
   252  000060                     	ds	100
   253  0000C4                     _counter:
   254                           	opt stack 0
   255  0000C4                     	ds	2
   256  0000C6                     _read:
   257                           	opt stack 0
   258  0000C6                     	ds	1
   259                           tblptru	equ	0xFF8
   260                           postinc0	equ	0xFEE
   261                           wreg	equ	0xFE8
   262                           
   263                           	psect	cstackBANK0
   264  0000C7                     __pcstackBANK0:
   265                           	opt stack 0
   266  0000C7                     ?___lwmod:
   267                           	opt stack 0
   268  0000C7                     ___awdiv@counter:
   269                           	opt stack 0
   270  0000C7                     ___lwmod@dividend:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x0
   274  0000C7                     	ds	1
   275  0000C8                     ___awdiv@sign:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x1
   279  0000C8                     	ds	1
   280  0000C9                     ___awdiv@quotient:
   281                           	opt stack 0
   282  0000C9                     ___lwmod@divisor:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0x2
   286  0000C9                     	ds	2
   287  0000CB                     ?_sprintf:
   288                           	opt stack 0
   289  0000CB                     setMotorPWM@m:
   290                           	opt stack 0
   291  0000CB                     sprintf@sp:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0x4
   295  0000CB                     	ds	2
   296  0000CD                     ??_setMotorPWM:
   297  0000CD                     sprintf@f:
   298                           	opt stack 0
   299                           
   300                           ; 3 bytes @ 0x6
   301  0000CD                     	ds	3
   302  0000D0                     setMotorPWM@PWMduty:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x9
   306  0000D0                     	ds	2
   307  0000D2                     ??_sprintf:
   308  0000D2                     stop@m_L:
   309                           	opt stack 0
   310  0000D2                     turnLeft@m_L:
   311                           	opt stack 0
   312  0000D2                     turnRight@m_L:
   313                           	opt stack 0
   314  0000D2                     forward@m_L:
   315                           	opt stack 0
   316  0000D2                     back@m_L:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0xB
   320  0000D2                     	ds	2
   321  0000D4                     stop@m_R:
   322                           	opt stack 0
   323  0000D4                     turnLeft@m_R:
   324                           	opt stack 0
   325  0000D4                     turnRight@m_R:
   326                           	opt stack 0
   327  0000D4                     forward@m_R:
   328                           	opt stack 0
   329  0000D4                     back@m_R:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0xD
   333  0000D4                     	ds	1
   334  0000D5                     sprintf@flag:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0xE
   338  0000D5                     	ds	1
   339  0000D6                     ??_stop:
   340  0000D6                     sprintf@ap:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0xF
   344  0000D6                     	ds	1
   345  0000D7                     TrackIR@LeftIR:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x10
   349  0000D7                     	ds	1
   350  0000D8                     sprintf@val:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x11
   354  0000D8                     	ds	1
   355  0000D9                     TrackIR@RightIR:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x12
   359  0000D9                     	ds	1
   360  0000DA                     sprintf@prec:
   361                           	opt stack 0
   362                           
   363                           ; 1 bytes @ 0x13
   364  0000DA                     	ds	1
   365  0000DB                     ??_TrackIR:
   366  0000DB                     sprintf@c:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x14
   370  0000DB                     	ds	3
   371  0000DE                     TrackIR@limit:
   372                           	opt stack 0
   373                           
   374                           ; 2 bytes @ 0x17
   375  0000DE                     	ds	2
   376  0000E0                     ??_main:
   377                           
   378                           ; 1 bytes @ 0x19
   379  0000E0                     	ds	4
   380  0000E4                     main@buf:
   381                           	opt stack 0
   382                           
   383                           ; 16 bytes @ 0x1D
   384  0000E4                     	ds	16
   385  0000F4                     main@fin:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0x2D
   389  0000F4                     	ds	1
   390  0000F5                     main@RightIR:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x2E
   394  0000F5                     	ds	2
   395  0000F7                     main@LeftIR:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x30
   399  0000F7                     	ds	2
   400  0000F9                     main@i:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x32
   404  0000F9                     	ds	1
   405                           tblptru	equ	0xFF8
   406                           postinc0	equ	0xFEE
   407                           wreg	equ	0xFE8
   408                           
   409                           	psect	cstackCOMRAM
   410  000001                     __pcstackCOMRAM:
   411                           	opt stack 0
   412  000001                     ??i2_LCDout:
   413  000001                     ?i2___wmul:
   414                           	opt stack 0
   415  000001                     i2___wmul@multiplier:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x0
   419  000001                     	ds	2
   420  000003                     i2___wmul@multiplicand:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x2
   424  000003                     	ds	1
   425  000004                     i2LCDout@number:
   426                           	opt stack 0
   427                           
   428                           ; 1 bytes @ 0x3
   429  000004                     	ds	1
   430  000005                     i2SendLCD@type:
   431                           	opt stack 0
   432  000005                     i2___wmul@product:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x4
   436  000005                     	ds	1
   437  000006                     i2SendLCD@Byte:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0x5
   441  000006                     	ds	1
   442  000007                     ?i2___awdiv:
   443                           	opt stack 0
   444  000007                     i2___awdiv@dividend:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x6
   448  000007                     	ds	2
   449  000009                     i2___awdiv@divisor:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x8
   453  000009                     	ds	2
   454  00000B                     i2___awdiv@counter:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0xA
   458  00000B                     	ds	1
   459  00000C                     i2___awdiv@sign:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0xB
   463  00000C                     	ds	1
   464  00000D                     i2___awdiv@quotient:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0xC
   468  00000D                     	ds	2
   469  00000F                     i2setMotorPWM@m:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0xE
   473  00000F                     	ds	2
   474  000011                     ??i2_setMotorPWM:
   475                           
   476                           ; 1 bytes @ 0x10
   477  000011                     	ds	3
   478  000014                     i2setMotorPWM@PWMduty:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x13
   482  000014                     	ds	2
   483  000016                     i2stop@m_L:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x15
   487  000016                     	ds	2
   488  000018                     i2stop@m_R:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x17
   492  000018                     	ds	2
   493  00001A                     ??i2_stop:
   494                           
   495                           ; 1 bytes @ 0x19
   496  00001A                     	ds	1
   497  00001B                     ??_InterruptHandlerHigh:
   498                           
   499                           ; 1 bytes @ 0x1A
   500  00001B                     	ds	4
   501  00001F                     InterruptHandlerHigh@read_counter:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x1E
   505  00001F                     	ds	2
   506  000021                     InterruptHandlerHigh@readIn:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x20
   510  000021                     	ds	1
   511  000022                     ??_LCDout:
   512  000022                     ?___wmul:
   513                           	opt stack 0
   514  000022                     ?___lwdiv:
   515                           	opt stack 0
   516  000022                     initPWM@period:
   517                           	opt stack 0
   518  000022                     FindIR@L_IR:
   519                           	opt stack 0
   520  000022                     ___wmul@multiplier:
   521                           	opt stack 0
   522  000022                     ___lwdiv@dividend:
   523                           	opt stack 0
   524                           
   525                           ; 2 bytes @ 0x21
   526  000022                     	ds	2
   527  000024                     FindIR@R_IR:
   528                           	opt stack 0
   529  000024                     Motor_Init@PWMcycle:
   530                           	opt stack 0
   531  000024                     ___wmul@multiplicand:
   532                           	opt stack 0
   533  000024                     ___lwdiv@divisor:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x23
   537  000024                     	ds	1
   538  000025                     LCDout@number:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x24
   542  000025                     	ds	1
   543  000026                     ??_FindIR:
   544  000026                     SendLCD@type:
   545                           	opt stack 0
   546  000026                     ___wmul@product:
   547                           	opt stack 0
   548  000026                     ___lwdiv@quotient:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x25
   552  000026                     	ds	1
   553  000027                     SendLCD@Byte:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x26
   557  000027                     	ds	1
   558  000028                     ??_LCD_Init:
   559  000028                     ?___awdiv:
   560                           	opt stack 0
   561  000028                     SetLine@line:
   562                           	opt stack 0
   563  000028                     ___lwdiv@counter:
   564                           	opt stack 0
   565  000028                     LCD_String@string:
   566                           	opt stack 0
   567  000028                     ___awdiv@dividend:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0x27
   571  000028                     	ds	1
   572  000029                     ___lwmod@counter:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x28
   576  000029                     	ds	1
   577  00002A                     ___awdiv@divisor:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x29
   581  00002A                     	ds	2
   582  00002C                     tblptru	equ	0xFF8
   583                           postinc0	equ	0xFEE
   584                           wreg	equ	0xFE8
   585                           
   586                           ; 1 bytes @ 0x2B
   587 ;;
   588 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   589 ;;
   590 ;; *************** function _main *****************
   591 ;; Defined at:
   592 ;;		line 214 in file "ecm.c"
   593 ;; Parameters:    Size  Location     Type
   594 ;;		None
   595 ;; Auto vars:     Size  Location     Type
   596 ;;  buf            16   29[BANK0 ] unsigned char [16]
   597 ;;  LeftIR          2   48[BANK0 ] unsigned int 
   598 ;;  RightIR         2   46[BANK0 ] unsigned int 
   599 ;;  i               1   50[BANK0 ] unsigned char 
   600 ;;  fin             1   45[BANK0 ] unsigned char 
   601 ;; Return value:  Size  Location     Type
   602 ;;                  1    wreg      void 
   603 ;; Registers used:
   604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   605 ;; Tracked objects:
   606 ;;		On entry : 0/0
   607 ;;		On exit  : 0/0
   608 ;;		Unchanged: 0/0
   609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   610 ;;      Params:         0       0       0       0
   611 ;;      Locals:         0      22       0       0
   612 ;;      Temps:          0       4       0       0
   613 ;;      Totals:         0      26       0       0
   614 ;;Total ram usage:       26 bytes
   615 ;; Hardware stack levels required when called:    8
   616 ;; This function calls:
   617 ;;		_FindIR
   618 ;;		_IR_Init
   619 ;;		_Init
   620 ;;		_InterruptINIT
   621 ;;		_LCD_Init
   622 ;;		_LCD_String
   623 ;;		_Motor_Init
   624 ;;		_SendLCD
   625 ;;		_SetLine
   626 ;;		_TrackIR
   627 ;;		___lwdiv
   628 ;;		_back
   629 ;;		_sprintf
   630 ;;		_stop
   631 ;;		_turnLeft
   632 ;;		_turnRight
   633 ;; This function is called by:
   634 ;;		Startup code after reset
   635 ;; This function uses a non-reentrant model
   636 ;;
   637                           
   638                           	psect	text0
   639  0006A2                     __ptext0:
   640                           	opt stack 0
   641  0006A2                     _main:
   642                           	opt stack 23
   643                           
   644                           ;ecm.c: 215: ANSEL0=0;
   645                           
   646                           ;incstack = 0
   647  0006A2  0E00               	movlw	0
   648  0006A4  6EB8               	movwf	4024,c	;volatile
   649                           
   650                           ;ecm.c: 216: ANSEL1=0;
   651  0006A6  0E00               	movlw	0
   652  0006A8  6EB9               	movwf	4025,c	;volatile
   653                           
   654                           ;ecm.c: 217: OSCCON = 0x72;
   655  0006AA  0E72               	movlw	114
   656  0006AC  6ED3               	movwf	4051,c	;volatile
   657  0006AE  A4D3               	btfss	4051,2,c	;volatile
   658  0006B0  D7FE               	goto	l272
   659                           
   660                           ;ecm.c: 220: unsigned int RightIR;;ecm.c: 221: unsigned int LeftIR;;ecm.c: 222: unsigned
      +                           char buf[16];;ecm.c: 225: LCD_Init();
   661  0006B2  ECB4  F006         	call	_LCD_Init	;wreg free
   662                           
   663                           ;ecm.c: 226: InterruptINIT();
   664  0006B6  EC39  F00A         	call	_InterruptINIT	;wreg free
   665                           
   666                           ;ecm.c: 227: IR_Init();
   667  0006BA  EC1E  F00A         	call	_IR_Init	;wreg free
   668                           
   669                           ;ecm.c: 228: Motor_Init();
   670  0006BE  ECF6  F007         	call	_Motor_Init	;wreg free
   671                           
   672                           ;ecm.c: 229: Init();
   673  0006C2  ECE0  F009         	call	_Init	;wreg free
   674                           
   675                           ;ecm.c: 230: stop(&motorL, &motorR);
   676  0006C6  0E35               	movlw	low _motorL
   677  0006C8  0100               	movlb	0	; () banked
   678  0006CA  6FD2               	movwf	stop@m_L& (0+255),b
   679  0006CC  0E00               	movlw	high _motorL
   680  0006CE  6FD3               	movwf	(stop@m_L+1)& (0+255),b
   681  0006D0  0E2C               	movlw	low _motorR
   682  0006D2  6FD4               	movwf	stop@m_R& (0+255),b
   683  0006D4  0E00               	movlw	high _motorR
   684  0006D6  6FD5               	movwf	(stop@m_R+1)& (0+255),b
   685  0006D8  EC94  F007         	call	_stop	;wreg free
   686                           
   687                           ;ecm.c: 231: TRISCbits.RC3 = 1;
   688  0006DC  8694               	bsf	3988,3,c	;volatile
   689                           
   690                           ;ecm.c: 232: char i;;ecm.c: 233: sprintf(buf,"Push Button");
   691  0006DE  0EE4               	movlw	low main@buf
   692  0006E0  0100               	movlb	0	; () banked
   693  0006E2  6FCB               	movwf	sprintf@sp& (0+255),b
   694  0006E4  0E00               	movlw	high main@buf
   695  0006E6  6FCC               	movwf	(sprintf@sp+1)& (0+255),b
   696  0006E8  0E25               	movlw	low STR_3
   697  0006EA  6FCD               	movwf	sprintf@f& (0+255),b
   698  0006EC  0E03               	movlw	high STR_3
   699  0006EE  6FCE               	movwf	(sprintf@f+1)& (0+255),b
   700  0006F0  51CD               	movf	sprintf@f& (0+255),w,b
   701  0006F2  11CE               	iorwf	(sprintf@f+1)& (0+255),w,b
   702  0006F4  A4D8               	btfss	status,2,c
   703  0006F6  0E00               	movlw	low (__mediumconst shr (0+16))
   704  0006F8  6FCF               	movwf	(sprintf@f+2)& (0+255),b
   705  0006FA  EC0B  F006         	call	_sprintf	;wreg free
   706                           
   707                           ;ecm.c: 234: LCD_String(buf);
   708  0006FE  0EE4               	movlw	low main@buf
   709  000700  6E28               	movwf	LCD_String@string,c
   710  000702  0E00               	movlw	high main@buf
   711  000704  6E29               	movwf	LCD_String@string+1,c
   712  000706  ECFC  F008         	call	_LCD_String	;wreg free
   713                           
   714                           ;ecm.c: 235: SetLine(2);
   715  00070A  0E02               	movlw	2
   716  00070C  EC14  F009         	call	_SetLine
   717                           
   718                           ;ecm.c: 236: sprintf(buf,"to start");
   719  000710  0EE4               	movlw	low main@buf
   720  000712  0100               	movlb	0	; () banked
   721  000714  6FCB               	movwf	sprintf@sp& (0+255),b
   722  000716  0E00               	movlw	high main@buf
   723  000718  6FCC               	movwf	(sprintf@sp+1)& (0+255),b
   724  00071A  0E31               	movlw	low STR_4
   725  00071C  6FCD               	movwf	sprintf@f& (0+255),b
   726  00071E  0E03               	movlw	high STR_4
   727  000720  6FCE               	movwf	(sprintf@f+1)& (0+255),b
   728  000722  51CD               	movf	sprintf@f& (0+255),w,b
   729  000724  11CE               	iorwf	(sprintf@f+1)& (0+255),w,b
   730  000726  A4D8               	btfss	status,2,c
   731  000728  0E00               	movlw	low (__mediumconst shr (0+16))
   732  00072A  6FCF               	movwf	(sprintf@f+2)& (0+255),b
   733  00072C  EC0B  F006         	call	_sprintf	;wreg free
   734                           
   735                           ;ecm.c: 237: LCD_String(buf);
   736  000730  0EE4               	movlw	low main@buf
   737  000732  6E28               	movwf	LCD_String@string,c
   738  000734  0E00               	movlw	high main@buf
   739  000736  6E29               	movwf	LCD_String@string+1,c
   740  000738  ECFC  F008         	call	_LCD_String	;wreg free
   741  00073C  A682               	btfss	3970,3,c	;volatile
   742  00073E  D7FE               	goto	l275
   743                           
   744                           ;ecm.c: 240: _delay((unsigned long)((100)*(8000000/4000.0)));
   745  000740  0E02               	movlw	2
   746  000742  0100               	movlb	0	; () banked
   747  000744  6FE1               	movwf	(??_main+1)& (0+255),b
   748  000746  0E04               	movlw	4
   749  000748  6FE0               	movwf	??_main& (0+255),b
   750  00074A  0EBA               	movlw	186
   751  00074C                     u1747:
   752  00074C  2EE8               	decfsz	wreg,f,c
   753  00074E  D7FE               	bra	u1747
   754  000750  2FE0               	decfsz	??_main& (0+255),f,b
   755  000752  D7FC               	bra	u1747
   756  000754  2FE1               	decfsz	(??_main+1)& (0+255),f,b
   757  000756  D7FA               	bra	u1747
   758  000758  F000               	nop	
   759                           
   760                           ;ecm.c: 241: SendLCD(0b00000001,0);
   761  00075A  0E00               	movlw	0
   762  00075C  6E26               	movwf	SendLCD@type,c
   763  00075E  0E01               	movlw	1
   764  000760  EC7F  F009         	call	_SendLCD
   765                           
   766                           ;ecm.c: 242: read=0;
   767  000764  0E00               	movlw	0
   768  000766  0100               	movlb	0	; () banked
   769  000768  6FC6               	movwf	_read& (0+255),b
   770                           
   771                           ; BSR set to: 0
   772                           ;ecm.c: 243: char fin=0;
   773  00076A  0E00               	movlw	0
   774  00076C  6FF4               	movwf	main@fin& (0+255),b
   775  00076E                     
   776                           ; BSR set to: 0
   777                           ;ecm.c: 245: {;ecm.c: 246: if(read ==0){
   778                           
   779                           ; BSR set to: 0
   780  00076E  51C6               	movf	_read& (0+255),w,b
   781  000770  A4D8               	btfss	status,2,c
   782  000772  D030               	goto	l278
   783                           
   784                           ; BSR set to: 0
   785                           ;ecm.c: 248: FindIR(&LeftIR, &RightIR);
   786  000774  0EF7               	movlw	low main@LeftIR
   787  000776  6E22               	movwf	FindIR@L_IR,c
   788  000778  0E00               	movlw	high main@LeftIR
   789  00077A  6E23               	movwf	FindIR@L_IR+1,c
   790  00077C  0EF5               	movlw	low main@RightIR
   791  00077E  6E24               	movwf	FindIR@R_IR,c
   792  000780  0E00               	movlw	high main@RightIR
   793  000782  6E25               	movwf	FindIR@R_IR+1,c
   794  000784  EC6F  F008         	call	_FindIR	;wreg free
   795                           
   796                           ;ecm.c: 249: RightIR = RightIR/100;
   797  000788  C0F5  F022         	movff	main@RightIR,___lwdiv@dividend
   798  00078C  C0F6  F023         	movff	main@RightIR+1,___lwdiv@dividend+1
   799  000790  0E00               	movlw	0
   800  000792  6E25               	movwf	___lwdiv@divisor+1,c
   801  000794  0E64               	movlw	100
   802  000796  6E24               	movwf	___lwdiv@divisor,c
   803  000798  EC21  F008         	call	___lwdiv	;wreg free
   804  00079C  C022  F0F5         	movff	?___lwdiv,main@RightIR
   805  0007A0  C023  F0F6         	movff	?___lwdiv+1,main@RightIR+1
   806                           
   807                           ;ecm.c: 250: LeftIR = LeftIR/100;
   808  0007A4  C0F7  F022         	movff	main@LeftIR,___lwdiv@dividend
   809  0007A8  C0F8  F023         	movff	main@LeftIR+1,___lwdiv@dividend+1
   810  0007AC  0E00               	movlw	0
   811  0007AE  6E25               	movwf	___lwdiv@divisor+1,c
   812  0007B0  0E64               	movlw	100
   813  0007B2  6E24               	movwf	___lwdiv@divisor,c
   814  0007B4  EC21  F008         	call	___lwdiv	;wreg free
   815  0007B8  C022  F0F7         	movff	?___lwdiv,main@LeftIR
   816  0007BC  C023  F0F8         	movff	?___lwdiv+1,main@LeftIR+1
   817                           
   818                           ;ecm.c: 252: TrackIR(LeftIR, RightIR);
   819  0007C0  C0F7  F0D7         	movff	main@LeftIR,TrackIR@LeftIR
   820  0007C4  C0F8  F0D8         	movff	main@LeftIR+1,TrackIR@LeftIR+1
   821  0007C8  C0F5  F0D9         	movff	main@RightIR,TrackIR@RightIR
   822  0007CC  C0F6  F0DA         	movff	main@RightIR+1,TrackIR@RightIR+1
   823  0007D0  EC9E  F001         	call	_TrackIR	;wreg free
   824  0007D4                     l278:
   825                           
   826                           ;ecm.c: 255: };ecm.c: 257: if (read==1 && fin==0)
   827  0007D4  0100               	movlb	0	; () banked
   828  0007D6  05C6               	decf	_read& (0+255),w,b
   829  0007D8  A4D8               	btfss	status,2,c
   830  0007DA  D7C9               	goto	l277
   831                           
   832                           ; BSR set to: 0
   833  0007DC  51F4               	movf	main@fin& (0+255),w,b
   834  0007DE  A4D8               	btfss	status,2,c
   835  0007E0  D7C6               	goto	l277
   836                           
   837                           ; BSR set to: 0
   838                           ;ecm.c: 258: {;ecm.c: 259: for (i=0; i<counter; i++)
   839  0007E2  0E00               	movlw	0
   840  0007E4  6FF9               	movwf	main@i& (0+255),b
   841  0007E6  D085               	goto	l280
   842  0007E8                     
   843                           ; BSR set to: 0
   844                           ;ecm.c: 260: {;ecm.c: 261: if(arrayCount[counter-i]==0)
   845                           
   846                           ; BSR set to: 0
   847  0007E8  51F9               	movf	main@i& (0+255),w,b
   848  0007EA  6FE0               	movwf	??_main& (0+255),b
   849  0007EC  6BE1               	clrf	(??_main+1)& (0+255),b
   850  0007EE  1FE0               	comf	??_main& (0+255),f,b
   851  0007F0  1FE1               	comf	(??_main+1)& (0+255),f,b
   852  0007F2  4BE0               	infsnz	??_main& (0+255),f,b
   853  0007F4  2BE1               	incf	(??_main+1)& (0+255),f,b
   854  0007F6  51C4               	movf	_counter& (0+255),w,b
   855  0007F8  27E0               	addwf	??_main& (0+255),f,b
   856  0007FA  51C5               	movf	(_counter+1)& (0+255),w,b
   857  0007FC  23E1               	addwfc	(??_main+1)& (0+255),f,b
   858  0007FE  90D8               	bcf	status,0,c
   859  000800  37E0               	rlcf	??_main& (0+255),f,b
   860  000802  37E1               	rlcf	(??_main+1)& (0+255),f,b
   861  000804  0E60               	movlw	low _arrayCount
   862  000806  25E0               	addwf	??_main& (0+255),w,b
   863  000808  6ED9               	movwf	fsr2l,c
   864  00080A  0E00               	movlw	high _arrayCount
   865  00080C  21E1               	addwfc	(??_main+1)& (0+255),w,b
   866  00080E  6EDA               	movwf	fsr2h,c
   867  000810  50DE               	movf	postinc2,w,c
   868  000812  10DE               	iorwf	postinc2,w,c
   869  000814  A4D8               	btfss	status,2,c
   870  000816  D00B               	goto	l282
   871                           
   872                           ; BSR set to: 0
   873                           ;ecm.c: 262: {;ecm.c: 263: back(&motorL, &motorR);
   874  000818  0E35               	movlw	low _motorL
   875  00081A  6FD2               	movwf	back@m_L& (0+255),b
   876  00081C  0E00               	movlw	high _motorL
   877  00081E  6FD3               	movwf	(back@m_L+1)& (0+255),b
   878  000820  0E2C               	movlw	low _motorR
   879  000822  6FD4               	movwf	back@m_R& (0+255),b
   880  000824  0E00               	movlw	high _motorR
   881  000826  6FD5               	movwf	(back@m_R+1)& (0+255),b
   882  000828  EC2B  F009         	call	_back	;wreg free
   883                           
   884                           ;ecm.c: 264: } else if(arrayCount[counter-i]==1)
   885  00082C  D048               	goto	l286
   886  00082E                     l282:
   887  00082E  0100               	movlb	0	; () banked
   888  000830  51F9               	movf	main@i& (0+255),w,b
   889  000832  6FE0               	movwf	??_main& (0+255),b
   890  000834  6BE1               	clrf	(??_main+1)& (0+255),b
   891  000836  1FE0               	comf	??_main& (0+255),f,b
   892  000838  1FE1               	comf	(??_main+1)& (0+255),f,b
   893  00083A  4BE0               	infsnz	??_main& (0+255),f,b
   894  00083C  2BE1               	incf	(??_main+1)& (0+255),f,b
   895  00083E  51C4               	movf	_counter& (0+255),w,b
   896  000840  27E0               	addwf	??_main& (0+255),f,b
   897  000842  51C5               	movf	(_counter+1)& (0+255),w,b
   898  000844  23E1               	addwfc	(??_main+1)& (0+255),f,b
   899  000846  90D8               	bcf	status,0,c
   900  000848  37E0               	rlcf	??_main& (0+255),f,b
   901  00084A  37E1               	rlcf	(??_main+1)& (0+255),f,b
   902  00084C  0E60               	movlw	low _arrayCount
   903  00084E  25E0               	addwf	??_main& (0+255),w,b
   904  000850  6ED9               	movwf	fsr2l,c
   905  000852  0E00               	movlw	high _arrayCount
   906  000854  21E1               	addwfc	(??_main+1)& (0+255),w,b
   907  000856  6EDA               	movwf	fsr2h,c
   908  000858  04DE               	decf	postinc2,w,c
   909  00085A  10DE               	iorwf	postinc2,w,c
   910  00085C  A4D8               	btfss	status,2,c
   911  00085E  D00B               	goto	l284
   912                           
   913                           ; BSR set to: 0
   914                           ;ecm.c: 265: {;ecm.c: 266: turnRight(&motorL, &motorR);
   915  000860  0E35               	movlw	low _motorL
   916  000862  6FD2               	movwf	turnRight@m_L& (0+255),b
   917  000864  0E00               	movlw	high _motorL
   918  000866  6FD3               	movwf	(turnRight@m_L+1)& (0+255),b
   919  000868  0E2C               	movlw	low _motorR
   920  00086A  6FD4               	movwf	turnRight@m_R& (0+255),b
   921  00086C  0E00               	movlw	high _motorR
   922  00086E  6FD5               	movwf	(turnRight@m_R+1)& (0+255),b
   923  000870  EC40  F009         	call	_turnRight	;wreg free
   924                           
   925                           ;ecm.c: 267: } else if(arrayCount[counter-i]==2)
   926  000874  D024               	goto	l286
   927  000876                     l284:
   928  000876  0100               	movlb	0	; () banked
   929  000878  51F9               	movf	main@i& (0+255),w,b
   930  00087A  6FE0               	movwf	??_main& (0+255),b
   931  00087C  6BE1               	clrf	(??_main+1)& (0+255),b
   932  00087E  1FE0               	comf	??_main& (0+255),f,b
   933  000880  1FE1               	comf	(??_main+1)& (0+255),f,b
   934  000882  4BE0               	infsnz	??_main& (0+255),f,b
   935  000884  2BE1               	incf	(??_main+1)& (0+255),f,b
   936  000886  51C4               	movf	_counter& (0+255),w,b
   937  000888  27E0               	addwf	??_main& (0+255),f,b
   938  00088A  51C5               	movf	(_counter+1)& (0+255),w,b
   939  00088C  23E1               	addwfc	(??_main+1)& (0+255),f,b
   940  00088E  90D8               	bcf	status,0,c
   941  000890  37E0               	rlcf	??_main& (0+255),f,b
   942  000892  37E1               	rlcf	(??_main+1)& (0+255),f,b
   943  000894  0E60               	movlw	low _arrayCount
   944  000896  25E0               	addwf	??_main& (0+255),w,b
   945  000898  6ED9               	movwf	fsr2l,c
   946  00089A  0E00               	movlw	high _arrayCount
   947  00089C  21E1               	addwfc	(??_main+1)& (0+255),w,b
   948  00089E  6EDA               	movwf	fsr2h,c
   949  0008A0  0E02               	movlw	2
   950  0008A2  18DE               	xorwf	postinc2,w,c
   951  0008A4  10DE               	iorwf	postinc2,w,c
   952  0008A6  A4D8               	btfss	status,2,c
   953  0008A8  D00A               	goto	l286
   954                           
   955                           ; BSR set to: 0
   956                           ;ecm.c: 268: {;ecm.c: 269: turnLeft(&motorL, &motorR);
   957  0008AA  0E35               	movlw	low _motorL
   958  0008AC  6FD2               	movwf	turnLeft@m_L& (0+255),b
   959  0008AE  0E00               	movlw	high _motorL
   960  0008B0  6FD3               	movwf	(turnLeft@m_L+1)& (0+255),b
   961  0008B2  0E2C               	movlw	low _motorR
   962  0008B4  6FD4               	movwf	turnLeft@m_R& (0+255),b
   963  0008B6  0E00               	movlw	high _motorR
   964  0008B8  6FD5               	movwf	(turnLeft@m_R+1)& (0+255),b
   965  0008BA  EC55  F009         	call	_turnLeft	;wreg free
   966  0008BE                     l286:
   967                           
   968                           ;ecm.c: 270: };ecm.c: 271: _delay((unsigned long)((500)*(8000000/4000.0)));
   969  0008BE  0E06               	movlw	6
   970  0008C0  0100               	movlb	0	; () banked
   971  0008C2  6FE1               	movwf	(??_main+1)& (0+255),b
   972  0008C4  0E13               	movlw	19
   973  0008C6  6FE0               	movwf	??_main& (0+255),b
   974  0008C8  0EAD               	movlw	173
   975  0008CA                     u1757:
   976  0008CA  2EE8               	decfsz	wreg,f,c
   977  0008CC  D7FE               	bra	u1757
   978  0008CE  2FE0               	decfsz	??_main& (0+255),f,b
   979  0008D0  D7FC               	bra	u1757
   980  0008D2  2FE1               	decfsz	(??_main+1)& (0+255),f,b
   981  0008D4  D7FA               	bra	u1757
   982  0008D6  D000               	nop2	
   983                           
   984                           ;ecm.c: 272: stop(&motorL, &motorR);
   985  0008D8  0E35               	movlw	low _motorL
   986  0008DA  0100               	movlb	0	; () banked
   987  0008DC  6FD2               	movwf	stop@m_L& (0+255),b
   988  0008DE  0E00               	movlw	high _motorL
   989  0008E0  6FD3               	movwf	(stop@m_L+1)& (0+255),b
   990  0008E2  0E2C               	movlw	low _motorR
   991  0008E4  6FD4               	movwf	stop@m_R& (0+255),b
   992  0008E6  0E00               	movlw	high _motorR
   993  0008E8  6FD5               	movwf	(stop@m_R+1)& (0+255),b
   994  0008EA  EC94  F007         	call	_stop	;wreg free
   995  0008EE  0100               	movlb	0	; () banked
   996  0008F0  2BF9               	incf	main@i& (0+255),f,b
   997  0008F2                     l280:
   998                           
   999                           ; BSR set to: 0
  1000  0008F2  51F9               	movf	main@i& (0+255),w,b
  1001  0008F4  6FE0               	movwf	??_main& (0+255),b
  1002  0008F6  6BE1               	clrf	(??_main+1)& (0+255),b
  1003  0008F8  51C4               	movf	_counter& (0+255),w,b
  1004  0008FA  5DE0               	subwf	??_main& (0+255),w,b
  1005  0008FC  51C5               	movf	(_counter+1)& (0+255),w,b
  1006  0008FE  59E1               	subwfb	(??_main+1)& (0+255),w,b
  1007  000900  A0D8               	btfss	status,0,c
  1008  000902  D772               	goto	l281
  1009                           
  1010                           ; BSR set to: 0
  1011                           ;ecm.c: 273: };ecm.c: 274: fin=1;
  1012                           
  1013                           ; BSR set to: 0
  1014  000904  0E01               	movlw	1
  1015  000906  D732               	goto	L1
  1016  000908                     __end_of_main:
  1017                           	opt stack 0
  1018                           tblptru	equ	0xFF8
  1019                           postinc0	equ	0xFEE
  1020                           wreg	equ	0xFE8
  1021                           postinc2	equ	0xFDE
  1022                           fsr2h	equ	0xFDA
  1023                           fsr2l	equ	0xFD9
  1024                           status	equ	0xFD8
  1025                           
  1026 ;; *************** function _sprintf *****************
  1027 ;; Defined at:
  1028 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  1029 ;; Parameters:    Size  Location     Type
  1030 ;;  sp              2    4[BANK0 ] PTR unsigned char 
  1031 ;;		 -> main@buf(16), IRScreen2@buf(16), IRScreen@buf(16), 
  1032 ;;  f               3    6[BANK0 ] PTR const unsigned char 
  1033 ;;		 -> STR_4(9), STR_3(12), ROM(8191), STR_2(13), 
  1034 ;;		 -> STR_1(13), 
  1035 ;; Auto vars:     Size  Location     Type
  1036 ;;  tmpval          4    0        struct .
  1037 ;;  cp              3    0        PTR const unsigned char 
  1038 ;;  val             2   17[BANK0 ] unsigned int 
  1039 ;;  ap              2   15[BANK0 ] PTR void [1]
  1040 ;;		 -> ?_sprintf(2), 
  1041 ;;  len             2    0        unsigned int 
  1042 ;;  c               1   20[BANK0 ] unsigned char 
  1043 ;;  prec            1   19[BANK0 ] char 
  1044 ;;  flag            1   14[BANK0 ] unsigned char 
  1045 ;; Return value:  Size  Location     Type
  1046 ;;                  2    4[BANK0 ] int 
  1047 ;; Registers used:
  1048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1049 ;; Tracked objects:
  1050 ;;		On entry : 0/0
  1051 ;;		On exit  : 0/0
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1054 ;;      Params:         0       7       0       0
  1055 ;;      Locals:         0       7       0       0
  1056 ;;      Temps:          0       3       0       0
  1057 ;;      Totals:         0      17       0       0
  1058 ;;Total ram usage:       17 bytes
  1059 ;; Hardware stack levels used:    1
  1060 ;; Hardware stack levels required when called:    5
  1061 ;; This function calls:
  1062 ;;		___lwdiv
  1063 ;;		___lwmod
  1064 ;; This function is called by:
  1065 ;;		_main
  1066 ;;		_IRScreen
  1067 ;;		_IRScreen2
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           	psect	text1
  1072  000C16                     __ptext1:
  1073                           	opt stack 0
  1074  000C16                     _sprintf:
  1075                           	opt stack 25
  1076                           
  1077                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 516: signed char prec;;dopr
      +                          nt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;d
      +                          oprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned int val;;do
      +                          prnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = __va_sta
      +                          rt();
  1078                           
  1079                           ; BSR set to: 0
  1080                           ;incstack = 0
  1081  000C16  0ED0               	movlw	low (?_sprintf+5)
  1082  000C18  0100               	movlb	0	; () banked
  1083  000C1A  6FD6               	movwf	sprintf@ap& (0+255),b
  1084  000C1C  0E00               	movlw	high (?_sprintf+5)
  1085  000C1E  6FD7               	movwf	(sprintf@ap+1)& (0+255),b
  1086                           
  1087                           ;doprnt.c: 548: while((c = *f++)) {
  1088  000C20  D086               	goto	u1480
  1089  000C22                     
  1090                           ; BSR set to: 0
  1091                           ;doprnt.c: 550: if(c != '%')
  1092                           
  1093                           ; BSR set to: 0
  1094  000C22  0E25               	movlw	37
  1095  000C24  19DB               	xorwf	sprintf@c& (0+255),w,b
  1096  000C26  B4D8               	btfsc	status,2,c
  1097  000C28  D004               	goto	l301
  1098  000C2A  D006               	goto	l305
  1099  000C2C                     l2645:
  1100                           
  1101                           ; BSR set to: 0
  1102  000C2C  4BCB               	infsnz	sprintf@sp& (0+255),f,b
  1103  000C2E  2BCC               	incf	(sprintf@sp+1)& (0+255),f,b
  1104                           
  1105                           ;doprnt.c: 554: continue;
  1106  000C30  D07E               	goto	u1480
  1107  000C32                     l301:
  1108                           
  1109                           ; BSR set to: 0
  1110                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
  1111                           
  1112                           ; BSR set to: 0
  1113  000C32  0E00               	movlw	0
  1114  000C34  6FD5               	movwf	sprintf@flag& (0+255),b
  1115                           
  1116                           ;doprnt.c: 654: switch(c = *f++) {
  1117  000C36  D00A               	goto	l302
  1118  000C38                     l305:
  1119                           
  1120                           ; BSR set to: 0
  1121                           ;doprnt.c: 828: ((*sp++ = (c)));
  1122                           
  1123                           ; BSR set to: 0
  1124  000C38  C0CB  FFD9         	movff	sprintf@sp,fsr2l
  1125  000C3C  C0CC  FFDA         	movff	sprintf@sp+1,fsr2h
  1126  000C40  C0DB  FFDF         	movff	sprintf@c,indf2
  1127  000C44  D7F3               	goto	l2645
  1128  000C46                     
  1129                           ; BSR set to: 0
  1130                           ;doprnt.c: 837: flag |= 0xC0;
  1131                           
  1132                           ; BSR set to: 0
  1133  000C46  0EC0               	movlw	192
  1134  000C48  13D5               	iorwf	sprintf@flag& (0+255),f,b
  1135                           
  1136                           ; BSR set to: 0
  1137                           ;doprnt.c: 841: }
  1138                           
  1139                           ;doprnt.c: 838: break;
  1140  000C4A  D01B               	goto	l307
  1141  000C4C                     l302:
  1142                           
  1143                           ; BSR set to: 0
  1144                           
  1145                           ; BSR set to: 0
  1146  000C4C  C0CD  F0D2         	movff	sprintf@f,??_sprintf
  1147  000C50  C0CE  F0D3         	movff	sprintf@f+1,??_sprintf+1
  1148  000C54  C0CF  F0D4         	movff	sprintf@f+2,??_sprintf+2
  1149  000C58  2BCD               	incf	sprintf@f& (0+255),f,b
  1150  000C5A  0E00               	movlw	0
  1151  000C5C  23CE               	addwfc	(sprintf@f+1)& (0+255),f,b
  1152  000C5E  23CF               	addwfc	(sprintf@f+2)& (0+255),f,b
  1153  000C60  C0D2  FFF6         	movff	??_sprintf,tblptrl
  1154  000C64  C0D3  FFF7         	movff	??_sprintf+1,tblptrh
  1155  000C68  C0D4  FFF8         	movff	??_sprintf+2,tblptru
  1156  000C6C  0008               	tblrd		*
  1157  000C6E  CFF5 F0DB          	movff	tablat,sprintf@c
  1158  000C72  51DB               	movf	sprintf@c& (0+255),w,b
  1159                           
  1160                           ; Switch size 1, requested type "space"
  1161                           ; Number of cases is 2, Range of values is 0 to 117
  1162                           ; switch strategies available:
  1163                           ; Name         Instructions Cycles
  1164                           ; simple_byte            7     4 (average)
  1165                           ;	Chosen strategy is simple_byte
  1166  000C74  0A00               	xorlw	0	; case 0
  1167  000C76  B4D8               	btfsc	status,2,c
  1168  000C78  D070               	goto	u1490
  1169  000C7A  0A75               	xorlw	117	; case 117
  1170  000C7C  B4D8               	btfsc	status,2,c
  1171  000C7E  D7E3               	goto	l306
  1172  000C80  D7DB               	goto	l305
  1173  000C82                     l307:
  1174                           
  1175                           ; BSR set to: 0
  1176                           ;doprnt.c: 1292: {;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (uns
      +                          igned)0));
  1177                           
  1178                           ; BSR set to: 0
  1179  000C82  C0D6  FFD9         	movff	sprintf@ap,fsr2l
  1180  000C86  C0D7  FFDA         	movff	sprintf@ap+1,fsr2h
  1181  000C8A  CFDE F0D8          	movff	postinc2,sprintf@val
  1182  000C8E  CFDD F0D9          	movff	postdec2,sprintf@val+1
  1183                           
  1184                           ; BSR set to: 0
  1185  000C92  0E02               	movlw	2
  1186  000C94  27D6               	addwf	sprintf@ap& (0+255),f,b
  1187  000C96  0E00               	movlw	0
  1188  000C98  23D7               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;doprnt.c: 1306: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c
      +                          ++)
  1192  000C9A  0E01               	movlw	1
  1193  000C9C  6FDB               	movwf	sprintf@c& (0+255),b
  1194  000C9E  D011               	goto	l2675
  1195  000CA0                     
  1196                           ; BSR set to: 0
  1197                           ;doprnt.c: 1325: if(val < dpowers[c])
  1198                           
  1199                           ; BSR set to: 0
  1200  000CA0  51DB               	movf	sprintf@c& (0+255),w,b
  1201  000CA2  0D02               	mullw	2
  1202  000CA4  0E01               	movlw	low _dpowers
  1203  000CA6  24F3               	addwf	prodl,w,c
  1204  000CA8  6EF6               	movwf	tblptrl,c
  1205  000CAA  0E03               	movlw	high _dpowers
  1206  000CAC  20F4               	addwfc	prodh,w,c
  1207  000CAE  6EF7               	movwf	tblptrh,c
  1208  000CB0                     	if	0	;There are less than 3 active tblptr bytes
  1209  000CB0                     	endif
  1210  000CB0  0009               	tblrd		*+
  1211  000CB2  50F5               	movf	tablat,w,c
  1212  000CB4  5DD8               	subwf	sprintf@val& (0+255),w,b
  1213  000CB6  0009               	tblrd		*+
  1214  000CB8  50F5               	movf	tablat,w,c
  1215  000CBA  59D9               	subwfb	(sprintf@val+1)& (0+255),w,b
  1216  000CBC  A0D8               	btfss	status,0,c
  1217  000CBE  D005               	goto	u1470
  1218                           
  1219                           ; BSR set to: 0
  1220                           
  1221                           ; BSR set to: 0
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;doprnt.c: 1326: break;
  1225  000CC0  2BDB               	incf	sprintf@c& (0+255),f,b
  1226  000CC2                     l2675:
  1227                           
  1228                           ; BSR set to: 0
  1229  000CC2  0E05               	movlw	5
  1230  000CC4  19DB               	xorwf	sprintf@c& (0+255),w,b
  1231  000CC6  A4D8               	btfss	status,2,c
  1232  000CC8  D7EB               	goto	l308
  1233  000CCA                     u1470:
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;doprnt.c: 1441: {;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  1237  000CCA  C0DB  F0DA         	movff	sprintf@c,sprintf@prec
  1238                           
  1239                           ;doprnt.c: 1493: while(prec--) {
  1240  000CCE  D02B               	goto	l311
  1241  000CD0                     
  1242                           ; BSR set to: 0
  1243                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  1244                           
  1245                           ; BSR set to: 0
  1246  000CD0  51DA               	movf	sprintf@prec& (0+255),w,b
  1247  000CD2  0D02               	mullw	2
  1248  000CD4  0E01               	movlw	low _dpowers
  1249  000CD6  24F3               	addwf	prodl,w,c
  1250  000CD8  6EF6               	movwf	tblptrl,c
  1251  000CDA  0E03               	movlw	high _dpowers
  1252  000CDC  20F4               	addwfc	prodh,w,c
  1253  000CDE  6EF7               	movwf	tblptrh,c
  1254  000CE0                     	if	0	;There are less than 3 active tblptr bytes
  1255  000CE0                     	endif
  1256  000CE0  0009               	tblrd		*+
  1257  000CE2  CFF5 F024          	movff	tablat,___lwdiv@divisor
  1258  000CE6  000A               	tblrd		*-
  1259  000CE8  CFF5 F025          	movff	tablat,___lwdiv@divisor+1
  1260  000CEC  C0D8  F022         	movff	sprintf@val,___lwdiv@dividend
  1261  000CF0  C0D9  F023         	movff	sprintf@val+1,___lwdiv@dividend+1
  1262  000CF4  EC21  F008         	call	___lwdiv	;wreg free
  1263  000CF8  C022  F0C7         	movff	?___lwdiv,___lwmod@dividend
  1264  000CFC  C023  F0C8         	movff	?___lwdiv+1,___lwmod@dividend+1
  1265  000D00  0E00               	movlw	0
  1266  000D02  0100               	movlb	0	; () banked
  1267  000D04  6FCA               	movwf	(___lwmod@divisor+1)& (0+255),b
  1268  000D06  0E0A               	movlw	10
  1269  000D08  6FC9               	movwf	___lwmod@divisor& (0+255),b
  1270  000D0A  ECB9  F008         	call	___lwmod	;wreg free
  1271  000D0E  0100               	movlb	0	; () banked
  1272  000D10  51C7               	movf	?___lwmod& (0+255),w,b
  1273  000D12  0F30               	addlw	48
  1274  000D14  6FDB               	movwf	sprintf@c& (0+255),b
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  1278  000D16  C0CB  FFD9         	movff	sprintf@sp,fsr2l
  1279  000D1A  C0CC  FFDA         	movff	sprintf@sp+1,fsr2h
  1280  000D1E  C0DB  FFDF         	movff	sprintf@c,indf2
  1281                           
  1282                           ; BSR set to: 0
  1283  000D22  4BCB               	infsnz	sprintf@sp& (0+255),f,b
  1284  000D24  2BCC               	incf	(sprintf@sp+1)& (0+255),f,b
  1285  000D26                     l311:
  1286                           
  1287                           ; BSR set to: 0
  1288                           
  1289                           ; BSR set to: 0
  1290  000D26  07DA               	decf	sprintf@prec& (0+255),f,b
  1291  000D28  29DA               	incf	sprintf@prec& (0+255),w,b
  1292  000D2A  A4D8               	btfss	status,2,c
  1293  000D2C  D7D1               	goto	l312
  1294  000D2E                     u1480:
  1295                           
  1296                           ; BSR set to: 0
  1297                           
  1298                           ; BSR set to: 0
  1299                           
  1300                           ; BSR set to: 0
  1301  000D2E  C0CD  F0D2         	movff	sprintf@f,??_sprintf
  1302  000D32  C0CE  F0D3         	movff	sprintf@f+1,??_sprintf+1
  1303  000D36  C0CF  F0D4         	movff	sprintf@f+2,??_sprintf+2
  1304  000D3A  2BCD               	incf	sprintf@f& (0+255),f,b
  1305  000D3C  0E00               	movlw	0
  1306  000D3E  23CE               	addwfc	(sprintf@f+1)& (0+255),f,b
  1307  000D40  23CF               	addwfc	(sprintf@f+2)& (0+255),f,b
  1308  000D42  C0D2  FFF6         	movff	??_sprintf,tblptrl
  1309  000D46  C0D3  FFF7         	movff	??_sprintf+1,tblptrh
  1310  000D4A  C0D4  FFF8         	movff	??_sprintf+2,tblptru
  1311  000D4E  0008               	tblrd		*
  1312  000D50  CFF5 F0DB          	movff	tablat,sprintf@c
  1313  000D54  51DB               	movf	sprintf@c& (0+255),w,b
  1314  000D56  A4D8               	btfss	status,2,c
  1315  000D58  D764               	goto	l300
  1316  000D5A                     u1490:
  1317                           
  1318                           ; BSR set to: 0
  1319                           ;doprnt.c: 1557: *sp = 0;
  1320                           
  1321                           ; BSR set to: 0
  1322                           
  1323                           ;doprnt.c: 1544: };doprnt.c: 1552: };doprnt.c: 1554: alldone:
  1324                           
  1325                           ; BSR set to: 0
  1326  000D5A  C0CB  FFD9         	movff	sprintf@sp,fsr2l
  1327  000D5E  C0CC  FFDA         	movff	sprintf@sp+1,fsr2h
  1328  000D62  0E00               	movlw	0
  1329  000D64  6EDF               	movwf	indf2,c
  1330  000D66  0012               	return	
  1331  000D68                     __end_of_sprintf:
  1332                           	opt stack 0
  1333                           tblptru	equ	0xFF8
  1334                           tblptrh	equ	0xFF7
  1335                           tblptrl	equ	0xFF6
  1336                           tablat	equ	0xFF5
  1337                           prodh	equ	0xFF4
  1338                           prodl	equ	0xFF3
  1339                           postinc0	equ	0xFEE
  1340                           wreg	equ	0xFE8
  1341                           indf2	equ	0xFDF
  1342                           postinc2	equ	0xFDE
  1343                           postdec2	equ	0xFDD
  1344                           fsr2h	equ	0xFDA
  1345                           fsr2l	equ	0xFD9
  1346                           status	equ	0xFD8
  1347                           
  1348 ;; *************** function ___lwmod *****************
  1349 ;; Defined at:
  1350 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
  1351 ;; Parameters:    Size  Location     Type
  1352 ;;  dividend        2    0[BANK0 ] unsigned int 
  1353 ;;  divisor         2    2[BANK0 ] unsigned int 
  1354 ;; Auto vars:     Size  Location     Type
  1355 ;;  counter         1   40[COMRAM] unsigned char 
  1356 ;; Return value:  Size  Location     Type
  1357 ;;                  2    0[BANK0 ] unsigned int 
  1358 ;; Registers used:
  1359 ;;		wreg, status,2, status,0
  1360 ;; Tracked objects:
  1361 ;;		On entry : 0/0
  1362 ;;		On exit  : 0/0
  1363 ;;		Unchanged: 0/0
  1364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1365 ;;      Params:         0       4       0       0
  1366 ;;      Locals:         1       0       0       0
  1367 ;;      Temps:          0       0       0       0
  1368 ;;      Totals:         1       4       0       0
  1369 ;;Total ram usage:        5 bytes
  1370 ;; Hardware stack levels used:    1
  1371 ;; Hardware stack levels required when called:    4
  1372 ;; This function calls:
  1373 ;;		Nothing
  1374 ;; This function is called by:
  1375 ;;		_sprintf
  1376 ;; This function uses a non-reentrant model
  1377 ;;
  1378                           
  1379                           	psect	text2
  1380  001172                     __ptext2:
  1381                           	opt stack 0
  1382  001172                     ___lwmod:
  1383                           	opt stack 25
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;incstack = 0
  1387  001172  0100               	movlb	0	; () banked
  1388  001174  51C9               	movf	___lwmod@divisor& (0+255),w,b
  1389  001176  11CA               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1390  001178  B4D8               	btfsc	status,2,c
  1391  00117A  D018               	goto	l813
  1392                           
  1393                           ; BSR set to: 0
  1394  00117C  0E01               	movlw	1
  1395  00117E  6E29               	movwf	___lwmod@counter,c
  1396  001180  D004               	goto	l808
  1397  001182                     
  1398                           ; BSR set to: 0
  1399                           
  1400                           ; BSR set to: 0
  1401  001182  90D8               	bcf	status,0,c
  1402  001184  37C9               	rlcf	___lwmod@divisor& (0+255),f,b
  1403  001186  37CA               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1404  001188  2A29               	incf	___lwmod@counter,f,c
  1405  00118A                     l808:
  1406                           
  1407                           ; BSR set to: 0
  1408                           
  1409                           ; BSR set to: 0
  1410  00118A  AFCA               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  1411  00118C  D7FA               	goto	l809
  1412  00118E                     u1380:
  1413                           
  1414                           ; BSR set to: 0
  1415                           
  1416                           ; BSR set to: 0
  1417                           
  1418                           ; BSR set to: 0
  1419  00118E  51C9               	movf	___lwmod@divisor& (0+255),w,b
  1420  001190  5DC7               	subwf	___lwmod@dividend& (0+255),w,b
  1421  001192  51CA               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1422  001194  59C8               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1423  001196  A0D8               	btfss	status,0,c
  1424  001198  D004               	goto	l812
  1425                           
  1426                           ; BSR set to: 0
  1427  00119A  51C9               	movf	___lwmod@divisor& (0+255),w,b
  1428  00119C  5FC7               	subwf	___lwmod@dividend& (0+255),f,b
  1429  00119E  51CA               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1430  0011A0  5BC8               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1431  0011A2                     l812:
  1432                           
  1433                           ; BSR set to: 0
  1434                           
  1435                           ; BSR set to: 0
  1436  0011A2  90D8               	bcf	status,0,c
  1437  0011A4  33CA               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1438  0011A6  33C9               	rrcf	___lwmod@divisor& (0+255),f,b
  1439                           
  1440                           ; BSR set to: 0
  1441  0011A8  2E29               	decfsz	___lwmod@counter,f,c
  1442  0011AA  D7F1               	goto	u1380
  1443  0011AC                     l813:
  1444                           
  1445                           ; BSR set to: 0
  1446                           
  1447                           ; BSR set to: 0
  1448  0011AC  C0C7  F0C7         	movff	___lwmod@dividend,?___lwmod
  1449  0011B0  C0C8  F0C8         	movff	___lwmod@dividend+1,?___lwmod+1
  1450                           
  1451                           ; BSR set to: 0
  1452  0011B4  0012               	return		;funcret
  1453  0011B6                     __end_of___lwmod:
  1454                           	opt stack 0
  1455                           tblptru	equ	0xFF8
  1456                           tblptrh	equ	0xFF7
  1457                           tblptrl	equ	0xFF6
  1458                           tablat	equ	0xFF5
  1459                           prodh	equ	0xFF4
  1460                           prodl	equ	0xFF3
  1461                           postinc0	equ	0xFEE
  1462                           wreg	equ	0xFE8
  1463                           indf2	equ	0xFDF
  1464                           postinc2	equ	0xFDE
  1465                           postdec2	equ	0xFDD
  1466                           fsr2h	equ	0xFDA
  1467                           fsr2l	equ	0xFD9
  1468                           status	equ	0xFD8
  1469                           
  1470 ;; *************** function ___lwdiv *****************
  1471 ;; Defined at:
  1472 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  1473 ;; Parameters:    Size  Location     Type
  1474 ;;  dividend        2   33[COMRAM] unsigned int 
  1475 ;;  divisor         2   35[COMRAM] unsigned int 
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;  quotient        2   37[COMRAM] unsigned int 
  1478 ;;  counter         1   39[COMRAM] unsigned char 
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  2   33[COMRAM] unsigned int 
  1481 ;; Registers used:
  1482 ;;		wreg, status,2, status,0
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1488 ;;      Params:         4       0       0       0
  1489 ;;      Locals:         3       0       0       0
  1490 ;;      Temps:          0       0       0       0
  1491 ;;      Totals:         7       0       0       0
  1492 ;;Total ram usage:        7 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; Hardware stack levels required when called:    4
  1495 ;; This function calls:
  1496 ;;		Nothing
  1497 ;; This function is called by:
  1498 ;;		_main
  1499 ;;		_sprintf
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           	psect	text3
  1504  001042                     __ptext3:
  1505                           	opt stack 0
  1506  001042                     ___lwdiv:
  1507                           	opt stack 25
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;incstack = 0
  1511  001042  0E00               	movlw	0
  1512  001044  6E27               	movwf	___lwdiv@quotient+1,c
  1513  001046  0E00               	movlw	0
  1514  001048  6E26               	movwf	___lwdiv@quotient,c
  1515  00104A  5024               	movf	___lwdiv@divisor,w,c
  1516  00104C  1025               	iorwf	___lwdiv@divisor+1,w,c
  1517  00104E  B4D8               	btfsc	status,2,c
  1518  001050  D01C               	goto	l803
  1519  001052  0E01               	movlw	1
  1520  001054  6E28               	movwf	___lwdiv@counter,c
  1521  001056  D004               	goto	l798
  1522  001058  90D8               	bcf	status,0,c
  1523  00105A  3624               	rlcf	___lwdiv@divisor,f,c
  1524  00105C  3625               	rlcf	___lwdiv@divisor+1,f,c
  1525  00105E  2A28               	incf	___lwdiv@counter,f,c
  1526  001060                     l798:
  1527  001060  AE25               	btfss	___lwdiv@divisor+1,7,c
  1528  001062  D7FA               	goto	l799
  1529  001064                     u820:
  1530  001064  90D8               	bcf	status,0,c
  1531  001066  3626               	rlcf	___lwdiv@quotient,f,c
  1532  001068  3627               	rlcf	___lwdiv@quotient+1,f,c
  1533  00106A  5024               	movf	___lwdiv@divisor,w,c
  1534  00106C  5C22               	subwf	___lwdiv@dividend,w,c
  1535  00106E  5025               	movf	___lwdiv@divisor+1,w,c
  1536  001070  5823               	subwfb	___lwdiv@dividend+1,w,c
  1537  001072  A0D8               	btfss	status,0,c
  1538  001074  D005               	goto	l802
  1539  001076  5024               	movf	___lwdiv@divisor,w,c
  1540  001078  5E22               	subwf	___lwdiv@dividend,f,c
  1541  00107A  5025               	movf	___lwdiv@divisor+1,w,c
  1542  00107C  5A23               	subwfb	___lwdiv@dividend+1,f,c
  1543  00107E  8026               	bsf	___lwdiv@quotient,0,c
  1544  001080                     l802:
  1545  001080  90D8               	bcf	status,0,c
  1546  001082  3225               	rrcf	___lwdiv@divisor+1,f,c
  1547  001084  3224               	rrcf	___lwdiv@divisor,f,c
  1548  001086  2E28               	decfsz	___lwdiv@counter,f,c
  1549  001088  D7ED               	goto	u820
  1550  00108A                     l803:
  1551  00108A  C026  F022         	movff	___lwdiv@quotient,?___lwdiv
  1552  00108E  C027  F023         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1553  001092  0012               	return		;funcret
  1554  001094                     __end_of___lwdiv:
  1555                           	opt stack 0
  1556                           tblptru	equ	0xFF8
  1557                           tblptrh	equ	0xFF7
  1558                           tblptrl	equ	0xFF6
  1559                           tablat	equ	0xFF5
  1560                           prodh	equ	0xFF4
  1561                           prodl	equ	0xFF3
  1562                           postinc0	equ	0xFEE
  1563                           wreg	equ	0xFE8
  1564                           indf2	equ	0xFDF
  1565                           postinc2	equ	0xFDE
  1566                           postdec2	equ	0xFDD
  1567                           fsr2h	equ	0xFDA
  1568                           fsr2l	equ	0xFD9
  1569                           status	equ	0xFD8
  1570                           
  1571 ;; *************** function _back *****************
  1572 ;; Defined at:
  1573 ;;		line 112 in file "MotorControl.c"
  1574 ;; Parameters:    Size  Location     Type
  1575 ;;  m_L             2   11[BANK0 ] PTR struct DC_motor
  1576 ;;		 -> motorL(9), 
  1577 ;;  m_R             2   13[BANK0 ] PTR struct DC_motor
  1578 ;;		 -> motorR(9), 
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;		None
  1581 ;; Return value:  Size  Location     Type
  1582 ;;                  1    wreg      void 
  1583 ;; Registers used:
  1584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1590 ;;      Params:         0       4       0       0
  1591 ;;      Locals:         0       0       0       0
  1592 ;;      Temps:          0       0       0       0
  1593 ;;      Totals:         0       4       0       0
  1594 ;;Total ram usage:        4 bytes
  1595 ;; Hardware stack levels used:    1
  1596 ;; Hardware stack levels required when called:    6
  1597 ;; This function calls:
  1598 ;;		_setMotorPWM
  1599 ;; This function is called by:
  1600 ;;		_main
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           	psect	text4
  1605  001256                     __ptext4:
  1606                           	opt stack 0
  1607  001256                     _back:
  1608                           	opt stack 24
  1609                           
  1610                           ;MotorControl.c: 114: motorL.direction=0;
  1611                           
  1612                           ;incstack = 0
  1613  001256  0E00               	movlw	0
  1614  001258  6E36               	movwf	_motorL+1,c
  1615                           
  1616                           ;MotorControl.c: 115: motorL.power=69;
  1617  00125A  0E45               	movlw	69
  1618  00125C  6E35               	movwf	_motorL,c
  1619                           
  1620                           ;MotorControl.c: 116: setMotorPWM(m_L);
  1621  00125E  C0D2  F0CB         	movff	back@m_L,setMotorPWM@m
  1622  001262  C0D3  F0CC         	movff	back@m_L+1,setMotorPWM@m+1
  1623  001266  EC84  F004         	call	_setMotorPWM	;wreg free
  1624                           
  1625                           ;MotorControl.c: 117: motorR.direction=0;
  1626  00126A  0E00               	movlw	0
  1627  00126C  6E2D               	movwf	_motorR+1,c
  1628                           
  1629                           ;MotorControl.c: 118: motorR.power=65;
  1630  00126E  0E41               	movlw	65
  1631  001270  6E2C               	movwf	_motorR,c
  1632                           
  1633                           ;MotorControl.c: 119: setMotorPWM(m_R);
  1634  001272  C0D4  F0CB         	movff	back@m_R,setMotorPWM@m
  1635  001276  C0D5  F0CC         	movff	back@m_R+1,setMotorPWM@m+1
  1636  00127A  EC84  F004         	call	_setMotorPWM	;wreg free
  1637  00127E  0012               	return		;funcret
  1638  001280                     __end_of_back:
  1639                           	opt stack 0
  1640                           tblptru	equ	0xFF8
  1641                           tblptrh	equ	0xFF7
  1642                           tblptrl	equ	0xFF6
  1643                           tablat	equ	0xFF5
  1644                           prodh	equ	0xFF4
  1645                           prodl	equ	0xFF3
  1646                           postinc0	equ	0xFEE
  1647                           wreg	equ	0xFE8
  1648                           indf2	equ	0xFDF
  1649                           postinc2	equ	0xFDE
  1650                           postdec2	equ	0xFDD
  1651                           fsr2h	equ	0xFDA
  1652                           fsr2l	equ	0xFD9
  1653                           status	equ	0xFD8
  1654                           
  1655 ;; *************** function _TrackIR *****************
  1656 ;; Defined at:
  1657 ;;		line 83 in file "ecm.c"
  1658 ;; Parameters:    Size  Location     Type
  1659 ;;  LeftIR          2   16[BANK0 ] int 
  1660 ;;  RightIR         2   18[BANK0 ] int 
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;  limit           2   23[BANK0 ] int 
  1663 ;; Return value:  Size  Location     Type
  1664 ;;                  1    wreg      void 
  1665 ;; Registers used:
  1666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1672 ;;      Params:         0       4       0       0
  1673 ;;      Locals:         0       2       0       0
  1674 ;;      Temps:          0       3       0       0
  1675 ;;      Totals:         0       9       0       0
  1676 ;;Total ram usage:        9 bytes
  1677 ;; Hardware stack levels used:    1
  1678 ;; Hardware stack levels required when called:    7
  1679 ;; This function calls:
  1680 ;;		_forward
  1681 ;;		_fwdCount
  1682 ;;		_leftCount
  1683 ;;		_rightCount
  1684 ;;		_stop
  1685 ;;		_turnLeft
  1686 ;;		_turnRight
  1687 ;; This function is called by:
  1688 ;;		_main
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           	psect	text5
  1693  00033C                     __ptext5:
  1694                           	opt stack 0
  1695  00033C                     _TrackIR:
  1696                           	opt stack 23
  1697                           
  1698                           ;ecm.c: 84: int limit=10;
  1699                           
  1700                           ;incstack = 0
  1701  00033C  0E00               	movlw	0
  1702  00033E  0100               	movlb	0	; () banked
  1703  000340  6FDF               	movwf	(TrackIR@limit+1)& (0+255),b
  1704  000342  0E0A               	movlw	10
  1705  000344  6FDE               	movwf	TrackIR@limit& (0+255),b
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;ecm.c: 86: if ((LeftIR - RightIR)>limit) {
  1709  000346  C0D9  F0DB         	movff	TrackIR@RightIR,??_TrackIR
  1710  00034A  C0DA  F0DC         	movff	TrackIR@RightIR+1,??_TrackIR+1
  1711  00034E  1FDB               	comf	??_TrackIR& (0+255),f,b
  1712  000350  1FDC               	comf	(??_TrackIR+1)& (0+255),f,b
  1713  000352  4BDB               	infsnz	??_TrackIR& (0+255),f,b
  1714  000354  2BDC               	incf	(??_TrackIR+1)& (0+255),f,b
  1715  000356  51D7               	movf	TrackIR@LeftIR& (0+255),w,b
  1716  000358  27DB               	addwf	??_TrackIR& (0+255),f,b
  1717  00035A  51D8               	movf	(TrackIR@LeftIR+1)& (0+255),w,b
  1718  00035C  23DC               	addwfc	(??_TrackIR+1)& (0+255),f,b
  1719  00035E  51DB               	movf	??_TrackIR& (0+255),w,b
  1720  000360  5DDE               	subwf	TrackIR@limit& (0+255),w,b
  1721  000362  51DF               	movf	(TrackIR@limit+1)& (0+255),w,b
  1722  000364  0A80               	xorlw	128
  1723  000366  6FDD               	movwf	(??_TrackIR+2)& (0+255),b
  1724  000368  51DC               	movf	(??_TrackIR+1)& (0+255),w,b
  1725  00036A  0A80               	xorlw	128
  1726  00036C  59DD               	subwfb	(??_TrackIR+2)& (0+255),w,b
  1727  00036E  B0D8               	btfsc	status,0,c
  1728  000370  D055               	goto	l223
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;ecm.c: 87: if(counter==0){
  1732  000372  51C4               	movf	_counter& (0+255),w,b
  1733  000374  11C5               	iorwf	(_counter+1)& (0+255),w,b
  1734  000376  A4D8               	btfss	status,2,c
  1735  000378  D028               	goto	l224
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;ecm.c: 88: turnLeft(&motorL, &motorR);
  1739  00037A  0E35               	movlw	low _motorL
  1740  00037C  6FD2               	movwf	turnLeft@m_L& (0+255),b
  1741  00037E  0E00               	movlw	high _motorL
  1742  000380  6FD3               	movwf	(turnLeft@m_L+1)& (0+255),b
  1743  000382  0E2C               	movlw	low _motorR
  1744  000384  6FD4               	movwf	turnLeft@m_R& (0+255),b
  1745  000386  0E00               	movlw	high _motorR
  1746  000388  6FD5               	movwf	(turnLeft@m_R+1)& (0+255),b
  1747  00038A  EC55  F009         	call	_turnLeft	;wreg free
  1748                           
  1749                           ;ecm.c: 89: leftCount();
  1750  00038E  EC00  F00A         	call	_leftCount	;wreg free
  1751                           
  1752                           ;ecm.c: 90: counter++;
  1753  000392  0100               	movlb	0	; () banked
  1754  000394  4BC4               	infsnz	_counter& (0+255),f,b
  1755  000396  2BC5               	incf	(_counter+1)& (0+255),f,b
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;ecm.c: 91: _delay((unsigned long)((500)*(8000000/4000.0)));
  1759  000398  0E06               	movlw	6
  1760  00039A  0100               	movlb	0	; () banked
  1761  00039C  6FDC               	movwf	(??_TrackIR+1)& (0+255),b
  1762  00039E  0E13               	movlw	19
  1763  0003A0  6FDB               	movwf	??_TrackIR& (0+255),b
  1764  0003A2  0EAD               	movlw	173
  1765  0003A4                     u1767:
  1766  0003A4  2EE8               	decfsz	wreg,f,c
  1767  0003A6  D7FE               	bra	u1767
  1768  0003A8  2FDB               	decfsz	??_TrackIR& (0+255),f,b
  1769  0003AA  D7FC               	bra	u1767
  1770  0003AC  2FDC               	decfsz	(??_TrackIR+1)& (0+255),f,b
  1771  0003AE  D7FA               	bra	u1767
  1772  0003B0  D000               	nop2	
  1773                           
  1774                           ;ecm.c: 92: stop(&motorL, &motorR);
  1775  0003B2  0E35               	movlw	low _motorL
  1776  0003B4  0100               	movlb	0	; () banked
  1777  0003B6  6FD2               	movwf	stop@m_L& (0+255),b
  1778  0003B8  0E00               	movlw	high _motorL
  1779  0003BA  6FD3               	movwf	(stop@m_L+1)& (0+255),b
  1780  0003BC  0E2C               	movlw	low _motorR
  1781  0003BE  6FD4               	movwf	stop@m_R& (0+255),b
  1782  0003C0  0E00               	movlw	high _motorR
  1783  0003C2  6FD5               	movwf	(stop@m_R+1)& (0+255),b
  1784  0003C4  EC94  F007         	call	_stop	;wreg free
  1785                           
  1786                           ;ecm.c: 93: } else {
  1787  0003C8  D160               	goto	l237
  1788  0003CA                     l224:
  1789                           
  1790                           ;ecm.c: 94: turnLeft(&motorL, &motorR);
  1791  0003CA  0E35               	movlw	low _motorL
  1792  0003CC  0100               	movlb	0	; () banked
  1793  0003CE  6FD2               	movwf	turnLeft@m_L& (0+255),b
  1794  0003D0  0E00               	movlw	high _motorL
  1795  0003D2  6FD3               	movwf	(turnLeft@m_L+1)& (0+255),b
  1796  0003D4  0E2C               	movlw	low _motorR
  1797  0003D6  6FD4               	movwf	turnLeft@m_R& (0+255),b
  1798  0003D8  0E00               	movlw	high _motorR
  1799  0003DA  6FD5               	movwf	(turnLeft@m_R+1)& (0+255),b
  1800  0003DC  EC55  F009         	call	_turnLeft	;wreg free
  1801                           
  1802                           ;ecm.c: 95: leftCount();
  1803  0003E0  EC00  F00A         	call	_leftCount	;wreg free
  1804                           
  1805                           ;ecm.c: 96: counter++;
  1806  0003E4  0100               	movlb	0	; () banked
  1807  0003E6  4BC4               	infsnz	_counter& (0+255),f,b
  1808  0003E8  2BC5               	incf	(_counter+1)& (0+255),f,b
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;ecm.c: 97: _delay((unsigned long)((500)*(8000000/4000.0)));
  1812  0003EA  0E06               	movlw	6
  1813  0003EC  0100               	movlb	0	; () banked
  1814  0003EE  6FDC               	movwf	(??_TrackIR+1)& (0+255),b
  1815  0003F0  0E13               	movlw	19
  1816  0003F2  6FDB               	movwf	??_TrackIR& (0+255),b
  1817  0003F4  0EAD               	movlw	173
  1818  0003F6                     u1777:
  1819  0003F6  2EE8               	decfsz	wreg,f,c
  1820  0003F8  D7FE               	bra	u1777
  1821  0003FA  2FDB               	decfsz	??_TrackIR& (0+255),f,b
  1822  0003FC  D7FC               	bra	u1777
  1823  0003FE  2FDC               	decfsz	(??_TrackIR+1)& (0+255),f,b
  1824  000400  D7FA               	bra	u1777
  1825  000402  D000               	nop2	
  1826                           
  1827                           ;ecm.c: 98: stop(&motorL, &motorR);
  1828  000404  0E35               	movlw	low _motorL
  1829  000406  0100               	movlb	0	; () banked
  1830  000408  6FD2               	movwf	stop@m_L& (0+255),b
  1831  00040A  0E00               	movlw	high _motorL
  1832  00040C  6FD3               	movwf	(stop@m_L+1)& (0+255),b
  1833  00040E  0E2C               	movlw	low _motorR
  1834  000410  6FD4               	movwf	stop@m_R& (0+255),b
  1835  000412  0E00               	movlw	high _motorR
  1836  000414  6FD5               	movwf	(stop@m_R+1)& (0+255),b
  1837  000416  EC94  F007         	call	_stop	;wreg free
  1838                           
  1839                           ;ecm.c: 99: };ecm.c: 100: }
  1840  00041A  D137               	goto	l237
  1841  00041C                     l223:
  1842                           
  1843                           ;ecm.c: 101: else if ((RightIR -LeftIR) >limit) {
  1844  00041C  C0D7  F0DB         	movff	TrackIR@LeftIR,??_TrackIR
  1845  000420  C0D8  F0DC         	movff	TrackIR@LeftIR+1,??_TrackIR+1
  1846  000424  0100               	movlb	0	; () banked
  1847  000426  1FDB               	comf	??_TrackIR& (0+255),f,b
  1848  000428  1FDC               	comf	(??_TrackIR+1)& (0+255),f,b
  1849  00042A  4BDB               	infsnz	??_TrackIR& (0+255),f,b
  1850  00042C  2BDC               	incf	(??_TrackIR+1)& (0+255),f,b
  1851  00042E  51D9               	movf	TrackIR@RightIR& (0+255),w,b
  1852  000430  27DB               	addwf	??_TrackIR& (0+255),f,b
  1853  000432  51DA               	movf	(TrackIR@RightIR+1)& (0+255),w,b
  1854  000434  23DC               	addwfc	(??_TrackIR+1)& (0+255),f,b
  1855  000436  51DB               	movf	??_TrackIR& (0+255),w,b
  1856  000438  5DDE               	subwf	TrackIR@limit& (0+255),w,b
  1857  00043A  51DF               	movf	(TrackIR@limit+1)& (0+255),w,b
  1858  00043C  0A80               	xorlw	128
  1859  00043E  6FDD               	movwf	(??_TrackIR+2)& (0+255),b
  1860  000440  51DC               	movf	(??_TrackIR+1)& (0+255),w,b
  1861  000442  0A80               	xorlw	128
  1862  000444  59DD               	subwfb	(??_TrackIR+2)& (0+255),w,b
  1863  000446  B0D8               	btfsc	status,0,c
  1864  000448  D055               	goto	l227
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;ecm.c: 103: if(counter==0){
  1868  00044A  51C4               	movf	_counter& (0+255),w,b
  1869  00044C  11C5               	iorwf	(_counter+1)& (0+255),w,b
  1870  00044E  A4D8               	btfss	status,2,c
  1871  000450  D028               	goto	l228
  1872                           
  1873                           ; BSR set to: 0
  1874                           ;ecm.c: 104: turnRight(&motorL, &motorR);
  1875  000452  0E35               	movlw	low _motorL
  1876  000454  6FD2               	movwf	turnRight@m_L& (0+255),b
  1877  000456  0E00               	movlw	high _motorL
  1878  000458  6FD3               	movwf	(turnRight@m_L+1)& (0+255),b
  1879  00045A  0E2C               	movlw	low _motorR
  1880  00045C  6FD4               	movwf	turnRight@m_R& (0+255),b
  1881  00045E  0E00               	movlw	high _motorR
  1882  000460  6FD5               	movwf	(turnRight@m_R+1)& (0+255),b
  1883  000462  EC40  F009         	call	_turnRight	;wreg free
  1884                           
  1885                           ;ecm.c: 105: rightCount();
  1886  000466  ECF1  F009         	call	_rightCount	;wreg free
  1887                           
  1888                           ;ecm.c: 106: counter++;
  1889  00046A  0100               	movlb	0	; () banked
  1890  00046C  4BC4               	infsnz	_counter& (0+255),f,b
  1891  00046E  2BC5               	incf	(_counter+1)& (0+255),f,b
  1892                           
  1893                           ; BSR set to: 0
  1894                           ;ecm.c: 107: _delay((unsigned long)((500)*(8000000/4000.0)));
  1895  000470  0E06               	movlw	6
  1896  000472  0100               	movlb	0	; () banked
  1897  000474  6FDC               	movwf	(??_TrackIR+1)& (0+255),b
  1898  000476  0E13               	movlw	19
  1899  000478  6FDB               	movwf	??_TrackIR& (0+255),b
  1900  00047A  0EAD               	movlw	173
  1901  00047C                     u1787:
  1902  00047C  2EE8               	decfsz	wreg,f,c
  1903  00047E  D7FE               	bra	u1787
  1904  000480  2FDB               	decfsz	??_TrackIR& (0+255),f,b
  1905  000482  D7FC               	bra	u1787
  1906  000484  2FDC               	decfsz	(??_TrackIR+1)& (0+255),f,b
  1907  000486  D7FA               	bra	u1787
  1908  000488  D000               	nop2	
  1909                           
  1910                           ;ecm.c: 108: stop(&motorL, &motorR);
  1911  00048A  0E35               	movlw	low _motorL
  1912  00048C  0100               	movlb	0	; () banked
  1913  00048E  6FD2               	movwf	stop@m_L& (0+255),b
  1914  000490  0E00               	movlw	high _motorL
  1915  000492  6FD3               	movwf	(stop@m_L+1)& (0+255),b
  1916  000494  0E2C               	movlw	low _motorR
  1917  000496  6FD4               	movwf	stop@m_R& (0+255),b
  1918  000498  0E00               	movlw	high _motorR
  1919  00049A  6FD5               	movwf	(stop@m_R+1)& (0+255),b
  1920  00049C  EC94  F007         	call	_stop	;wreg free
  1921                           
  1922                           ;ecm.c: 109: } else {
  1923  0004A0  D0F4               	goto	l237
  1924  0004A2                     l228:
  1925                           
  1926                           ;ecm.c: 111: turnRight(&motorL, &motorR);
  1927  0004A2  0E35               	movlw	low _motorL
  1928  0004A4  0100               	movlb	0	; () banked
  1929  0004A6  6FD2               	movwf	turnRight@m_L& (0+255),b
  1930  0004A8  0E00               	movlw	high _motorL
  1931  0004AA  6FD3               	movwf	(turnRight@m_L+1)& (0+255),b
  1932  0004AC  0E2C               	movlw	low _motorR
  1933  0004AE  6FD4               	movwf	turnRight@m_R& (0+255),b
  1934  0004B0  0E00               	movlw	high _motorR
  1935  0004B2  6FD5               	movwf	(turnRight@m_R+1)& (0+255),b
  1936  0004B4  EC40  F009         	call	_turnRight	;wreg free
  1937                           
  1938                           ;ecm.c: 112: rightCount();
  1939  0004B8  ECF1  F009         	call	_rightCount	;wreg free
  1940                           
  1941                           ;ecm.c: 113: counter++;
  1942  0004BC  0100               	movlb	0	; () banked
  1943  0004BE  4BC4               	infsnz	_counter& (0+255),f,b
  1944  0004C0  2BC5               	incf	(_counter+1)& (0+255),f,b
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;ecm.c: 114: _delay((unsigned long)((500)*(8000000/4000.0)));
  1948  0004C2  0E06               	movlw	6
  1949  0004C4  0100               	movlb	0	; () banked
  1950  0004C6  6FDC               	movwf	(??_TrackIR+1)& (0+255),b
  1951  0004C8  0E13               	movlw	19
  1952  0004CA  6FDB               	movwf	??_TrackIR& (0+255),b
  1953  0004CC  0EAD               	movlw	173
  1954  0004CE                     u1797:
  1955  0004CE  2EE8               	decfsz	wreg,f,c
  1956  0004D0  D7FE               	bra	u1797
  1957  0004D2  2FDB               	decfsz	??_TrackIR& (0+255),f,b
  1958  0004D4  D7FC               	bra	u1797
  1959  0004D6  2FDC               	decfsz	(??_TrackIR+1)& (0+255),f,b
  1960  0004D8  D7FA               	bra	u1797
  1961  0004DA  D000               	nop2	
  1962                           
  1963                           ;ecm.c: 115: stop(&motorL, &motorR);
  1964  0004DC  0E35               	movlw	low _motorL
  1965  0004DE  0100               	movlb	0	; () banked
  1966  0004E0  6FD2               	movwf	stop@m_L& (0+255),b
  1967  0004E2  0E00               	movlw	high _motorL
  1968  0004E4  6FD3               	movwf	(stop@m_L+1)& (0+255),b
  1969  0004E6  0E2C               	movlw	low _motorR
  1970  0004E8  6FD4               	movwf	stop@m_R& (0+255),b
  1971  0004EA  0E00               	movlw	high _motorR
  1972  0004EC  6FD5               	movwf	(stop@m_R+1)& (0+255),b
  1973  0004EE  EC94  F007         	call	_stop	;wreg free
  1974                           
  1975                           ;ecm.c: 116: };ecm.c: 117: }
  1976  0004F2  D0CB               	goto	l237
  1977  0004F4                     l227:
  1978                           
  1979                           ;ecm.c: 118: else {;ecm.c: 119: if(RightIR>200 && LeftIR>200)
  1980  0004F4  0100               	movlb	0	; () banked
  1981  0004F6  BFDA               	btfsc	(TrackIR@RightIR+1)& (0+255),7,b
  1982  0004F8  D063               	goto	l231
  1983  0004FA  51DA               	movf	(TrackIR@RightIR+1)& (0+255),w,b
  1984  0004FC  E104               	bnz	u1540
  1985  0004FE  0EC9               	movlw	201
  1986  000500  5DD9               	subwf	TrackIR@RightIR& (0+255),w,b
  1987  000502  A0D8               	btfss	status,0,c
  1988  000504  D05D               	goto	l231
  1989  000506                     u1540:
  1990                           
  1991                           ; BSR set to: 0
  1992  000506  BFD8               	btfsc	(TrackIR@LeftIR+1)& (0+255),7,b
  1993  000508  D05B               	goto	l231
  1994  00050A  51D8               	movf	(TrackIR@LeftIR+1)& (0+255),w,b
  1995  00050C  E104               	bnz	u1550
  1996  00050E  0EC9               	movlw	201
  1997  000510  5DD7               	subwf	TrackIR@LeftIR& (0+255),w,b
  1998  000512  A0D8               	btfss	status,0,c
  1999  000514  D055               	goto	l231
  2000  000516                     u1550:
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;ecm.c: 120: {;ecm.c: 121: if(counter==0){
  2004  000516  51C4               	movf	_counter& (0+255),w,b
  2005  000518  11C5               	iorwf	(_counter+1)& (0+255),w,b
  2006  00051A  A4D8               	btfss	status,2,c
  2007  00051C  D028               	goto	l232
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;ecm.c: 122: forward(&motorL, &motorR);
  2011  00051E  0E35               	movlw	low _motorL
  2012  000520  6FD2               	movwf	forward@m_L& (0+255),b
  2013  000522  0E00               	movlw	high _motorL
  2014  000524  6FD3               	movwf	(forward@m_L+1)& (0+255),b
  2015  000526  0E2C               	movlw	low _motorR
  2016  000528  6FD4               	movwf	forward@m_R& (0+255),b
  2017  00052A  0E00               	movlw	high _motorR
  2018  00052C  6FD5               	movwf	(forward@m_R+1)& (0+255),b
  2019  00052E  EC6A  F009         	call	_forward	;wreg free
  2020                           
  2021                           ;ecm.c: 123: fwdCount();
  2022  000532  EC0F  F00A         	call	_fwdCount	;wreg free
  2023                           
  2024                           ;ecm.c: 124: counter++;
  2025  000536  0100               	movlb	0	; () banked
  2026  000538  4BC4               	infsnz	_counter& (0+255),f,b
  2027  00053A  2BC5               	incf	(_counter+1)& (0+255),f,b
  2028                           
  2029                           ; BSR set to: 0
  2030                           ;ecm.c: 125: _delay((unsigned long)((500)*(8000000/4000.0)));
  2031  00053C  0E06               	movlw	6
  2032  00053E  0100               	movlb	0	; () banked
  2033  000540  6FDC               	movwf	(??_TrackIR+1)& (0+255),b
  2034  000542  0E13               	movlw	19
  2035  000544  6FDB               	movwf	??_TrackIR& (0+255),b
  2036  000546  0EAD               	movlw	173
  2037  000548                     u1807:
  2038  000548  2EE8               	decfsz	wreg,f,c
  2039  00054A  D7FE               	bra	u1807
  2040  00054C  2FDB               	decfsz	??_TrackIR& (0+255),f,b
  2041  00054E  D7FC               	bra	u1807
  2042  000550  2FDC               	decfsz	(??_TrackIR+1)& (0+255),f,b
  2043  000552  D7FA               	bra	u1807
  2044  000554  D000               	nop2	
  2045                           
  2046                           ;ecm.c: 126: stop(&motorL, &motorR);
  2047  000556  0E35               	movlw	low _motorL
  2048  000558  0100               	movlb	0	; () banked
  2049  00055A  6FD2               	movwf	stop@m_L& (0+255),b
  2050  00055C  0E00               	movlw	high _motorL
  2051  00055E  6FD3               	movwf	(stop@m_L+1)& (0+255),b
  2052  000560  0E2C               	movlw	low _motorR
  2053  000562  6FD4               	movwf	stop@m_R& (0+255),b
  2054  000564  0E00               	movlw	high _motorR
  2055  000566  6FD5               	movwf	(stop@m_R+1)& (0+255),b
  2056  000568  EC94  F007         	call	_stop	;wreg free
  2057                           
  2058                           ;ecm.c: 127: } else {
  2059  00056C  D08E               	goto	l237
  2060  00056E                     l232:
  2061                           
  2062                           ;ecm.c: 129: forward(&motorL, &motorR);
  2063  00056E  0E35               	movlw	low _motorL
  2064  000570  0100               	movlb	0	; () banked
  2065  000572  6FD2               	movwf	forward@m_L& (0+255),b
  2066  000574  0E00               	movlw	high _motorL
  2067  000576  6FD3               	movwf	(forward@m_L+1)& (0+255),b
  2068  000578  0E2C               	movlw	low _motorR
  2069  00057A  6FD4               	movwf	forward@m_R& (0+255),b
  2070  00057C  0E00               	movlw	high _motorR
  2071  00057E  6FD5               	movwf	(forward@m_R+1)& (0+255),b
  2072  000580  EC6A  F009         	call	_forward	;wreg free
  2073                           
  2074                           ;ecm.c: 130: fwdCount();
  2075  000584  EC0F  F00A         	call	_fwdCount	;wreg free
  2076                           
  2077                           ;ecm.c: 131: counter++;
  2078  000588  0100               	movlb	0	; () banked
  2079  00058A  4BC4               	infsnz	_counter& (0+255),f,b
  2080  00058C  2BC5               	incf	(_counter+1)& (0+255),f,b
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;ecm.c: 132: _delay((unsigned long)((500)*(8000000/4000.0)));
  2084  00058E  0E06               	movlw	6
  2085  000590  0100               	movlb	0	; () banked
  2086  000592  6FDC               	movwf	(??_TrackIR+1)& (0+255),b
  2087  000594  0E13               	movlw	19
  2088  000596  6FDB               	movwf	??_TrackIR& (0+255),b
  2089  000598  0EAD               	movlw	173
  2090  00059A                     u1817:
  2091  00059A  2EE8               	decfsz	wreg,f,c
  2092  00059C  D7FE               	bra	u1817
  2093  00059E  2FDB               	decfsz	??_TrackIR& (0+255),f,b
  2094  0005A0  D7FC               	bra	u1817
  2095  0005A2  2FDC               	decfsz	(??_TrackIR+1)& (0+255),f,b
  2096  0005A4  D7FA               	bra	u1817
  2097  0005A6  D000               	nop2	
  2098                           
  2099                           ;ecm.c: 133: stop(&motorL, &motorR);
  2100  0005A8  0E35               	movlw	low _motorL
  2101  0005AA  0100               	movlb	0	; () banked
  2102  0005AC  6FD2               	movwf	stop@m_L& (0+255),b
  2103  0005AE  0E00               	movlw	high _motorL
  2104  0005B0  6FD3               	movwf	(stop@m_L+1)& (0+255),b
  2105  0005B2  0E2C               	movlw	low _motorR
  2106  0005B4  6FD4               	movwf	stop@m_R& (0+255),b
  2107  0005B6  0E00               	movlw	high _motorR
  2108  0005B8  6FD5               	movwf	(stop@m_R+1)& (0+255),b
  2109  0005BA  EC94  F007         	call	_stop	;wreg free
  2110                           
  2111                           ;ecm.c: 134: };ecm.c: 135: }
  2112  0005BE  D065               	goto	l237
  2113  0005C0                     l231:
  2114                           
  2115                           ;ecm.c: 136: else if(RightIR<200 && LeftIR<200) {
  2116  0005C0  0100               	movlb	0	; () banked
  2117  0005C2  BFDA               	btfsc	(TrackIR@RightIR+1)& (0+255),7,b
  2118  0005C4  D006               	goto	u1570
  2119  0005C6  51DA               	movf	(TrackIR@RightIR+1)& (0+255),w,b
  2120  0005C8  E160               	bnz	l2793
  2121  0005CA  0EC8               	movlw	200
  2122  0005CC  5DD9               	subwf	TrackIR@RightIR& (0+255),w,b
  2123  0005CE  B0D8               	btfsc	status,0,c
  2124  0005D0  D05C               	goto	l237
  2125  0005D2                     u1570:
  2126                           
  2127                           ; BSR set to: 0
  2128  0005D2  BFD8               	btfsc	(TrackIR@LeftIR+1)& (0+255),7,b
  2129  0005D4  D006               	goto	u1580
  2130  0005D6  51D8               	movf	(TrackIR@LeftIR+1)& (0+255),w,b
  2131  0005D8  E158               	bnz	l2793
  2132  0005DA  0EC8               	movlw	200
  2133  0005DC  5DD7               	subwf	TrackIR@LeftIR& (0+255),w,b
  2134  0005DE  B0D8               	btfsc	status,0,c
  2135  0005E0  D054               	goto	l237
  2136  0005E2                     u1580:
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;ecm.c: 138: if(counter==0){
  2140  0005E2  51C4               	movf	_counter& (0+255),w,b
  2141  0005E4  11C5               	iorwf	(_counter+1)& (0+255),w,b
  2142  0005E6  A4D8               	btfss	status,2,c
  2143  0005E8  D028               	goto	l236
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;ecm.c: 139: turnLeft(&motorL, &motorR);
  2147  0005EA  0E35               	movlw	low _motorL
  2148  0005EC  6FD2               	movwf	turnLeft@m_L& (0+255),b
  2149  0005EE  0E00               	movlw	high _motorL
  2150  0005F0  6FD3               	movwf	(turnLeft@m_L+1)& (0+255),b
  2151  0005F2  0E2C               	movlw	low _motorR
  2152  0005F4  6FD4               	movwf	turnLeft@m_R& (0+255),b
  2153  0005F6  0E00               	movlw	high _motorR
  2154  0005F8  6FD5               	movwf	(turnLeft@m_R+1)& (0+255),b
  2155  0005FA  EC55  F009         	call	_turnLeft	;wreg free
  2156                           
  2157                           ;ecm.c: 140: leftCount();
  2158  0005FE  EC00  F00A         	call	_leftCount	;wreg free
  2159                           
  2160                           ;ecm.c: 141: counter++;
  2161  000602  0100               	movlb	0	; () banked
  2162  000604  4BC4               	infsnz	_counter& (0+255),f,b
  2163  000606  2BC5               	incf	(_counter+1)& (0+255),f,b
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;ecm.c: 142: _delay((unsigned long)((500)*(8000000/4000.0)));
  2167  000608  0E06               	movlw	6
  2168  00060A  0100               	movlb	0	; () banked
  2169  00060C  6FDC               	movwf	(??_TrackIR+1)& (0+255),b
  2170  00060E  0E13               	movlw	19
  2171  000610  6FDB               	movwf	??_TrackIR& (0+255),b
  2172  000612  0EAD               	movlw	173
  2173  000614                     u1827:
  2174  000614  2EE8               	decfsz	wreg,f,c
  2175  000616  D7FE               	bra	u1827
  2176  000618  2FDB               	decfsz	??_TrackIR& (0+255),f,b
  2177  00061A  D7FC               	bra	u1827
  2178  00061C  2FDC               	decfsz	(??_TrackIR+1)& (0+255),f,b
  2179  00061E  D7FA               	bra	u1827
  2180  000620  D000               	nop2	
  2181                           
  2182                           ;ecm.c: 143: stop(&motorL, &motorR);
  2183  000622  0E35               	movlw	low _motorL
  2184  000624  0100               	movlb	0	; () banked
  2185  000626  6FD2               	movwf	stop@m_L& (0+255),b
  2186  000628  0E00               	movlw	high _motorL
  2187  00062A  6FD3               	movwf	(stop@m_L+1)& (0+255),b
  2188  00062C  0E2C               	movlw	low _motorR
  2189  00062E  6FD4               	movwf	stop@m_R& (0+255),b
  2190  000630  0E00               	movlw	high _motorR
  2191  000632  6FD5               	movwf	(stop@m_R+1)& (0+255),b
  2192  000634  EC94  F007         	call	_stop	;wreg free
  2193                           
  2194                           ;ecm.c: 144: } else {
  2195  000638  D028               	goto	l237
  2196  00063A                     l236:
  2197                           
  2198                           ;ecm.c: 146: turnLeft(&motorL, &motorR);
  2199  00063A  0E35               	movlw	low _motorL
  2200  00063C  0100               	movlb	0	; () banked
  2201  00063E  6FD2               	movwf	turnLeft@m_L& (0+255),b
  2202  000640  0E00               	movlw	high _motorL
  2203  000642  6FD3               	movwf	(turnLeft@m_L+1)& (0+255),b
  2204  000644  0E2C               	movlw	low _motorR
  2205  000646  6FD4               	movwf	turnLeft@m_R& (0+255),b
  2206  000648  0E00               	movlw	high _motorR
  2207  00064A  6FD5               	movwf	(turnLeft@m_R+1)& (0+255),b
  2208  00064C  EC55  F009         	call	_turnLeft	;wreg free
  2209                           
  2210                           ;ecm.c: 147: leftCount();
  2211  000650  EC00  F00A         	call	_leftCount	;wreg free
  2212                           
  2213                           ;ecm.c: 148: counter++;
  2214  000654  0100               	movlb	0	; () banked
  2215  000656  4BC4               	infsnz	_counter& (0+255),f,b
  2216  000658  2BC5               	incf	(_counter+1)& (0+255),f,b
  2217                           
  2218                           ; BSR set to: 0
  2219                           ;ecm.c: 149: _delay((unsigned long)((500)*(8000000/4000.0)));
  2220  00065A  0E06               	movlw	6
  2221  00065C  0100               	movlb	0	; () banked
  2222  00065E  6FDC               	movwf	(??_TrackIR+1)& (0+255),b
  2223  000660  0E13               	movlw	19
  2224  000662  6FDB               	movwf	??_TrackIR& (0+255),b
  2225  000664  0EAD               	movlw	173
  2226  000666                     u1837:
  2227  000666  2EE8               	decfsz	wreg,f,c
  2228  000668  D7FE               	bra	u1837
  2229  00066A  2FDB               	decfsz	??_TrackIR& (0+255),f,b
  2230  00066C  D7FC               	bra	u1837
  2231  00066E  2FDC               	decfsz	(??_TrackIR+1)& (0+255),f,b
  2232  000670  D7FA               	bra	u1837
  2233  000672  D000               	nop2	
  2234                           
  2235                           ;ecm.c: 150: stop(&motorL, &motorR);
  2236  000674  0E35               	movlw	low _motorL
  2237  000676  0100               	movlb	0	; () banked
  2238  000678  6FD2               	movwf	stop@m_L& (0+255),b
  2239  00067A  0E00               	movlw	high _motorL
  2240  00067C  6FD3               	movwf	(stop@m_L+1)& (0+255),b
  2241  00067E  0E2C               	movlw	low _motorR
  2242  000680  6FD4               	movwf	stop@m_R& (0+255),b
  2243  000682  0E00               	movlw	high _motorR
  2244  000684  6FD5               	movwf	(stop@m_R+1)& (0+255),b
  2245  000686  EC94  F007         	call	_stop	;wreg free
  2246  00068A                     l237:
  2247  00068A                     l2793:
  2248                           
  2249                           ;ecm.c: 151: };ecm.c: 152: };ecm.c: 155: };ecm.c: 158: stop(&motorL, &motorR);
  2250  00068A  0E35               	movlw	low _motorL
  2251  00068C  0100               	movlb	0	; () banked
  2252  00068E  6FD2               	movwf	stop@m_L& (0+255),b
  2253  000690  0E00               	movlw	high _motorL
  2254  000692  6FD3               	movwf	(stop@m_L+1)& (0+255),b
  2255  000694  0E2C               	movlw	low _motorR
  2256  000696  6FD4               	movwf	stop@m_R& (0+255),b
  2257  000698  0E00               	movlw	high _motorR
  2258  00069A  6FD5               	movwf	(stop@m_R+1)& (0+255),b
  2259  00069C  EC94  F007         	call	_stop	;wreg free
  2260  0006A0  0012               	return		;funcret
  2261  0006A2                     __end_of_TrackIR:
  2262                           	opt stack 0
  2263                           tblptru	equ	0xFF8
  2264                           tblptrh	equ	0xFF7
  2265                           tblptrl	equ	0xFF6
  2266                           tablat	equ	0xFF5
  2267                           prodh	equ	0xFF4
  2268                           prodl	equ	0xFF3
  2269                           postinc0	equ	0xFEE
  2270                           wreg	equ	0xFE8
  2271                           indf2	equ	0xFDF
  2272                           postinc2	equ	0xFDE
  2273                           postdec2	equ	0xFDD
  2274                           fsr2h	equ	0xFDA
  2275                           fsr2l	equ	0xFD9
  2276                           status	equ	0xFD8
  2277                           
  2278 ;; *************** function _turnRight *****************
  2279 ;; Defined at:
  2280 ;;		line 92 in file "MotorControl.c"
  2281 ;; Parameters:    Size  Location     Type
  2282 ;;  m_L             2   11[BANK0 ] PTR struct DC_motor
  2283 ;;		 -> motorL(9), 
  2284 ;;  m_R             2   13[BANK0 ] PTR struct DC_motor
  2285 ;;		 -> motorR(9), 
  2286 ;; Auto vars:     Size  Location     Type
  2287 ;;		None
  2288 ;; Return value:  Size  Location     Type
  2289 ;;                  1    wreg      void 
  2290 ;; Registers used:
  2291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2292 ;; Tracked objects:
  2293 ;;		On entry : 0/0
  2294 ;;		On exit  : 0/0
  2295 ;;		Unchanged: 0/0
  2296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2297 ;;      Params:         0       4       0       0
  2298 ;;      Locals:         0       0       0       0
  2299 ;;      Temps:          0       0       0       0
  2300 ;;      Totals:         0       4       0       0
  2301 ;;Total ram usage:        4 bytes
  2302 ;; Hardware stack levels used:    1
  2303 ;; Hardware stack levels required when called:    6
  2304 ;; This function calls:
  2305 ;;		_setMotorPWM
  2306 ;; This function is called by:
  2307 ;;		_TrackIR
  2308 ;;		_main
  2309 ;; This function uses a non-reentrant model
  2310 ;;
  2311                           
  2312                           	psect	text6
  2313  001280                     __ptext6:
  2314                           	opt stack 0
  2315  001280                     _turnRight:
  2316                           	opt stack 24
  2317                           
  2318                           ;MotorControl.c: 94: motorL.direction=1;
  2319                           
  2320                           ;incstack = 0
  2321  001280  0E01               	movlw	1
  2322  001282  6E36               	movwf	_motorL+1,c
  2323                           
  2324                           ;MotorControl.c: 95: motorL.power=65;
  2325  001284  0E41               	movlw	65
  2326  001286  6E35               	movwf	_motorL,c
  2327                           
  2328                           ;MotorControl.c: 96: setMotorPWM(m_L);
  2329  001288  C0D2  F0CB         	movff	turnRight@m_L,setMotorPWM@m
  2330  00128C  C0D3  F0CC         	movff	turnRight@m_L+1,setMotorPWM@m+1
  2331  001290  EC84  F004         	call	_setMotorPWM	;wreg free
  2332                           
  2333                           ;MotorControl.c: 97: motorR.direction=0;
  2334  001294  0E00               	movlw	0
  2335  001296  6E2D               	movwf	_motorR+1,c
  2336                           
  2337                           ;MotorControl.c: 98: motorR.power=65;
  2338  001298  0E41               	movlw	65
  2339  00129A  6E2C               	movwf	_motorR,c
  2340                           
  2341                           ;MotorControl.c: 99: setMotorPWM(m_R);
  2342  00129C  C0D4  F0CB         	movff	turnRight@m_R,setMotorPWM@m
  2343  0012A0  C0D5  F0CC         	movff	turnRight@m_R+1,setMotorPWM@m+1
  2344  0012A4  EC84  F004         	call	_setMotorPWM	;wreg free
  2345  0012A8  0012               	return		;funcret
  2346  0012AA                     __end_of_turnRight:
  2347                           	opt stack 0
  2348                           tblptru	equ	0xFF8
  2349                           tblptrh	equ	0xFF7
  2350                           tblptrl	equ	0xFF6
  2351                           tablat	equ	0xFF5
  2352                           prodh	equ	0xFF4
  2353                           prodl	equ	0xFF3
  2354                           postinc0	equ	0xFEE
  2355                           wreg	equ	0xFE8
  2356                           indf2	equ	0xFDF
  2357                           postinc2	equ	0xFDE
  2358                           postdec2	equ	0xFDD
  2359                           fsr2h	equ	0xFDA
  2360                           fsr2l	equ	0xFD9
  2361                           status	equ	0xFD8
  2362                           
  2363 ;; *************** function _turnLeft *****************
  2364 ;; Defined at:
  2365 ;;		line 82 in file "MotorControl.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;  m_L             2   11[BANK0 ] PTR struct DC_motor
  2368 ;;		 -> motorL(9), 
  2369 ;;  m_R             2   13[BANK0 ] PTR struct DC_motor
  2370 ;;		 -> motorR(9), 
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;		None
  2373 ;; Return value:  Size  Location     Type
  2374 ;;                  1    wreg      void 
  2375 ;; Registers used:
  2376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2382 ;;      Params:         0       4       0       0
  2383 ;;      Locals:         0       0       0       0
  2384 ;;      Temps:          0       0       0       0
  2385 ;;      Totals:         0       4       0       0
  2386 ;;Total ram usage:        4 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    6
  2389 ;; This function calls:
  2390 ;;		_setMotorPWM
  2391 ;; This function is called by:
  2392 ;;		_TrackIR
  2393 ;;		_main
  2394 ;; This function uses a non-reentrant model
  2395 ;;
  2396                           
  2397                           	psect	text7
  2398  0012AA                     __ptext7:
  2399                           	opt stack 0
  2400  0012AA                     _turnLeft:
  2401                           	opt stack 24
  2402                           
  2403                           ;MotorControl.c: 84: motorL.direction=0;
  2404                           
  2405                           ;incstack = 0
  2406  0012AA  0E00               	movlw	0
  2407  0012AC  6E36               	movwf	_motorL+1,c
  2408                           
  2409                           ;MotorControl.c: 85: motorL.power=69;
  2410  0012AE  0E45               	movlw	69
  2411  0012B0  6E35               	movwf	_motorL,c
  2412                           
  2413                           ;MotorControl.c: 86: setMotorPWM(m_L);
  2414  0012B2  C0D2  F0CB         	movff	turnLeft@m_L,setMotorPWM@m
  2415  0012B6  C0D3  F0CC         	movff	turnLeft@m_L+1,setMotorPWM@m+1
  2416  0012BA  EC84  F004         	call	_setMotorPWM	;wreg free
  2417                           
  2418                           ;MotorControl.c: 87: motorR.direction=1;
  2419  0012BE  0E01               	movlw	1
  2420  0012C0  6E2D               	movwf	_motorR+1,c
  2421                           
  2422                           ;MotorControl.c: 88: motorR.power=65;
  2423  0012C2  0E41               	movlw	65
  2424  0012C4  6E2C               	movwf	_motorR,c
  2425                           
  2426                           ;MotorControl.c: 89: setMotorPWM(m_R);
  2427  0012C6  C0D4  F0CB         	movff	turnLeft@m_R,setMotorPWM@m
  2428  0012CA  C0D5  F0CC         	movff	turnLeft@m_R+1,setMotorPWM@m+1
  2429  0012CE  EC84  F004         	call	_setMotorPWM	;wreg free
  2430  0012D2  0012               	return		;funcret
  2431  0012D4                     __end_of_turnLeft:
  2432                           	opt stack 0
  2433                           tblptru	equ	0xFF8
  2434                           tblptrh	equ	0xFF7
  2435                           tblptrl	equ	0xFF6
  2436                           tablat	equ	0xFF5
  2437                           prodh	equ	0xFF4
  2438                           prodl	equ	0xFF3
  2439                           postinc0	equ	0xFEE
  2440                           wreg	equ	0xFE8
  2441                           indf2	equ	0xFDF
  2442                           postinc2	equ	0xFDE
  2443                           postdec2	equ	0xFDD
  2444                           fsr2h	equ	0xFDA
  2445                           fsr2l	equ	0xFD9
  2446                           status	equ	0xFD8
  2447                           
  2448 ;; *************** function _stop *****************
  2449 ;; Defined at:
  2450 ;;		line 65 in file "MotorControl.c"
  2451 ;; Parameters:    Size  Location     Type
  2452 ;;  m_L             2   11[BANK0 ] PTR struct DC_motor
  2453 ;;		 -> motorL(9), 
  2454 ;;  m_R             2   13[BANK0 ] PTR struct DC_motor
  2455 ;;		 -> motorR(9), 
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;		None
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  1    wreg      void 
  2460 ;; Registers used:
  2461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2467 ;;      Params:         0       4       0       0
  2468 ;;      Locals:         0       0       0       0
  2469 ;;      Temps:          0       1       0       0
  2470 ;;      Totals:         0       5       0       0
  2471 ;;Total ram usage:        5 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; Hardware stack levels required when called:    6
  2474 ;; This function calls:
  2475 ;;		_setMotorPWM
  2476 ;; This function is called by:
  2477 ;;		_TrackIR
  2478 ;;		_main
  2479 ;; This function uses a non-reentrant model
  2480 ;;
  2481                           
  2482                           	psect	text8
  2483  000F28                     __ptext8:
  2484                           	opt stack 0
  2485  000F28                     _stop:
  2486                           	opt stack 24
  2487                           
  2488                           ;MotorControl.c: 67: motorL.direction = 1;
  2489                           
  2490                           ;incstack = 0
  2491  000F28  0E01               	movlw	1
  2492  000F2A  6E36               	movwf	_motorL+1,c
  2493                           
  2494                           ;MotorControl.c: 68: motorL.power = 0;
  2495  000F2C  0E00               	movlw	0
  2496  000F2E  6E35               	movwf	_motorL,c
  2497                           
  2498                           ;MotorControl.c: 69: setMotorPWM(m_L);
  2499  000F30  C0D2  F0CB         	movff	stop@m_L,setMotorPWM@m
  2500  000F34  C0D3  F0CC         	movff	stop@m_L+1,setMotorPWM@m+1
  2501  000F38  EC84  F004         	call	_setMotorPWM	;wreg free
  2502                           
  2503                           ;MotorControl.c: 70: motorR.direction = 1;
  2504  000F3C  0E01               	movlw	1
  2505  000F3E  6E2D               	movwf	_motorR+1,c
  2506                           
  2507                           ;MotorControl.c: 71: motorR.power = 0;
  2508  000F40  0E00               	movlw	0
  2509  000F42  6E2C               	movwf	_motorR,c
  2510                           
  2511                           ;MotorControl.c: 72: setMotorPWM(m_R);
  2512  000F44  C0D4  F0CB         	movff	stop@m_R,setMotorPWM@m
  2513  000F48  C0D5  F0CC         	movff	stop@m_R+1,setMotorPWM@m+1
  2514  000F4C  EC84  F004         	call	_setMotorPWM	;wreg free
  2515                           
  2516                           ;MotorControl.c: 73: _delay((unsigned long)((50)*(8000000/4000.0)));
  2517  000F50  0E82               	movlw	130
  2518  000F52  0100               	movlb	0	; () banked
  2519  000F54  6FD6               	movwf	??_stop& (0+255),b
  2520  000F56  0EDD               	movlw	221
  2521  000F58                     u1847:
  2522  000F58  2EE8               	decfsz	wreg,f,c
  2523  000F5A  D7FE               	bra	u1847
  2524  000F5C  2FD6               	decfsz	??_stop& (0+255),f,b
  2525  000F5E  D7FC               	bra	u1847
  2526  000F60  D000               	nop2	
  2527                           
  2528                           ;MotorControl.c: 74: motorL.direction = 1;
  2529  000F62  0E01               	movlw	1
  2530  000F64  6E36               	movwf	_motorL+1,c
  2531                           
  2532                           ;MotorControl.c: 75: motorL.power = 0;
  2533  000F66  0E00               	movlw	0
  2534  000F68  6E35               	movwf	_motorL,c
  2535                           
  2536                           ;MotorControl.c: 76: setMotorPWM(m_L);
  2537  000F6A  C0D2  F0CB         	movff	stop@m_L,setMotorPWM@m
  2538  000F6E  C0D3  F0CC         	movff	stop@m_L+1,setMotorPWM@m+1
  2539  000F72  EC84  F004         	call	_setMotorPWM	;wreg free
  2540                           
  2541                           ;MotorControl.c: 77: motorR.direction = 1;
  2542  000F76  0E01               	movlw	1
  2543  000F78  6E2D               	movwf	_motorR+1,c
  2544                           
  2545                           ;MotorControl.c: 78: motorR.power = 0;
  2546  000F7A  0E00               	movlw	0
  2547  000F7C  6E2C               	movwf	_motorR,c
  2548                           
  2549                           ;MotorControl.c: 79: setMotorPWM(m_R);
  2550  000F7E  C0D4  F0CB         	movff	stop@m_R,setMotorPWM@m
  2551  000F82  C0D5  F0CC         	movff	stop@m_R+1,setMotorPWM@m+1
  2552  000F86  EC84  F004         	call	_setMotorPWM	;wreg free
  2553  000F8A  0012               	return		;funcret
  2554  000F8C                     __end_of_stop:
  2555                           	opt stack 0
  2556                           tblptru	equ	0xFF8
  2557                           tblptrh	equ	0xFF7
  2558                           tblptrl	equ	0xFF6
  2559                           tablat	equ	0xFF5
  2560                           prodh	equ	0xFF4
  2561                           prodl	equ	0xFF3
  2562                           postinc0	equ	0xFEE
  2563                           wreg	equ	0xFE8
  2564                           indf2	equ	0xFDF
  2565                           postinc2	equ	0xFDE
  2566                           postdec2	equ	0xFDD
  2567                           fsr2h	equ	0xFDA
  2568                           fsr2l	equ	0xFD9
  2569                           status	equ	0xFD8
  2570                           
  2571 ;; *************** function _rightCount *****************
  2572 ;; Defined at:
  2573 ;;		line 78 in file "ecm.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;		None
  2576 ;; Auto vars:     Size  Location     Type
  2577 ;;		None
  2578 ;; Return value:  Size  Location     Type
  2579 ;;                  1    wreg      void 
  2580 ;; Registers used:
  2581 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2582 ;; Tracked objects:
  2583 ;;		On entry : 0/0
  2584 ;;		On exit  : 0/0
  2585 ;;		Unchanged: 0/0
  2586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2587 ;;      Params:         0       0       0       0
  2588 ;;      Locals:         0       0       0       0
  2589 ;;      Temps:          0       0       0       0
  2590 ;;      Totals:         0       0       0       0
  2591 ;;Total ram usage:        0 bytes
  2592 ;; Hardware stack levels used:    1
  2593 ;; Hardware stack levels required when called:    4
  2594 ;; This function calls:
  2595 ;;		Nothing
  2596 ;; This function is called by:
  2597 ;;		_TrackIR
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600                           
  2601                           	psect	text9
  2602  0013E2                     __ptext9:
  2603                           	opt stack 0
  2604  0013E2                     _rightCount:
  2605                           	opt stack 25
  2606                           
  2607                           ;ecm.c: 80: arrayCount[counter]=2;
  2608                           
  2609                           ;incstack = 0
  2610  0013E2  90D8               	bcf	status,0,c
  2611  0013E4  0100               	movlb	0	; () banked
  2612  0013E6  35C4               	rlcf	_counter& (0+255),w,b
  2613  0013E8  6ED9               	movwf	fsr2l,c
  2614  0013EA  35C5               	rlcf	(_counter+1)& (0+255),w,b
  2615  0013EC  6EDA               	movwf	fsr2h,c
  2616  0013EE  0E60               	movlw	low _arrayCount
  2617  0013F0  26D9               	addwf	fsr2l,f,c
  2618  0013F2  0E00               	movlw	high _arrayCount
  2619  0013F4  22DA               	addwfc	fsr2h,f,c
  2620  0013F6  0E02               	movlw	2
  2621  0013F8  6EDE               	movwf	postinc2,c
  2622  0013FA  0E00               	movlw	0
  2623  0013FC  6EDD               	movwf	postdec2,c
  2624                           
  2625                           ; BSR set to: 0
  2626  0013FE  0012               	return		;funcret
  2627  001400                     __end_of_rightCount:
  2628                           	opt stack 0
  2629                           tblptru	equ	0xFF8
  2630                           tblptrh	equ	0xFF7
  2631                           tblptrl	equ	0xFF6
  2632                           tablat	equ	0xFF5
  2633                           prodh	equ	0xFF4
  2634                           prodl	equ	0xFF3
  2635                           postinc0	equ	0xFEE
  2636                           wreg	equ	0xFE8
  2637                           indf2	equ	0xFDF
  2638                           postinc2	equ	0xFDE
  2639                           postdec2	equ	0xFDD
  2640                           fsr2h	equ	0xFDA
  2641                           fsr2l	equ	0xFD9
  2642                           status	equ	0xFD8
  2643                           
  2644 ;; *************** function _leftCount *****************
  2645 ;; Defined at:
  2646 ;;		line 73 in file "ecm.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;		None
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;		None
  2651 ;; Return value:  Size  Location     Type
  2652 ;;                  1    wreg      void 
  2653 ;; Registers used:
  2654 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2655 ;; Tracked objects:
  2656 ;;		On entry : 0/0
  2657 ;;		On exit  : 0/0
  2658 ;;		Unchanged: 0/0
  2659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2660 ;;      Params:         0       0       0       0
  2661 ;;      Locals:         0       0       0       0
  2662 ;;      Temps:          0       0       0       0
  2663 ;;      Totals:         0       0       0       0
  2664 ;;Total ram usage:        0 bytes
  2665 ;; Hardware stack levels used:    1
  2666 ;; Hardware stack levels required when called:    4
  2667 ;; This function calls:
  2668 ;;		Nothing
  2669 ;; This function is called by:
  2670 ;;		_TrackIR
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674                           	psect	text10
  2675  001400                     __ptext10:
  2676                           	opt stack 0
  2677  001400                     _leftCount:
  2678                           	opt stack 25
  2679                           
  2680                           ;ecm.c: 75: arrayCount[counter]=1;
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;incstack = 0
  2684  001400  90D8               	bcf	status,0,c
  2685  001402  0100               	movlb	0	; () banked
  2686  001404  35C4               	rlcf	_counter& (0+255),w,b
  2687  001406  6ED9               	movwf	fsr2l,c
  2688  001408  35C5               	rlcf	(_counter+1)& (0+255),w,b
  2689  00140A  6EDA               	movwf	fsr2h,c
  2690  00140C  0E60               	movlw	low _arrayCount
  2691  00140E  26D9               	addwf	fsr2l,f,c
  2692  001410  0E00               	movlw	high _arrayCount
  2693  001412  22DA               	addwfc	fsr2h,f,c
  2694  001414  0E01               	movlw	1
  2695  001416  6EDE               	movwf	postinc2,c
  2696  001418  0E00               	movlw	0
  2697  00141A  6EDD               	movwf	postdec2,c
  2698                           
  2699                           ; BSR set to: 0
  2700  00141C  0012               	return		;funcret
  2701  00141E                     __end_of_leftCount:
  2702                           	opt stack 0
  2703                           tblptru	equ	0xFF8
  2704                           tblptrh	equ	0xFF7
  2705                           tblptrl	equ	0xFF6
  2706                           tablat	equ	0xFF5
  2707                           prodh	equ	0xFF4
  2708                           prodl	equ	0xFF3
  2709                           postinc0	equ	0xFEE
  2710                           wreg	equ	0xFE8
  2711                           indf2	equ	0xFDF
  2712                           postinc2	equ	0xFDE
  2713                           postdec2	equ	0xFDD
  2714                           fsr2h	equ	0xFDA
  2715                           fsr2l	equ	0xFD9
  2716                           status	equ	0xFD8
  2717                           
  2718 ;; *************** function _fwdCount *****************
  2719 ;; Defined at:
  2720 ;;		line 68 in file "ecm.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;		None
  2723 ;; Auto vars:     Size  Location     Type
  2724 ;;		None
  2725 ;; Return value:  Size  Location     Type
  2726 ;;                  1    wreg      void 
  2727 ;; Registers used:
  2728 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2729 ;; Tracked objects:
  2730 ;;		On entry : 0/0
  2731 ;;		On exit  : 0/0
  2732 ;;		Unchanged: 0/0
  2733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2734 ;;      Params:         0       0       0       0
  2735 ;;      Locals:         0       0       0       0
  2736 ;;      Temps:          0       0       0       0
  2737 ;;      Totals:         0       0       0       0
  2738 ;;Total ram usage:        0 bytes
  2739 ;; Hardware stack levels used:    1
  2740 ;; Hardware stack levels required when called:    4
  2741 ;; This function calls:
  2742 ;;		Nothing
  2743 ;; This function is called by:
  2744 ;;		_TrackIR
  2745 ;; This function uses a non-reentrant model
  2746 ;;
  2747                           
  2748                           	psect	text11
  2749  00141E                     __ptext11:
  2750                           	opt stack 0
  2751  00141E                     _fwdCount:
  2752                           	opt stack 25
  2753                           
  2754                           ;ecm.c: 70: arrayCount[counter]=0;
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;incstack = 0
  2758  00141E  90D8               	bcf	status,0,c
  2759  001420  0100               	movlb	0	; () banked
  2760  001422  35C4               	rlcf	_counter& (0+255),w,b
  2761  001424  6ED9               	movwf	fsr2l,c
  2762  001426  35C5               	rlcf	(_counter+1)& (0+255),w,b
  2763  001428  6EDA               	movwf	fsr2h,c
  2764  00142A  0E60               	movlw	low _arrayCount
  2765  00142C  26D9               	addwf	fsr2l,f,c
  2766  00142E  0E00               	movlw	high _arrayCount
  2767  001430  22DA               	addwfc	fsr2h,f,c
  2768  001432  0E00               	movlw	0
  2769  001434  6EDE               	movwf	postinc2,c
  2770  001436  0E00               	movlw	0
  2771  001438  6EDD               	movwf	postdec2,c
  2772                           
  2773                           ; BSR set to: 0
  2774  00143A  0012               	return		;funcret
  2775  00143C                     __end_of_fwdCount:
  2776                           	opt stack 0
  2777                           tblptru	equ	0xFF8
  2778                           tblptrh	equ	0xFF7
  2779                           tblptrl	equ	0xFF6
  2780                           tablat	equ	0xFF5
  2781                           prodh	equ	0xFF4
  2782                           prodl	equ	0xFF3
  2783                           postinc0	equ	0xFEE
  2784                           wreg	equ	0xFE8
  2785                           indf2	equ	0xFDF
  2786                           postinc2	equ	0xFDE
  2787                           postdec2	equ	0xFDD
  2788                           fsr2h	equ	0xFDA
  2789                           fsr2l	equ	0xFD9
  2790                           status	equ	0xFD8
  2791                           
  2792 ;; *************** function _forward *****************
  2793 ;; Defined at:
  2794 ;;		line 102 in file "MotorControl.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;  m_L             2   11[BANK0 ] PTR struct DC_motor
  2797 ;;		 -> motorL(9), 
  2798 ;;  m_R             2   13[BANK0 ] PTR struct DC_motor
  2799 ;;		 -> motorR(9), 
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;		None
  2802 ;; Return value:  Size  Location     Type
  2803 ;;                  1    wreg      void 
  2804 ;; Registers used:
  2805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2806 ;; Tracked objects:
  2807 ;;		On entry : 0/0
  2808 ;;		On exit  : 0/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2811 ;;      Params:         0       4       0       0
  2812 ;;      Locals:         0       0       0       0
  2813 ;;      Temps:          0       0       0       0
  2814 ;;      Totals:         0       4       0       0
  2815 ;;Total ram usage:        4 bytes
  2816 ;; Hardware stack levels used:    1
  2817 ;; Hardware stack levels required when called:    6
  2818 ;; This function calls:
  2819 ;;		_setMotorPWM
  2820 ;; This function is called by:
  2821 ;;		_TrackIR
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text12
  2826  0012D4                     __ptext12:
  2827                           	opt stack 0
  2828  0012D4                     _forward:
  2829                           	opt stack 23
  2830                           
  2831                           ;MotorControl.c: 104: motorL.direction=1;
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;incstack = 0
  2835  0012D4  0E01               	movlw	1
  2836  0012D6  6E36               	movwf	_motorL+1,c
  2837                           
  2838                           ;MotorControl.c: 105: motorL.power=69;
  2839  0012D8  0E45               	movlw	69
  2840  0012DA  6E35               	movwf	_motorL,c
  2841                           
  2842                           ;MotorControl.c: 106: setMotorPWM(m_L);
  2843  0012DC  C0D2  F0CB         	movff	forward@m_L,setMotorPWM@m
  2844  0012E0  C0D3  F0CC         	movff	forward@m_L+1,setMotorPWM@m+1
  2845  0012E4  EC84  F004         	call	_setMotorPWM	;wreg free
  2846                           
  2847                           ;MotorControl.c: 107: motorR.direction=1;
  2848  0012E8  0E01               	movlw	1
  2849  0012EA  6E2D               	movwf	_motorR+1,c
  2850                           
  2851                           ;MotorControl.c: 108: motorR.power=65;
  2852  0012EC  0E41               	movlw	65
  2853  0012EE  6E2C               	movwf	_motorR,c
  2854                           
  2855                           ;MotorControl.c: 109: setMotorPWM(m_R);
  2856  0012F0  C0D4  F0CB         	movff	forward@m_R,setMotorPWM@m
  2857  0012F4  C0D5  F0CC         	movff	forward@m_R+1,setMotorPWM@m+1
  2858  0012F8  EC84  F004         	call	_setMotorPWM	;wreg free
  2859  0012FC  0012               	return		;funcret
  2860  0012FE                     __end_of_forward:
  2861                           	opt stack 0
  2862                           tblptru	equ	0xFF8
  2863                           tblptrh	equ	0xFF7
  2864                           tblptrl	equ	0xFF6
  2865                           tablat	equ	0xFF5
  2866                           prodh	equ	0xFF4
  2867                           prodl	equ	0xFF3
  2868                           postinc0	equ	0xFEE
  2869                           wreg	equ	0xFE8
  2870                           indf2	equ	0xFDF
  2871                           postinc2	equ	0xFDE
  2872                           postdec2	equ	0xFDD
  2873                           fsr2h	equ	0xFDA
  2874                           fsr2l	equ	0xFD9
  2875                           status	equ	0xFD8
  2876                           
  2877 ;; *************** function _setMotorPWM *****************
  2878 ;; Defined at:
  2879 ;;		line 33 in file "MotorControl.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;  m               2    4[BANK0 ] PTR struct DC_motor
  2882 ;;		 -> motorR(9), motorL(9), 
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;  PWMduty         2    9[BANK0 ] int 
  2885 ;; Return value:  Size  Location     Type
  2886 ;;                  1    wreg      void 
  2887 ;; Registers used:
  2888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2889 ;; Tracked objects:
  2890 ;;		On entry : 0/0
  2891 ;;		On exit  : 0/0
  2892 ;;		Unchanged: 0/0
  2893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2894 ;;      Params:         0       2       0       0
  2895 ;;      Locals:         0       2       0       0
  2896 ;;      Temps:          0       3       0       0
  2897 ;;      Totals:         0       7       0       0
  2898 ;;Total ram usage:        7 bytes
  2899 ;; Hardware stack levels used:    1
  2900 ;; Hardware stack levels required when called:    5
  2901 ;; This function calls:
  2902 ;;		___awdiv
  2903 ;;		___wmul
  2904 ;; This function is called by:
  2905 ;;		_stop
  2906 ;;		_turnLeft
  2907 ;;		_turnRight
  2908 ;;		_forward
  2909 ;;		_back
  2910 ;;		_setMotorFullSpeed
  2911 ;; This function uses a non-reentrant model
  2912 ;;
  2913                           
  2914                           	psect	text13
  2915  000908                     __ptext13:
  2916                           	opt stack 0
  2917  000908                     _setMotorPWM:
  2918                           	opt stack 24
  2919                           
  2920                           ;MotorControl.c: 35: int PWMduty;;MotorControl.c: 36: if (m->direction){
  2921                           
  2922                           ;incstack = 0
  2923  000908  0100               	movlb	0	; () banked
  2924  00090A  EE20 F001          	lfsr	2,1
  2925  00090E  51CB               	movf	setMotorPWM@m& (0+255),w,b
  2926  000910  26D9               	addwf	fsr2l,f,c
  2927  000912  51CC               	movf	(setMotorPWM@m+1)& (0+255),w,b
  2928  000914  22DA               	addwfc	fsr2h,f,c
  2929  000916  50DF               	movf	indf2,w,c
  2930  000918  B4D8               	btfsc	status,2,c
  2931  00091A  D035               	goto	l32
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;MotorControl.c: 38: PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  2935  00091C  EE20 F007          	lfsr	2,7
  2936  000920  51CB               	movf	setMotorPWM@m& (0+255),w,b
  2937  000922  26D9               	addwf	fsr2l,f,c
  2938  000924  51CC               	movf	(setMotorPWM@m+1)& (0+255),w,b
  2939  000926  22DA               	addwfc	fsr2h,f,c
  2940  000928  CFDE F0CD          	movff	postinc2,??_setMotorPWM
  2941  00092C  CFDD F0CE          	movff	postdec2,??_setMotorPWM+1
  2942  000930  C0CB  FFD9         	movff	setMotorPWM@m,fsr2l
  2943  000934  C0CC  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2944  000938  50DF               	movf	indf2,w,c
  2945  00093A  6FCF               	movwf	(??_setMotorPWM+2)& (0+255),b
  2946  00093C  51CF               	movf	(??_setMotorPWM+2)& (0+255),w,b
  2947  00093E  6E22               	movwf	___wmul@multiplier,c
  2948  000940  6A23               	clrf	___wmul@multiplier+1,c
  2949  000942  EE20 F007          	lfsr	2,7
  2950  000946  51CB               	movf	setMotorPWM@m& (0+255),w,b
  2951  000948  26D9               	addwf	fsr2l,f,c
  2952  00094A  51CC               	movf	(setMotorPWM@m+1)& (0+255),w,b
  2953  00094C  22DA               	addwfc	fsr2h,f,c
  2954  00094E  CFDE F024          	movff	postinc2,___wmul@multiplicand
  2955  000952  CFDD F025          	movff	postdec2,___wmul@multiplicand+1
  2956  000956  ECBA  F009         	call	___wmul	;wreg free
  2957  00095A  C022  F028         	movff	?___wmul,___awdiv@dividend
  2958  00095E  C023  F029         	movff	?___wmul+1,___awdiv@dividend+1
  2959  000962  0E00               	movlw	0
  2960  000964  6E2B               	movwf	___awdiv@divisor+1,c
  2961  000966  0E64               	movlw	100
  2962  000968  6E2A               	movwf	___awdiv@divisor,c
  2963  00096A  EC0F  F007         	call	___awdiv	;wreg free
  2964  00096E  1E28               	comf	?___awdiv,f,c
  2965  000970  1E29               	comf	?___awdiv+1,f,c
  2966  000972  4A28               	infsnz	?___awdiv,f,c
  2967  000974  2A29               	incf	?___awdiv+1,f,c
  2968  000976  0100               	movlb	0	; () banked
  2969  000978  51CD               	movf	??_setMotorPWM& (0+255),w,b
  2970  00097A  2428               	addwf	?___awdiv,w,c
  2971  00097C  6FD0               	movwf	setMotorPWM@PWMduty& (0+255),b
  2972  00097E  51CE               	movf	(??_setMotorPWM+1)& (0+255),w,b
  2973  000980  2029               	addwfc	?___awdiv+1,w,c
  2974  000982  6FD1               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  2975                           
  2976                           ;MotorControl.c: 39: }
  2977  000984  D023               	goto	l33
  2978  000986                     l32:
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;MotorControl.c: 40: else {;MotorControl.c: 42: PWMduty=((int)(m->power)*(m->PWMperiod))
      +                          /100;
  2982                           
  2983                           ; BSR set to: 0
  2984  000986  C0CB  FFD9         	movff	setMotorPWM@m,fsr2l
  2985  00098A  C0CC  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2986  00098E  50DF               	movf	indf2,w,c
  2987  000990  6FCD               	movwf	??_setMotorPWM& (0+255),b
  2988  000992  51CD               	movf	??_setMotorPWM& (0+255),w,b
  2989  000994  6E22               	movwf	___wmul@multiplier,c
  2990  000996  6A23               	clrf	___wmul@multiplier+1,c
  2991  000998  EE20 F007          	lfsr	2,7
  2992  00099C  51CB               	movf	setMotorPWM@m& (0+255),w,b
  2993  00099E  26D9               	addwf	fsr2l,f,c
  2994  0009A0  51CC               	movf	(setMotorPWM@m+1)& (0+255),w,b
  2995  0009A2  22DA               	addwfc	fsr2h,f,c
  2996  0009A4  CFDE F024          	movff	postinc2,___wmul@multiplicand
  2997  0009A8  CFDD F025          	movff	postdec2,___wmul@multiplicand+1
  2998  0009AC  ECBA  F009         	call	___wmul	;wreg free
  2999  0009B0  C022  F028         	movff	?___wmul,___awdiv@dividend
  3000  0009B4  C023  F029         	movff	?___wmul+1,___awdiv@dividend+1
  3001  0009B8  0E00               	movlw	0
  3002  0009BA  6E2B               	movwf	___awdiv@divisor+1,c
  3003  0009BC  0E64               	movlw	100
  3004  0009BE  6E2A               	movwf	___awdiv@divisor,c
  3005  0009C0  EC0F  F007         	call	___awdiv	;wreg free
  3006  0009C4  C028  F0D0         	movff	?___awdiv,setMotorPWM@PWMduty
  3007  0009C8  C029  F0D1         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3008  0009CC                     l33:
  3009                           
  3010                           ;MotorControl.c: 43: };MotorControl.c: 44: PWMduty = (PWMduty << 2);
  3011  0009CC  C0D0  F0CD         	movff	setMotorPWM@PWMduty,??_setMotorPWM
  3012  0009D0  C0D1  F0CE         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+1
  3013  0009D4  0100               	movlb	0	; () banked
  3014  0009D6  90D8               	bcf	status,0,c
  3015  0009D8  37CD               	rlcf	??_setMotorPWM& (0+255),f,b
  3016  0009DA  37CE               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  3017  0009DC  90D8               	bcf	status,0,c
  3018  0009DE  37CD               	rlcf	??_setMotorPWM& (0+255),f,b
  3019  0009E0  37CE               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  3020  0009E2  C0CD  F0D0         	movff	??_setMotorPWM,setMotorPWM@PWMduty
  3021  0009E6  C0CE  F0D1         	movff	??_setMotorPWM+1,setMotorPWM@PWMduty+1
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;MotorControl.c: 45: *(m->dutyLowByte) = PWMduty & 0xFF;
  3025  0009EA  EE20 F002          	lfsr	2,2
  3026  0009EE  51CB               	movf	setMotorPWM@m& (0+255),w,b
  3027  0009F0  26D9               	addwf	fsr2l,f,c
  3028  0009F2  51CC               	movf	(setMotorPWM@m+1)& (0+255),w,b
  3029  0009F4  22DA               	addwfc	fsr2h,f,c
  3030  0009F6  CFDE F0CD          	movff	postinc2,??_setMotorPWM
  3031  0009FA  CFDD F0CE          	movff	postdec2,??_setMotorPWM+1
  3032  0009FE  C0CD  FFD9         	movff	??_setMotorPWM,fsr2l
  3033  000A02  C0CE  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3034  000A06  C0D0  FFDF         	movff	setMotorPWM@PWMduty,indf2
  3035                           
  3036                           ; BSR set to: 0
  3037                           ;MotorControl.c: 46: *(m->dutyHighByte) = (PWMduty >> 8) & 0x3F;
  3038  000A0A  EE20 F004          	lfsr	2,4
  3039  000A0E  51CB               	movf	setMotorPWM@m& (0+255),w,b
  3040  000A10  26D9               	addwf	fsr2l,f,c
  3041  000A12  51CC               	movf	(setMotorPWM@m+1)& (0+255),w,b
  3042  000A14  22DA               	addwfc	fsr2h,f,c
  3043  000A16  CFDE F0CD          	movff	postinc2,??_setMotorPWM
  3044  000A1A  CFDD F0CE          	movff	postdec2,??_setMotorPWM+1
  3045  000A1E  C0CD  FFD9         	movff	??_setMotorPWM,fsr2l
  3046  000A22  C0CE  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3047  000A26  51D1               	movf	(setMotorPWM@PWMduty+1)& (0+255),w,b
  3048  000A28  0B3F               	andlw	63
  3049  000A2A  6EDF               	movwf	indf2,c
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;MotorControl.c: 48: if (m->direction){
  3053  000A2C  EE20 F001          	lfsr	2,1
  3054  000A30  51CB               	movf	setMotorPWM@m& (0+255),w,b
  3055  000A32  26D9               	addwf	fsr2l,f,c
  3056  000A34  51CC               	movf	(setMotorPWM@m+1)& (0+255),w,b
  3057  000A36  22DA               	addwfc	fsr2h,f,c
  3058  000A38  50DF               	movf	indf2,w,c
  3059  000A3A  B4D8               	btfsc	status,2,c
  3060  000A3C  D015               	goto	l34
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;MotorControl.c: 49: LATB=LATB | (1<<(m->dir_pin));
  3064  000A3E  EE20 F006          	lfsr	2,6
  3065  000A42  51CB               	movf	setMotorPWM@m& (0+255),w,b
  3066  000A44  26D9               	addwf	fsr2l,f,c
  3067  000A46  51CC               	movf	(setMotorPWM@m+1)& (0+255),w,b
  3068  000A48  22DA               	addwfc	fsr2h,f,c
  3069  000A4A  50DF               	movf	indf2,w,c
  3070  000A4C  6FCD               	movwf	??_setMotorPWM& (0+255),b
  3071  000A4E  0E01               	movlw	1
  3072  000A50  6FCE               	movwf	(??_setMotorPWM+1)& (0+255),b
  3073  000A52  2BCD               	incf	??_setMotorPWM& (0+255),f,b
  3074  000A54  D002               	goto	u1354
  3075  000A56                     u1355:
  3076  000A56  90D8               	bcf	status,0,c
  3077  000A58  37CE               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  3078  000A5A                     u1354:
  3079  000A5A  2FCD               	decfsz	??_setMotorPWM& (0+255),f,b
  3080  000A5C  D7FC               	goto	u1355
  3081  000A5E  0100               	movlb	0	; () banked
  3082  000A60  51CE               	movf	(??_setMotorPWM+1)& (0+255),w,b
  3083  000A62  108A               	iorwf	3978,w,c	;volatile
  3084  000A64  6E8A               	movwf	3978,c	;volatile
  3085                           
  3086                           ;MotorControl.c: 50: } else {
  3087  000A66  0012               	return	
  3088  000A68                     l34:
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;MotorControl.c: 51: LATB=LATB & (~(1<<(m->dir_pin)));
  3092                           
  3093                           ; BSR set to: 0
  3094  000A68  EE20 F006          	lfsr	2,6
  3095  000A6C  51CB               	movf	setMotorPWM@m& (0+255),w,b
  3096  000A6E  26D9               	addwf	fsr2l,f,c
  3097  000A70  51CC               	movf	(setMotorPWM@m+1)& (0+255),w,b
  3098  000A72  22DA               	addwfc	fsr2h,f,c
  3099  000A74  50DF               	movf	indf2,w,c
  3100  000A76  6FCD               	movwf	??_setMotorPWM& (0+255),b
  3101  000A78  0E01               	movlw	1
  3102  000A7A  6FCE               	movwf	(??_setMotorPWM+1)& (0+255),b
  3103  000A7C  2BCD               	incf	??_setMotorPWM& (0+255),f,b
  3104  000A7E  D002               	goto	u1364
  3105  000A80                     u1365:
  3106  000A80  90D8               	bcf	status,0,c
  3107  000A82  37CE               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  3108  000A84                     u1364:
  3109  000A84  2FCD               	decfsz	??_setMotorPWM& (0+255),f,b
  3110  000A86  D7FC               	goto	u1365
  3111  000A88  0100               	movlb	0	; () banked
  3112  000A8A  51CE               	movf	(??_setMotorPWM+1)& (0+255),w,b
  3113  000A8C  0AFF               	xorlw	255
  3114  000A8E  148A               	andwf	3978,w,c	;volatile
  3115  000A90  6E8A               	movwf	3978,c	;volatile
  3116  000A92  0012               	return	
  3117  000A94                     __end_of_setMotorPWM:
  3118                           	opt stack 0
  3119                           tblptru	equ	0xFF8
  3120                           tblptrh	equ	0xFF7
  3121                           tblptrl	equ	0xFF6
  3122                           tablat	equ	0xFF5
  3123                           prodh	equ	0xFF4
  3124                           prodl	equ	0xFF3
  3125                           postinc0	equ	0xFEE
  3126                           wreg	equ	0xFE8
  3127                           indf2	equ	0xFDF
  3128                           postinc2	equ	0xFDE
  3129                           postdec2	equ	0xFDD
  3130                           fsr2h	equ	0xFDA
  3131                           fsr2l	equ	0xFD9
  3132                           status	equ	0xFD8
  3133                           
  3134 ;; *************** function ___wmul *****************
  3135 ;; Defined at:
  3136 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;  multiplier      2   33[COMRAM] unsigned int 
  3139 ;;  multiplicand    2   35[COMRAM] unsigned int 
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;  product         2   37[COMRAM] unsigned int 
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  2   33[COMRAM] unsigned int 
  3144 ;; Registers used:
  3145 ;;		wreg, status,2, status,0, prodl, prodh
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3151 ;;      Params:         4       0       0       0
  3152 ;;      Locals:         2       0       0       0
  3153 ;;      Temps:          0       0       0       0
  3154 ;;      Totals:         6       0       0       0
  3155 ;;Total ram usage:        6 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    4
  3158 ;; This function calls:
  3159 ;;		Nothing
  3160 ;; This function is called by:
  3161 ;;		_setMotorPWM
  3162 ;;		i2_setMotorPWM
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           	psect	text14
  3167  001374                     __ptext14:
  3168                           	opt stack 0
  3169  001374                     ___wmul:
  3170                           	opt stack 24
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;incstack = 0
  3174  001374  5022               	movf	___wmul@multiplier,w,c
  3175  001376  0224               	mulwf	___wmul@multiplicand,c
  3176  001378  CFF3 F026          	movff	prodl,___wmul@product
  3177  00137C  CFF4 F027          	movff	prodh,___wmul@product+1
  3178  001380  5022               	movf	___wmul@multiplier,w,c
  3179  001382  0225               	mulwf	___wmul@multiplicand+1,c
  3180  001384  50F3               	movf	prodl,w,c
  3181  001386  2627               	addwf	___wmul@product+1,f,c
  3182  001388  5023               	movf	___wmul@multiplier+1,w,c
  3183  00138A  0224               	mulwf	___wmul@multiplicand,c
  3184  00138C  50F3               	movf	prodl,w,c
  3185  00138E  2627               	addwf	___wmul@product+1,f,c
  3186  001390  C026  F022         	movff	___wmul@product,?___wmul
  3187  001394  C027  F023         	movff	___wmul@product+1,?___wmul+1
  3188  001398  0012               	return	
  3189  00139A                     __end_of___wmul:
  3190                           	opt stack 0
  3191                           tblptru	equ	0xFF8
  3192                           tblptrh	equ	0xFF7
  3193                           tblptrl	equ	0xFF6
  3194                           tablat	equ	0xFF5
  3195                           prodh	equ	0xFF4
  3196                           prodl	equ	0xFF3
  3197                           postinc0	equ	0xFEE
  3198                           wreg	equ	0xFE8
  3199                           indf2	equ	0xFDF
  3200                           postinc2	equ	0xFDE
  3201                           postdec2	equ	0xFDD
  3202                           fsr2h	equ	0xFDA
  3203                           fsr2l	equ	0xFD9
  3204                           status	equ	0xFD8
  3205                           
  3206 ;; *************** function ___awdiv *****************
  3207 ;; Defined at:
  3208 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awdiv.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;  dividend        2   39[COMRAM] int 
  3211 ;;  divisor         2   41[COMRAM] int 
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;  quotient        2    2[BANK0 ] int 
  3214 ;;  sign            1    1[BANK0 ] unsigned char 
  3215 ;;  counter         1    0[BANK0 ] unsigned char 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;                  2   39[COMRAM] int 
  3218 ;; Registers used:
  3219 ;;		wreg, status,2, status,0
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3225 ;;      Params:         4       0       0       0
  3226 ;;      Locals:         0       4       0       0
  3227 ;;      Temps:          0       0       0       0
  3228 ;;      Totals:         4       4       0       0
  3229 ;;Total ram usage:        8 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    4
  3232 ;; This function calls:
  3233 ;;		Nothing
  3234 ;; This function is called by:
  3235 ;;		_setMotorPWM
  3236 ;;		i2_setMotorPWM
  3237 ;; This function uses a non-reentrant model
  3238 ;;
  3239                           
  3240                           	psect	text15
  3241  000E1E                     __ptext15:
  3242                           	opt stack 0
  3243  000E1E                     ___awdiv:
  3244                           	opt stack 24
  3245                           
  3246                           ;incstack = 0
  3247  000E1E  0E00               	movlw	0
  3248  000E20  0100               	movlb	0	; () banked
  3249  000E22  6FC8               	movwf	___awdiv@sign& (0+255),b
  3250                           
  3251                           ; BSR set to: 0
  3252  000E24  AE2B               	btfss	___awdiv@divisor+1,7,c
  3253  000E26  D006               	goto	l539
  3254                           
  3255                           ; BSR set to: 0
  3256  000E28  6C2A               	negf	___awdiv@divisor,c
  3257  000E2A  1E2B               	comf	___awdiv@divisor+1,f,c
  3258  000E2C  B0D8               	btfsc	status,0,c
  3259  000E2E  2A2B               	incf	___awdiv@divisor+1,f,c
  3260                           
  3261                           ; BSR set to: 0
  3262  000E30  0E01               	movlw	1
  3263  000E32  6FC8               	movwf	___awdiv@sign& (0+255),b
  3264  000E34                     l539:
  3265                           
  3266                           ; BSR set to: 0
  3267                           
  3268                           ; BSR set to: 0
  3269  000E34  AE29               	btfss	___awdiv@dividend+1,7,c
  3270  000E36  D006               	goto	l540
  3271                           
  3272                           ; BSR set to: 0
  3273  000E38  6C28               	negf	___awdiv@dividend,c
  3274  000E3A  1E29               	comf	___awdiv@dividend+1,f,c
  3275  000E3C  B0D8               	btfsc	status,0,c
  3276  000E3E  2A29               	incf	___awdiv@dividend+1,f,c
  3277                           
  3278                           ; BSR set to: 0
  3279  000E40  0E01               	movlw	1
  3280  000E42  1BC8               	xorwf	___awdiv@sign& (0+255),f,b
  3281  000E44                     l540:
  3282                           
  3283                           ; BSR set to: 0
  3284                           
  3285                           ; BSR set to: 0
  3286  000E44  0E00               	movlw	0
  3287  000E46  6FCA               	movwf	(___awdiv@quotient+1)& (0+255),b
  3288  000E48  0E00               	movlw	0
  3289  000E4A  6FC9               	movwf	___awdiv@quotient& (0+255),b
  3290                           
  3291                           ; BSR set to: 0
  3292  000E4C  502A               	movf	___awdiv@divisor,w,c
  3293  000E4E  102B               	iorwf	___awdiv@divisor+1,w,c
  3294  000E50  B4D8               	btfsc	status,2,c
  3295  000E52  D01C               	goto	l547
  3296                           
  3297                           ; BSR set to: 0
  3298  000E54  0E01               	movlw	1
  3299  000E56  6FC7               	movwf	___awdiv@counter& (0+255),b
  3300  000E58  D004               	goto	l542
  3301  000E5A                     
  3302                           ; BSR set to: 0
  3303                           
  3304                           ; BSR set to: 0
  3305  000E5A  90D8               	bcf	status,0,c
  3306  000E5C  362A               	rlcf	___awdiv@divisor,f,c
  3307  000E5E  362B               	rlcf	___awdiv@divisor+1,f,c
  3308  000E60  2BC7               	incf	___awdiv@counter& (0+255),f,b
  3309  000E62                     l542:
  3310                           
  3311                           ; BSR set to: 0
  3312                           
  3313                           ; BSR set to: 0
  3314  000E62  AE2B               	btfss	___awdiv@divisor+1,7,c
  3315  000E64  D7FA               	goto	l543
  3316  000E66                     u1300:
  3317                           
  3318                           ; BSR set to: 0
  3319                           
  3320                           ; BSR set to: 0
  3321                           
  3322                           ; BSR set to: 0
  3323  000E66  90D8               	bcf	status,0,c
  3324  000E68  37C9               	rlcf	___awdiv@quotient& (0+255),f,b
  3325  000E6A  37CA               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  3326                           
  3327                           ; BSR set to: 0
  3328  000E6C  502A               	movf	___awdiv@divisor,w,c
  3329  000E6E  5C28               	subwf	___awdiv@dividend,w,c
  3330  000E70  502B               	movf	___awdiv@divisor+1,w,c
  3331  000E72  5829               	subwfb	___awdiv@dividend+1,w,c
  3332  000E74  A0D8               	btfss	status,0,c
  3333  000E76  D005               	goto	l546
  3334                           
  3335                           ; BSR set to: 0
  3336  000E78  502A               	movf	___awdiv@divisor,w,c
  3337  000E7A  5E28               	subwf	___awdiv@dividend,f,c
  3338  000E7C  502B               	movf	___awdiv@divisor+1,w,c
  3339  000E7E  5A29               	subwfb	___awdiv@dividend+1,f,c
  3340                           
  3341                           ; BSR set to: 0
  3342  000E80  81C9               	bsf	___awdiv@quotient& (0+255),0,b
  3343  000E82                     l546:
  3344                           
  3345                           ; BSR set to: 0
  3346                           
  3347                           ; BSR set to: 0
  3348  000E82  90D8               	bcf	status,0,c
  3349  000E84  322B               	rrcf	___awdiv@divisor+1,f,c
  3350  000E86  322A               	rrcf	___awdiv@divisor,f,c
  3351                           
  3352                           ; BSR set to: 0
  3353  000E88  2FC7               	decfsz	___awdiv@counter& (0+255),f,b
  3354  000E8A  D7ED               	goto	u1300
  3355  000E8C                     l547:
  3356                           
  3357                           ; BSR set to: 0
  3358                           
  3359                           ; BSR set to: 0
  3360                           
  3361                           ; BSR set to: 0
  3362  000E8C  51C8               	movf	___awdiv@sign& (0+255),w,b
  3363  000E8E  B4D8               	btfsc	status,2,c
  3364  000E90  D004               	goto	l548
  3365                           
  3366                           ; BSR set to: 0
  3367  000E92  6DC9               	negf	___awdiv@quotient& (0+255),b
  3368  000E94  1FCA               	comf	(___awdiv@quotient+1)& (0+255),f,b
  3369  000E96  B0D8               	btfsc	status,0,c
  3370  000E98  2BCA               	incf	(___awdiv@quotient+1)& (0+255),f,b
  3371  000E9A                     l548:
  3372                           
  3373                           ; BSR set to: 0
  3374                           
  3375                           ; BSR set to: 0
  3376  000E9A  C0C9  F028         	movff	___awdiv@quotient,?___awdiv
  3377  000E9E  C0CA  F029         	movff	___awdiv@quotient+1,?___awdiv+1
  3378  000EA2  0012               	return	
  3379  000EA4                     __end_of___awdiv:
  3380                           	opt stack 0
  3381                           tblptru	equ	0xFF8
  3382                           tblptrh	equ	0xFF7
  3383                           tblptrl	equ	0xFF6
  3384                           tablat	equ	0xFF5
  3385                           prodh	equ	0xFF4
  3386                           prodl	equ	0xFF3
  3387                           postinc0	equ	0xFEE
  3388                           wreg	equ	0xFE8
  3389                           indf2	equ	0xFDF
  3390                           postinc2	equ	0xFDE
  3391                           postdec2	equ	0xFDD
  3392                           fsr2h	equ	0xFDA
  3393                           fsr2l	equ	0xFD9
  3394                           status	equ	0xFD8
  3395                           
  3396 ;; *************** function _SetLine *****************
  3397 ;; Defined at:
  3398 ;;		line 99 in file "LDCScreen.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;  line            1    wreg     unsigned char 
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;  line            1   39[COMRAM] unsigned char 
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  1    wreg      void 
  3405 ;; Registers used:
  3406 ;;		wreg, status,2, status,0, cstack
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3412 ;;      Params:         0       0       0       0
  3413 ;;      Locals:         1       0       0       0
  3414 ;;      Temps:          0       0       0       0
  3415 ;;      Totals:         1       0       0       0
  3416 ;;Total ram usage:        1 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; Hardware stack levels required when called:    7
  3419 ;; This function calls:
  3420 ;;		_SendLCD
  3421 ;; This function is called by:
  3422 ;;		_main
  3423 ;;		_IRScreen
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           	psect	text16
  3428  001228                     __ptext16:
  3429                           	opt stack 0
  3430  001228                     _SetLine:
  3431                           	opt stack 23
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;incstack = 0
  3435                           ;SetLine@line stored from wreg
  3436  001228  6E28               	movwf	SetLine@line,c
  3437                           
  3438                           ;LDCScreen.c: 101: if (line==1){
  3439  00122A  0428               	decf	SetLine@line,w,c
  3440  00122C  A4D8               	btfss	status,2,c
  3441  00122E  D005               	goto	l94
  3442                           
  3443                           ;LDCScreen.c: 102: SendLCD(0x80,0);
  3444  001230  0E00               	movlw	0
  3445  001232  6E26               	movwf	SendLCD@type,c
  3446  001234  0E80               	movlw	128
  3447  001236  EC7F  F009         	call	_SendLCD
  3448  00123A                     l94:
  3449                           
  3450                           ;LDCScreen.c: 103: };LDCScreen.c: 105: if (line==2){
  3451  00123A  0E02               	movlw	2
  3452  00123C  1828               	xorwf	SetLine@line,w,c
  3453  00123E  A4D8               	btfss	status,2,c
  3454  001240  D005               	goto	l95
  3455                           
  3456                           ;LDCScreen.c: 106: SendLCD(0xC0,0);
  3457  001242  0E00               	movlw	0
  3458  001244  6E26               	movwf	SendLCD@type,c
  3459  001246  0EC0               	movlw	192
  3460  001248  EC7F  F009         	call	_SendLCD
  3461  00124C                     l95:
  3462                           
  3463                           ;LDCScreen.c: 107: };LDCScreen.c: 108: _delay((unsigned long)((50)*(8000000/4000000.0)))
      +                          ;
  3464  00124C  0E21               	movlw	33
  3465  00124E                     u1857:
  3466  00124E  2EE8               	decfsz	wreg,f,c
  3467  001250  D7FE               	bra	u1857
  3468  001252  F000               	nop	
  3469  001254  0012               	return		;funcret
  3470  001256                     __end_of_SetLine:
  3471                           	opt stack 0
  3472                           tblptru	equ	0xFF8
  3473                           tblptrh	equ	0xFF7
  3474                           tblptrl	equ	0xFF6
  3475                           tablat	equ	0xFF5
  3476                           prodh	equ	0xFF4
  3477                           prodl	equ	0xFF3
  3478                           postinc0	equ	0xFEE
  3479                           wreg	equ	0xFE8
  3480                           indf2	equ	0xFDF
  3481                           postinc2	equ	0xFDE
  3482                           postdec2	equ	0xFDD
  3483                           fsr2h	equ	0xFDA
  3484                           fsr2l	equ	0xFD9
  3485                           status	equ	0xFD8
  3486                           
  3487 ;; *************** function _Motor_Init *****************
  3488 ;; Defined at:
  3489 ;;		line 46 in file "ecm.c"
  3490 ;; Parameters:    Size  Location     Type
  3491 ;;		None
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;  PWMcycle        2   35[COMRAM] int 
  3494 ;; Return value:  Size  Location     Type
  3495 ;;                  1    wreg      void 
  3496 ;; Registers used:
  3497 ;;		wreg, status,2, status,0, cstack
  3498 ;; Tracked objects:
  3499 ;;		On entry : 0/0
  3500 ;;		On exit  : 0/0
  3501 ;;		Unchanged: 0/0
  3502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3503 ;;      Params:         0       0       0       0
  3504 ;;      Locals:         2       0       0       0
  3505 ;;      Temps:          0       0       0       0
  3506 ;;      Totals:         2       0       0       0
  3507 ;;Total ram usage:        2 bytes
  3508 ;; Hardware stack levels used:    1
  3509 ;; Hardware stack levels required when called:    5
  3510 ;; This function calls:
  3511 ;;		_initPWM
  3512 ;; This function is called by:
  3513 ;;		_main
  3514 ;; This function uses a non-reentrant model
  3515 ;;
  3516                           
  3517                           	psect	text17
  3518  000FEC                     __ptext17:
  3519                           	opt stack 0
  3520  000FEC                     _Motor_Init:
  3521                           	opt stack 25
  3522                           
  3523                           ;ecm.c: 47: int PWMcycle = 199;
  3524                           
  3525                           ;incstack = 0
  3526  000FEC  0E00               	movlw	0
  3527  000FEE  6E25               	movwf	Motor_Init@PWMcycle+1,c
  3528  000FF0  0EC7               	movlw	199
  3529  000FF2  6E24               	movwf	Motor_Init@PWMcycle,c
  3530                           
  3531                           ;ecm.c: 48: initPWM();
  3532  000FF4  ECDB  F008         	call	_initPWM	;wreg free
  3533                           
  3534                           ;ecm.c: 51: motorL.power=0;
  3535  000FF8  0E00               	movlw	0
  3536  000FFA  6E35               	movwf	_motorL,c
  3537                           
  3538                           ;ecm.c: 52: motorL.direction=1;
  3539  000FFC  0E01               	movlw	1
  3540  000FFE  6E36               	movwf	_motorL+1,c
  3541                           
  3542                           ;ecm.c: 53: motorL.dutyLowByte=(unsigned char*)(&PDC0L);
  3543  001000  0E79               	movlw	121
  3544  001002  6E37               	movwf	_motorL+2,c
  3545  001004  0E0F               	movlw	15
  3546  001006  6E38               	movwf	_motorL+3,c
  3547                           
  3548                           ;ecm.c: 54: motorL.dutyHighByte=(unsigned char*)(&PDC0H);
  3549  001008  0E78               	movlw	120
  3550  00100A  6E39               	movwf	_motorL+4,c
  3551  00100C  0E0F               	movlw	15
  3552  00100E  6E3A               	movwf	_motorL+5,c
  3553                           
  3554                           ;ecm.c: 55: motorL.dir_pin=0;
  3555  001010  0E00               	movlw	0
  3556  001012  6E3B               	movwf	_motorL+6,c
  3557                           
  3558                           ;ecm.c: 56: motorL.PWMperiod=PWMcycle;
  3559  001014  C024  F03C         	movff	Motor_Init@PWMcycle,_motorL+7
  3560  001018  C025  F03D         	movff	Motor_Init@PWMcycle+1,_motorL+8
  3561                           
  3562                           ;ecm.c: 59: motorR.power=0;
  3563  00101C  0E00               	movlw	0
  3564  00101E  6E2C               	movwf	_motorR,c
  3565                           
  3566                           ;ecm.c: 60: motorR.direction=1;
  3567  001020  0E01               	movlw	1
  3568  001022  6E2D               	movwf	_motorR+1,c
  3569                           
  3570                           ;ecm.c: 61: motorR.dutyLowByte=(unsigned char*)(&PDC1L);
  3571  001024  0E77               	movlw	119
  3572  001026  6E2E               	movwf	_motorR+2,c
  3573  001028  0E0F               	movlw	15
  3574  00102A  6E2F               	movwf	_motorR+3,c
  3575                           
  3576                           ;ecm.c: 62: motorR.dutyHighByte=(unsigned char*)(&PDC1H);
  3577  00102C  0E76               	movlw	118
  3578  00102E  6E30               	movwf	_motorR+4,c
  3579  001030  0E0F               	movlw	15
  3580  001032  6E31               	movwf	_motorR+5,c
  3581                           
  3582                           ;ecm.c: 63: motorR.dir_pin=2;
  3583  001034  0E02               	movlw	2
  3584  001036  6E32               	movwf	_motorR+6,c
  3585                           
  3586                           ;ecm.c: 64: motorR.PWMperiod=PWMcycle;
  3587  001038  C024  F033         	movff	Motor_Init@PWMcycle,_motorR+7
  3588  00103C  C025  F034         	movff	Motor_Init@PWMcycle+1,_motorR+8
  3589  001040  0012               	return		;funcret
  3590  001042                     __end_of_Motor_Init:
  3591                           	opt stack 0
  3592                           tblptru	equ	0xFF8
  3593                           tblptrh	equ	0xFF7
  3594                           tblptrl	equ	0xFF6
  3595                           tablat	equ	0xFF5
  3596                           prodh	equ	0xFF4
  3597                           prodl	equ	0xFF3
  3598                           postinc0	equ	0xFEE
  3599                           wreg	equ	0xFE8
  3600                           indf2	equ	0xFDF
  3601                           postinc2	equ	0xFDE
  3602                           postdec2	equ	0xFDD
  3603                           fsr2h	equ	0xFDA
  3604                           fsr2l	equ	0xFD9
  3605                           status	equ	0xFD8
  3606                           
  3607 ;; *************** function _initPWM *****************
  3608 ;; Defined at:
  3609 ;;		line 3 in file "MotorControl.c"
  3610 ;; Parameters:    Size  Location     Type
  3611 ;;		None
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;  period          2   33[COMRAM] int 
  3614 ;; Return value:  Size  Location     Type
  3615 ;;                  1    wreg      void 
  3616 ;; Registers used:
  3617 ;;		wreg, status,2, status,0
  3618 ;; Tracked objects:
  3619 ;;		On entry : 0/0
  3620 ;;		On exit  : 0/0
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3623 ;;      Params:         0       0       0       0
  3624 ;;      Locals:         2       0       0       0
  3625 ;;      Temps:          0       0       0       0
  3626 ;;      Totals:         2       0       0       0
  3627 ;;Total ram usage:        2 bytes
  3628 ;; Hardware stack levels used:    1
  3629 ;; Hardware stack levels required when called:    4
  3630 ;; This function calls:
  3631 ;;		Nothing
  3632 ;; This function is called by:
  3633 ;;		_Motor_Init
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           	psect	text18
  3638  0011B6                     __ptext18:
  3639                           	opt stack 0
  3640  0011B6                     _initPWM:
  3641                           	opt stack 25
  3642                           
  3643                           ;MotorControl.c: 7: TRISBbits.RB0=0;
  3644                           
  3645                           ;incstack = 0
  3646  0011B6  9093               	bcf	3987,0,c	;volatile
  3647                           
  3648                           ;MotorControl.c: 8: TRISBbits.RB1 = 0;
  3649  0011B8  9293               	bcf	3987,1,c	;volatile
  3650                           
  3651                           ;MotorControl.c: 9: TRISBbits.RB2 = 0;
  3652  0011BA  9493               	bcf	3987,2,c	;volatile
  3653                           
  3654                           ;MotorControl.c: 10: TRISBbits.RB3 = 0;
  3655  0011BC  9693               	bcf	3987,3,c	;volatile
  3656                           
  3657                           ;MotorControl.c: 11: PTCON0 = 0b00001100;
  3658  0011BE  0E0C               	movlw	12
  3659  0011C0  6E7F               	movwf	3967,c	;volatile
  3660                           
  3661                           ;MotorControl.c: 12: PTCON1 = 0b10000000;
  3662  0011C2  0E80               	movlw	128
  3663  0011C4  6E7E               	movwf	3966,c	;volatile
  3664                           
  3665                           ;MotorControl.c: 13: PWMCON0 = 0b01101111;
  3666  0011C6  0E6F               	movlw	111
  3667  0011C8  6E6F               	movwf	3951,c	;volatile
  3668                           
  3669                           ;MotorControl.c: 14: PWMCON1 = 0x00;
  3670  0011CA  0E00               	movlw	0
  3671  0011CC  6E6E               	movwf	3950,c	;volatile
  3672                           
  3673                           ;MotorControl.c: 15: PTPERL = 0b11000111;
  3674  0011CE  0EC7               	movlw	199
  3675  0011D0  6E7B               	movwf	3963,c	;volatile
  3676                           
  3677                           ;MotorControl.c: 16: PTPERH = 0b00000000;
  3678  0011D2  0E00               	movlw	0
  3679  0011D4  6E7A               	movwf	3962,c	;volatile
  3680                           
  3681                           ;MotorControl.c: 21: int period=99;
  3682  0011D6  0E00               	movlw	0
  3683  0011D8  6E23               	movwf	initPWM@period+1,c
  3684  0011DA  0E63               	movlw	99
  3685  0011DC  6E22               	movwf	initPWM@period,c
  3686                           
  3687                           ;MotorControl.c: 23: PDC0L = (period<<2);
  3688  0011DE  4422               	rlncf	initPWM@period,w,c
  3689  0011E0  46E8               	rlncf	wreg,f,c
  3690  0011E2  0BFC               	andlw	252
  3691  0011E4  6E79               	movwf	3961,c	;volatile
  3692                           
  3693                           ;MotorControl.c: 24: PDC0H = (0b00000000>>6);
  3694  0011E6  0E00               	movlw	0
  3695  0011E8  6E78               	movwf	3960,c	;volatile
  3696                           
  3697                           ;MotorControl.c: 27: PDC1L = (period<<2);
  3698  0011EA  4422               	rlncf	initPWM@period,w,c
  3699  0011EC  46E8               	rlncf	wreg,f,c
  3700  0011EE  0BFC               	andlw	252
  3701  0011F0  6E77               	movwf	3959,c	;volatile
  3702                           
  3703                           ;MotorControl.c: 28: PDC1H = (0b00000000>>6);
  3704  0011F2  0E00               	movlw	0
  3705  0011F4  6E76               	movwf	3958,c	;volatile
  3706  0011F6  0012               	return		;funcret
  3707  0011F8                     __end_of_initPWM:
  3708                           	opt stack 0
  3709                           tblptru	equ	0xFF8
  3710                           tblptrh	equ	0xFF7
  3711                           tblptrl	equ	0xFF6
  3712                           tablat	equ	0xFF5
  3713                           prodh	equ	0xFF4
  3714                           prodl	equ	0xFF3
  3715                           postinc0	equ	0xFEE
  3716                           wreg	equ	0xFE8
  3717                           indf2	equ	0xFDF
  3718                           postinc2	equ	0xFDE
  3719                           postdec2	equ	0xFDD
  3720                           fsr2h	equ	0xFDA
  3721                           fsr2l	equ	0xFD9
  3722                           status	equ	0xFD8
  3723                           
  3724 ;; *************** function _LCD_String *****************
  3725 ;; Defined at:
  3726 ;;		line 112 in file "LDCScreen.c"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;  string          2   39[COMRAM] PTR unsigned char 
  3729 ;;		 -> main@buf(16), IRScreen2@buf(16), IRScreen@buf(16), 
  3730 ;; Auto vars:     Size  Location     Type
  3731 ;;		None
  3732 ;; Return value:  Size  Location     Type
  3733 ;;                  1    wreg      void 
  3734 ;; Registers used:
  3735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3736 ;; Tracked objects:
  3737 ;;		On entry : 0/0
  3738 ;;		On exit  : 0/0
  3739 ;;		Unchanged: 0/0
  3740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3741 ;;      Params:         2       0       0       0
  3742 ;;      Locals:         0       0       0       0
  3743 ;;      Temps:          0       0       0       0
  3744 ;;      Totals:         2       0       0       0
  3745 ;;Total ram usage:        2 bytes
  3746 ;; Hardware stack levels used:    1
  3747 ;; Hardware stack levels required when called:    7
  3748 ;; This function calls:
  3749 ;;		_SendLCD
  3750 ;; This function is called by:
  3751 ;;		_main
  3752 ;;		_IRScreen
  3753 ;;		_IRScreen2
  3754 ;; This function uses a non-reentrant model
  3755 ;;
  3756                           
  3757                           	psect	text19
  3758  0011F8                     __ptext19:
  3759                           	opt stack 0
  3760  0011F8                     _LCD_String:
  3761                           	opt stack 23
  3762                           
  3763                           ;LDCScreen.c: 114: while(*string != 0){
  3764                           
  3765                           ;incstack = 0
  3766  0011F8  D00F               	goto	l99
  3767  0011FA                     
  3768                           ;LDCScreen.c: 117: SendLCD(*string++,1);
  3769  0011FA  0E01               	movlw	1
  3770  0011FC  6E26               	movwf	SendLCD@type,c
  3771  0011FE  C028  FFD9         	movff	LCD_String@string,fsr2l
  3772  001202  C029  FFDA         	movff	LCD_String@string+1,fsr2h
  3773  001206  50DF               	movf	indf2,w,c
  3774  001208  EC7F  F009         	call	_SendLCD
  3775  00120C  4A28               	infsnz	LCD_String@string,f,c
  3776  00120E  2A29               	incf	LCD_String@string+1,f,c
  3777                           
  3778                           ;LDCScreen.c: 118: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3779  001210  0E21               	movlw	33
  3780  001212                     u1867:
  3781  001212  2EE8               	decfsz	wreg,f,c
  3782  001214  D7FE               	bra	u1867
  3783  001216  F000               	nop	
  3784  001218                     l99:
  3785  001218  C028  FFD9         	movff	LCD_String@string,fsr2l
  3786  00121C  C029  FFDA         	movff	LCD_String@string+1,fsr2h
  3787  001220  50DF               	movf	indf2,w,c
  3788  001222  B4D8               	btfsc	status,2,c
  3789  001224  0012               	return	
  3790  001226  D7E9               	goto	l100
  3791  001228                     __end_of_LCD_String:
  3792                           	opt stack 0
  3793                           tblptru	equ	0xFF8
  3794                           tblptrh	equ	0xFF7
  3795                           tblptrl	equ	0xFF6
  3796                           tablat	equ	0xFF5
  3797                           prodh	equ	0xFF4
  3798                           prodl	equ	0xFF3
  3799                           postinc0	equ	0xFEE
  3800                           wreg	equ	0xFE8
  3801                           indf2	equ	0xFDF
  3802                           postinc2	equ	0xFDE
  3803                           postdec2	equ	0xFDD
  3804                           fsr2h	equ	0xFDA
  3805                           fsr2l	equ	0xFD9
  3806                           status	equ	0xFD8
  3807                           
  3808 ;; *************** function _LCD_Init *****************
  3809 ;; Defined at:
  3810 ;;		line 56 in file "LDCScreen.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;		None
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;		None
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  1    wreg      void 
  3817 ;; Registers used:
  3818 ;;		wreg, status,2, status,0, cstack
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3824 ;;      Params:         0       0       0       0
  3825 ;;      Locals:         0       0       0       0
  3826 ;;      Temps:          1       0       0       0
  3827 ;;      Totals:         1       0       0       0
  3828 ;;Total ram usage:        1 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; Hardware stack levels required when called:    7
  3831 ;; This function calls:
  3832 ;;		_LCDout
  3833 ;;		_SendLCD
  3834 ;; This function is called by:
  3835 ;;		_main
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	text20
  3840  000D68                     __ptext20:
  3841                           	opt stack 0
  3842  000D68                     _LCD_Init:
  3843                           	opt stack 23
  3844                           
  3845                           ;LDCScreen.c: 58: LATC=0;
  3846                           
  3847                           ;incstack = 0
  3848  000D68  0E00               	movlw	0
  3849  000D6A  6E8B               	movwf	3979,c	;volatile
  3850                           
  3851                           ;LDCScreen.c: 59: LATA=0;
  3852  000D6C  0E00               	movlw	0
  3853  000D6E  6E89               	movwf	3977,c	;volatile
  3854                           
  3855                           ;LDCScreen.c: 60: LATD=0;
  3856  000D70  0E00               	movlw	0
  3857  000D72  6E8C               	movwf	3980,c	;volatile
  3858                           
  3859                           ;LDCScreen.c: 62: TRISC= 0;
  3860  000D74  0E00               	movlw	0
  3861  000D76  6E94               	movwf	3988,c	;volatile
  3862                           
  3863                           ;LDCScreen.c: 63: TRISD= 0;
  3864  000D78  0E00               	movlw	0
  3865  000D7A  6E95               	movwf	3989,c	;volatile
  3866                           
  3867                           ;LDCScreen.c: 64: TRISA= 0;
  3868  000D7C  0E00               	movlw	0
  3869  000D7E  6E92               	movwf	3986,c	;volatile
  3870                           
  3871                           ;LDCScreen.c: 69: _delay((unsigned long)((15)*(8000000/4000000.0)));
  3872  000D80  0E0A               	movlw	10
  3873  000D82                     u1877:
  3874  000D82  2EE8               	decfsz	wreg,f,c
  3875  000D84  D7FE               	bra	u1877
  3876                           
  3877                           ;LDCScreen.c: 71: LCDout(0b0011);
  3878  000D86  0E03               	movlw	3
  3879  000D88  EC4A  F008         	call	_LCDout
  3880                           
  3881                           ;LDCScreen.c: 73: _delay((unsigned long)((5)*(8000000/4000.0)));
  3882  000D8C  0E0D               	movlw	13
  3883  000D8E  6E28               	movwf	??_LCD_Init& (0+255),c
  3884  000D90  0EFC               	movlw	252
  3885  000D92                     u1887:
  3886  000D92  2EE8               	decfsz	wreg,f,c
  3887  000D94  D7FE               	bra	u1887
  3888  000D96  2E28               	decfsz	??_LCD_Init& (0+255),f,c
  3889  000D98  D7FC               	bra	u1887
  3890                           
  3891                           ;LDCScreen.c: 75: LCDout(0b0011);
  3892  000D9A  0E03               	movlw	3
  3893  000D9C  EC4A  F008         	call	_LCDout
  3894                           
  3895                           ;LDCScreen.c: 77: _delay((unsigned long)((200)*(8000000/4000000.0)));
  3896  000DA0  0E85               	movlw	133
  3897  000DA2                     u1897:
  3898  000DA2  2EE8               	decfsz	wreg,f,c
  3899  000DA4  D7FE               	bra	u1897
  3900  000DA6  F000               	nop	
  3901                           
  3902                           ;LDCScreen.c: 79: LCDout(0b0011);
  3903  000DA8  0E03               	movlw	3
  3904  000DAA  EC4A  F008         	call	_LCDout
  3905                           
  3906                           ;LDCScreen.c: 81: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3907  000DAE  0E21               	movlw	33
  3908  000DB0                     u1907:
  3909  000DB0  2EE8               	decfsz	wreg,f,c
  3910  000DB2  D7FE               	bra	u1907
  3911  000DB4  F000               	nop	
  3912                           
  3913                           ;LDCScreen.c: 83: LCDout(0b0010);
  3914  000DB6  0E02               	movlw	2
  3915  000DB8  EC4A  F008         	call	_LCDout
  3916                           
  3917                           ;LDCScreen.c: 85: SendLCD(0b00101000,0);
  3918  000DBC  0E00               	movlw	0
  3919  000DBE  6E26               	movwf	SendLCD@type,c
  3920  000DC0  0E28               	movlw	40
  3921  000DC2  EC7F  F009         	call	_SendLCD
  3922                           
  3923                           ;LDCScreen.c: 86: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3924  000DC6  0E21               	movlw	33
  3925  000DC8                     u1917:
  3926  000DC8  2EE8               	decfsz	wreg,f,c
  3927  000DCA  D7FE               	bra	u1917
  3928  000DCC  F000               	nop	
  3929                           
  3930                           ;LDCScreen.c: 87: SendLCD(0b00001000,0);
  3931  000DCE  0E00               	movlw	0
  3932  000DD0  6E26               	movwf	SendLCD@type,c
  3933  000DD2  0E08               	movlw	8
  3934  000DD4  EC7F  F009         	call	_SendLCD
  3935                           
  3936                           ;LDCScreen.c: 88: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3937  000DD8  0E21               	movlw	33
  3938  000DDA                     u1927:
  3939  000DDA  2EE8               	decfsz	wreg,f,c
  3940  000DDC  D7FE               	bra	u1927
  3941  000DDE  F000               	nop	
  3942                           
  3943                           ;LDCScreen.c: 89: SendLCD(0b00000001,0);
  3944  000DE0  0E00               	movlw	0
  3945  000DE2  6E26               	movwf	SendLCD@type,c
  3946  000DE4  0E01               	movlw	1
  3947  000DE6  EC7F  F009         	call	_SendLCD
  3948                           
  3949                           ;LDCScreen.c: 90: _delay((unsigned long)((5)*(8000000/4000.0)));
  3950  000DEA  0E0D               	movlw	13
  3951  000DEC  6E28               	movwf	??_LCD_Init& (0+255),c
  3952  000DEE  0EFC               	movlw	252
  3953  000DF0                     u1937:
  3954  000DF0  2EE8               	decfsz	wreg,f,c
  3955  000DF2  D7FE               	bra	u1937
  3956  000DF4  2E28               	decfsz	??_LCD_Init& (0+255),f,c
  3957  000DF6  D7FC               	bra	u1937
  3958                           
  3959                           ;LDCScreen.c: 91: SendLCD(0b00000110,0);
  3960  000DF8  0E00               	movlw	0
  3961  000DFA  6E26               	movwf	SendLCD@type,c
  3962  000DFC  0E06               	movlw	6
  3963  000DFE  EC7F  F009         	call	_SendLCD
  3964                           
  3965                           ;LDCScreen.c: 92: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3966  000E02  0E21               	movlw	33
  3967  000E04                     u1947:
  3968  000E04  2EE8               	decfsz	wreg,f,c
  3969  000E06  D7FE               	bra	u1947
  3970  000E08  F000               	nop	
  3971                           
  3972                           ;LDCScreen.c: 93: SendLCD (0b00001110, 0);
  3973  000E0A  0E00               	movlw	0
  3974  000E0C  6E26               	movwf	SendLCD@type,c
  3975  000E0E  0E0E               	movlw	14
  3976  000E10  EC7F  F009         	call	_SendLCD
  3977                           
  3978                           ;LDCScreen.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3979  000E14  0E21               	movlw	33
  3980  000E16                     u1957:
  3981  000E16  2EE8               	decfsz	wreg,f,c
  3982  000E18  D7FE               	bra	u1957
  3983  000E1A  F000               	nop	
  3984  000E1C  0012               	return		;funcret
  3985  000E1E                     __end_of_LCD_Init:
  3986                           	opt stack 0
  3987                           tblptru	equ	0xFF8
  3988                           tblptrh	equ	0xFF7
  3989                           tblptrl	equ	0xFF6
  3990                           tablat	equ	0xFF5
  3991                           prodh	equ	0xFF4
  3992                           prodl	equ	0xFF3
  3993                           postinc0	equ	0xFEE
  3994                           wreg	equ	0xFE8
  3995                           indf2	equ	0xFDF
  3996                           postinc2	equ	0xFDE
  3997                           postdec2	equ	0xFDD
  3998                           fsr2h	equ	0xFDA
  3999                           fsr2l	equ	0xFD9
  4000                           status	equ	0xFD8
  4001                           
  4002 ;; *************** function _SendLCD *****************
  4003 ;; Defined at:
  4004 ;;		line 43 in file "LDCScreen.c"
  4005 ;; Parameters:    Size  Location     Type
  4006 ;;  Byte            1    wreg     unsigned char 
  4007 ;;  type            1   37[COMRAM] unsigned char 
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;  Byte            1   38[COMRAM] unsigned char 
  4010 ;; Return value:  Size  Location     Type
  4011 ;;                  1    wreg      void 
  4012 ;; Registers used:
  4013 ;;		wreg, status,2, status,0, cstack
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4019 ;;      Params:         1       0       0       0
  4020 ;;      Locals:         1       0       0       0
  4021 ;;      Temps:          0       0       0       0
  4022 ;;      Totals:         2       0       0       0
  4023 ;;Total ram usage:        2 bytes
  4024 ;; Hardware stack levels used:    1
  4025 ;; Hardware stack levels required when called:    6
  4026 ;; This function calls:
  4027 ;;		_LCDout
  4028 ;; This function is called by:
  4029 ;;		_LCD_Init
  4030 ;;		_SetLine
  4031 ;;		_LCD_String
  4032 ;;		_main
  4033 ;;		_IRScreen2
  4034 ;; This function uses a non-reentrant model
  4035 ;;
  4036                           
  4037                           	psect	text21
  4038  0012FE                     __ptext21:
  4039                           	opt stack 0
  4040  0012FE                     _SendLCD:
  4041                           	opt stack 23
  4042                           
  4043                           ;incstack = 0
  4044                           ;SendLCD@Byte stored from wreg
  4045  0012FE  6E27               	movwf	SendLCD@Byte,c
  4046                           
  4047                           ;LDCScreen.c: 47: LATAbits.LATA6 =type;
  4048  001300  B026               	btfsc	SendLCD@type,0,c
  4049  001302  D002               	bra	u805
  4050  001304  9C89               	bcf	3977,6,c	;volatile
  4051  001306  D001               	bra	u806
  4052  001308                     u805:
  4053  001308  8C89               	bsf	3977,6,c	;volatile
  4054  00130A                     u806:
  4055                           
  4056                           ;LDCScreen.c: 49: LCDout((Byte&0b11110000)>>4);
  4057  00130A  3827               	swapf	SendLCD@Byte,w,c
  4058  00130C  0B0F               	andlw	15
  4059  00130E  0B0F               	andlw	15
  4060  001310  EC4A  F008         	call	_LCDout
  4061                           
  4062                           ;LDCScreen.c: 52: LCDout(Byte&0b00001111);
  4063  001314  5027               	movf	SendLCD@Byte,w,c
  4064  001316  0B0F               	andlw	15
  4065  001318  EC4A  F008         	call	_LCDout
  4066                           
  4067                           ;LDCScreen.c: 53: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4068  00131C  0E21               	movlw	33
  4069  00131E                     u1967:
  4070  00131E  2EE8               	decfsz	wreg,f,c
  4071  001320  D7FE               	bra	u1967
  4072  001322  F000               	nop	
  4073  001324  0012               	return		;funcret
  4074  001326                     __end_of_SendLCD:
  4075                           	opt stack 0
  4076                           tblptru	equ	0xFF8
  4077                           tblptrh	equ	0xFF7
  4078                           tblptrl	equ	0xFF6
  4079                           tablat	equ	0xFF5
  4080                           prodh	equ	0xFF4
  4081                           prodl	equ	0xFF3
  4082                           postinc0	equ	0xFEE
  4083                           wreg	equ	0xFE8
  4084                           indf2	equ	0xFDF
  4085                           postinc2	equ	0xFDE
  4086                           postdec2	equ	0xFDD
  4087                           fsr2h	equ	0xFDA
  4088                           fsr2l	equ	0xFD9
  4089                           status	equ	0xFD8
  4090                           
  4091 ;; *************** function _LCDout *****************
  4092 ;; Defined at:
  4093 ;;		line 30 in file "LDCScreen.c"
  4094 ;; Parameters:    Size  Location     Type
  4095 ;;  number          1    wreg     unsigned char 
  4096 ;; Auto vars:     Size  Location     Type
  4097 ;;  number          1   36[COMRAM] unsigned char 
  4098 ;; Return value:  Size  Location     Type
  4099 ;;                  1    wreg      void 
  4100 ;; Registers used:
  4101 ;;		wreg, status,2, status,0, cstack
  4102 ;; Tracked objects:
  4103 ;;		On entry : 0/0
  4104 ;;		On exit  : 0/0
  4105 ;;		Unchanged: 0/0
  4106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4107 ;;      Params:         0       0       0       0
  4108 ;;      Locals:         1       0       0       0
  4109 ;;      Temps:          3       0       0       0
  4110 ;;      Totals:         4       0       0       0
  4111 ;;Total ram usage:        4 bytes
  4112 ;; Hardware stack levels used:    1
  4113 ;; Hardware stack levels required when called:    5
  4114 ;; This function calls:
  4115 ;;		_E_TOG
  4116 ;; This function is called by:
  4117 ;;		_SendLCD
  4118 ;;		_LCD_Init
  4119 ;; This function uses a non-reentrant model
  4120 ;;
  4121                           
  4122                           	psect	text22
  4123  001094                     __ptext22:
  4124                           	opt stack 0
  4125  001094                     _LCDout:
  4126                           	opt stack 23
  4127                           
  4128                           ;incstack = 0
  4129                           ;LCDout@number stored from wreg
  4130  001094  6E25               	movwf	LCDout@number,c
  4131                           
  4132                           ;LDCScreen.c: 33: LATD=((number&0b1100)>>2)|(LATD &0b11111100);
  4133  001096  CF8C F022          	movff	3980,??_LCDout	;volatile
  4134  00109A  0EFC               	movlw	252
  4135  00109C  1622               	andwf	??_LCDout,f,c
  4136  00109E  4025               	rrncf	LCDout@number,w,c
  4137  0010A0  42E8               	rrncf	wreg,f,c
  4138  0010A2  0B3F               	andlw	63
  4139  0010A4  0B03               	andlw	3
  4140  0010A6  1022               	iorwf	??_LCDout,w,c
  4141  0010A8  6E8C               	movwf	3980,c	;volatile
  4142                           
  4143                           ;LDCScreen.c: 34: LATC=(((number&0b0011)<<1)|(LATD &0b11111001))<<3;
  4144  0010AA  CF8C F022          	movff	3980,??_LCDout	;volatile
  4145  0010AE  0EF9               	movlw	249
  4146  0010B0  1622               	andwf	??_LCDout,f,c
  4147  0010B2  C025  F023         	movff	LCDout@number,??_LCDout+1
  4148  0010B6  0E03               	movlw	3
  4149  0010B8  1623               	andwf	??_LCDout+1,f,c
  4150  0010BA  90D8               	bcf	status,0,c
  4151  0010BC  3423               	rlcf	??_LCDout+1,w,c
  4152  0010BE  1022               	iorwf	??_LCDout,w,c
  4153  0010C0  6E24               	movwf	(??_LCDout+2)& (0+255),c
  4154  0010C2  90D8               	bcf	status,0,c
  4155  0010C4  3624               	rlcf	??_LCDout+2,f,c
  4156  0010C6  90D8               	bcf	status,0,c
  4157  0010C8  3624               	rlcf	??_LCDout+2,f,c
  4158  0010CA  90D8               	bcf	status,0,c
  4159  0010CC  3424               	rlcf	??_LCDout+2,w,c
  4160  0010CE  6E8B               	movwf	3979,c	;volatile
  4161                           
  4162                           ;LDCScreen.c: 39: E_TOG();
  4163  0010D0  EC2B  F00A         	call	_E_TOG	;wreg free
  4164                           
  4165                           ;LDCScreen.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4166  0010D4  0E03               	movlw	3
  4167  0010D6                     u1977:
  4168  0010D6  2EE8               	decfsz	wreg,f,c
  4169  0010D8  D7FE               	bra	u1977
  4170  0010DA  F000               	nop	
  4171  0010DC  0012               	return		;funcret
  4172  0010DE                     __end_of_LCDout:
  4173                           	opt stack 0
  4174                           tblptru	equ	0xFF8
  4175                           tblptrh	equ	0xFF7
  4176                           tblptrl	equ	0xFF6
  4177                           tablat	equ	0xFF5
  4178                           prodh	equ	0xFF4
  4179                           prodl	equ	0xFF3
  4180                           postinc0	equ	0xFEE
  4181                           wreg	equ	0xFE8
  4182                           indf2	equ	0xFDF
  4183                           postinc2	equ	0xFDE
  4184                           postdec2	equ	0xFDD
  4185                           fsr2h	equ	0xFDA
  4186                           fsr2l	equ	0xFD9
  4187                           status	equ	0xFD8
  4188                           
  4189 ;; *************** function _E_TOG *****************
  4190 ;; Defined at:
  4191 ;;		line 24 in file "LDCScreen.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;		None
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;		None
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  1    wreg      void 
  4198 ;; Registers used:
  4199 ;;		wreg
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4205 ;;      Params:         0       0       0       0
  4206 ;;      Locals:         0       0       0       0
  4207 ;;      Temps:          0       0       0       0
  4208 ;;      Totals:         0       0       0       0
  4209 ;;Total ram usage:        0 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; Hardware stack levels required when called:    4
  4212 ;; This function calls:
  4213 ;;		Nothing
  4214 ;; This function is called by:
  4215 ;;		_LCDout
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           	psect	text23
  4220  001456                     __ptext23:
  4221                           	opt stack 0
  4222  001456                     _E_TOG:
  4223                           	opt stack 23
  4224                           
  4225                           ;LDCScreen.c: 25: LATCbits.LATC0 = 1;
  4226                           
  4227                           ;incstack = 0
  4228  001456  808B               	bsf	3979,0,c	;volatile
  4229                           
  4230                           ;LDCScreen.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4231  001458  0E03               	movlw	3
  4232  00145A                     u1987:
  4233  00145A  2EE8               	decfsz	wreg,f,c
  4234  00145C  D7FE               	bra	u1987
  4235  00145E  F000               	nop	
  4236                           
  4237                           ;LDCScreen.c: 27: LATCbits.LATC0 = 0;
  4238  001460  908B               	bcf	3979,0,c	;volatile
  4239  001462  0012               	return		;funcret
  4240  001464                     __end_of_E_TOG:
  4241                           	opt stack 0
  4242                           tblptru	equ	0xFF8
  4243                           tblptrh	equ	0xFF7
  4244                           tblptrl	equ	0xFF6
  4245                           tablat	equ	0xFF5
  4246                           prodh	equ	0xFF4
  4247                           prodl	equ	0xFF3
  4248                           postinc0	equ	0xFEE
  4249                           wreg	equ	0xFE8
  4250                           indf2	equ	0xFDF
  4251                           postinc2	equ	0xFDE
  4252                           postdec2	equ	0xFDD
  4253                           fsr2h	equ	0xFDA
  4254                           fsr2l	equ	0xFD9
  4255                           status	equ	0xFD8
  4256                           
  4257 ;; *************** function _InterruptINIT *****************
  4258 ;; Defined at:
  4259 ;;		line 207 in file "ecm.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;		None
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;		None
  4264 ;; Return value:  Size  Location     Type
  4265 ;;                  1    wreg      void 
  4266 ;; Registers used:
  4267 ;;		None
  4268 ;; Tracked objects:
  4269 ;;		On entry : 0/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4273 ;;      Params:         0       0       0       0
  4274 ;;      Locals:         0       0       0       0
  4275 ;;      Temps:          0       0       0       0
  4276 ;;      Totals:         0       0       0       0
  4277 ;;Total ram usage:        0 bytes
  4278 ;; Hardware stack levels used:    1
  4279 ;; Hardware stack levels required when called:    4
  4280 ;; This function calls:
  4281 ;;		Nothing
  4282 ;; This function is called by:
  4283 ;;		_main
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           	psect	text24
  4288  001472                     __ptext24:
  4289                           	opt stack 0
  4290  001472                     _InterruptINIT:
  4291                           	opt stack 26
  4292                           
  4293                           ;ecm.c: 209: RCONbits.IPEN=1;
  4294                           
  4295                           ;incstack = 0
  4296  001472  8ED0               	bsf	4048,7,c	;volatile
  4297                           
  4298                           ;ecm.c: 210: INTCONbits.GIEH = 1;
  4299  001474  8EF2               	bsf	intcon,7,c	;volatile
  4300                           
  4301                           ;ecm.c: 211: INTCONbits.GIEL = 1;
  4302  001476  8CF2               	bsf	intcon,6,c	;volatile
  4303                           
  4304                           ;ecm.c: 212: PIE1bits.RCIE = 1;
  4305  001478  8A9D               	bsf	3997,5,c	;volatile
  4306  00147A  0012               	return		;funcret
  4307  00147C                     __end_of_InterruptINIT:
  4308                           	opt stack 0
  4309                           tblptru	equ	0xFF8
  4310                           tblptrh	equ	0xFF7
  4311                           tblptrl	equ	0xFF6
  4312                           tablat	equ	0xFF5
  4313                           prodh	equ	0xFF4
  4314                           prodl	equ	0xFF3
  4315                           intcon	equ	0xFF2
  4316                           postinc0	equ	0xFEE
  4317                           wreg	equ	0xFE8
  4318                           indf2	equ	0xFDF
  4319                           postinc2	equ	0xFDE
  4320                           postdec2	equ	0xFDD
  4321                           fsr2h	equ	0xFDA
  4322                           fsr2l	equ	0xFD9
  4323                           status	equ	0xFD8
  4324                           
  4325 ;; *************** function _Init *****************
  4326 ;; Defined at:
  4327 ;;		line 163 in file "ecm.c"
  4328 ;; Parameters:    Size  Location     Type
  4329 ;;		None
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;		None
  4332 ;; Return value:  Size  Location     Type
  4333 ;;                  1    wreg      void 
  4334 ;; Registers used:
  4335 ;;		wreg, status,2
  4336 ;; Tracked objects:
  4337 ;;		On entry : 0/0
  4338 ;;		On exit  : 0/0
  4339 ;;		Unchanged: 0/0
  4340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4341 ;;      Params:         0       0       0       0
  4342 ;;      Locals:         0       0       0       0
  4343 ;;      Temps:          0       0       0       0
  4344 ;;      Totals:         0       0       0       0
  4345 ;;Total ram usage:        0 bytes
  4346 ;; Hardware stack levels used:    1
  4347 ;; Hardware stack levels required when called:    4
  4348 ;; This function calls:
  4349 ;;		Nothing
  4350 ;; This function is called by:
  4351 ;;		_main
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           	psect	text25
  4356  0013C0                     __ptext25:
  4357                           	opt stack 0
  4358  0013C0                     _Init:
  4359                           	opt stack 26
  4360                           
  4361                           ;ecm.c: 164: LATC = 0;
  4362                           
  4363                           ;incstack = 0
  4364  0013C0  0E00               	movlw	0
  4365  0013C2  6E8B               	movwf	3979,c	;volatile
  4366                           
  4367                           ;ecm.c: 165: TRISCbits.RC7 = 1;
  4368  0013C4  8E94               	bsf	3988,7,c	;volatile
  4369                           
  4370                           ;ecm.c: 166: OSCCON = 0b11110010;
  4371  0013C6  0EF2               	movlw	242
  4372  0013C8  6ED3               	movwf	4051,c	;volatile
  4373  0013CA  A4D3               	btfss	4051,2,c	;volatile
  4374  0013CC  D7FE               	goto	l242
  4375                           
  4376                           ;ecm.c: 168: SPBRG = 206;
  4377  0013CE  0ECE               	movlw	206
  4378  0013D0  6EAF               	movwf	4015,c	;volatile
  4379                           
  4380                           ;ecm.c: 169: SPBRGH = 0;
  4381  0013D2  0E00               	movlw	0
  4382  0013D4  6EB0               	movwf	4016,c	;volatile
  4383                           
  4384                           ;ecm.c: 170: BAUDCONbits.BRG16 = 1;
  4385  0013D6  86AA               	bsf	4010,3,c	;volatile
  4386                           
  4387                           ;ecm.c: 171: TXSTAbits.BRGH = 1;
  4388  0013D8  84AC               	bsf	4012,2,c	;volatile
  4389                           
  4390                           ;ecm.c: 172: RCSTAbits.CREN = 1;
  4391  0013DA  88AB               	bsf	4011,4,c	;volatile
  4392                           
  4393                           ;ecm.c: 173: RCSTAbits.SPEN = 1;
  4394  0013DC  8EAB               	bsf	4011,7,c	;volatile
  4395                           
  4396                           ;ecm.c: 174: TXSTAbits.TXEN = 1;
  4397  0013DE  8AAC               	bsf	4012,5,c	;volatile
  4398  0013E0  0012               	return		;funcret
  4399  0013E2                     __end_of_Init:
  4400                           	opt stack 0
  4401                           tblptru	equ	0xFF8
  4402                           tblptrh	equ	0xFF7
  4403                           tblptrl	equ	0xFF6
  4404                           tablat	equ	0xFF5
  4405                           prodh	equ	0xFF4
  4406                           prodl	equ	0xFF3
  4407                           intcon	equ	0xFF2
  4408                           postinc0	equ	0xFEE
  4409                           wreg	equ	0xFE8
  4410                           indf2	equ	0xFDF
  4411                           postinc2	equ	0xFDE
  4412                           postdec2	equ	0xFDD
  4413                           fsr2h	equ	0xFDA
  4414                           fsr2l	equ	0xFD9
  4415                           status	equ	0xFD8
  4416                           
  4417 ;; *************** function _IR_Init *****************
  4418 ;; Defined at:
  4419 ;;		line 12 in file "ecm.c"
  4420 ;; Parameters:    Size  Location     Type
  4421 ;;		None
  4422 ;; Auto vars:     Size  Location     Type
  4423 ;;		None
  4424 ;; Return value:  Size  Location     Type
  4425 ;;                  1    wreg      void 
  4426 ;; Registers used:
  4427 ;;		wreg, status,2
  4428 ;; Tracked objects:
  4429 ;;		On entry : 0/0
  4430 ;;		On exit  : 0/0
  4431 ;;		Unchanged: 0/0
  4432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4433 ;;      Params:         0       0       0       0
  4434 ;;      Locals:         0       0       0       0
  4435 ;;      Temps:          0       0       0       0
  4436 ;;      Totals:         0       0       0       0
  4437 ;;Total ram usage:        0 bytes
  4438 ;; Hardware stack levels used:    1
  4439 ;; Hardware stack levels required when called:    4
  4440 ;; This function calls:
  4441 ;;		Nothing
  4442 ;; This function is called by:
  4443 ;;		_main
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           	psect	text26
  4448  00143C                     __ptext26:
  4449                           	opt stack 0
  4450  00143C                     _IR_Init:
  4451                           	opt stack 26
  4452                           
  4453                           ;ecm.c: 13: LATA = 0;
  4454                           
  4455                           ;incstack = 0
  4456  00143C  0E00               	movlw	0
  4457  00143E  6E89               	movwf	3977,c	;volatile
  4458                           
  4459                           ;ecm.c: 14: TRISA = 0b00001100;
  4460  001440  0E0C               	movlw	12
  4461  001442  6E92               	movwf	3986,c	;volatile
  4462                           
  4463                           ;ecm.c: 15: CAP1CON = 0b01000110;
  4464  001444  0E46               	movlw	70
  4465  001446  6E63               	movwf	3939,c	;volatile
  4466                           
  4467                           ;ecm.c: 16: CAP2CON = 0b01000110;
  4468  001448  0E46               	movlw	70
  4469  00144A  6E62               	movwf	3938,c	;volatile
  4470                           
  4471                           ;ecm.c: 17: T5CON = 0b00001001;
  4472  00144C  0E09               	movlw	9
  4473  00144E  6EB7               	movwf	4023,c	;volatile
  4474                           
  4475                           ;ecm.c: 18: DFLTCON = 0b00011000;
  4476  001450  0E18               	movlw	24
  4477  001452  6E60               	movwf	3936,c	;volatile
  4478  001454  0012               	return		;funcret
  4479  001456                     __end_of_IR_Init:
  4480                           	opt stack 0
  4481                           tblptru	equ	0xFF8
  4482                           tblptrh	equ	0xFF7
  4483                           tblptrl	equ	0xFF6
  4484                           tablat	equ	0xFF5
  4485                           prodh	equ	0xFF4
  4486                           prodl	equ	0xFF3
  4487                           intcon	equ	0xFF2
  4488                           postinc0	equ	0xFEE
  4489                           wreg	equ	0xFE8
  4490                           indf2	equ	0xFDF
  4491                           postinc2	equ	0xFDE
  4492                           postdec2	equ	0xFDD
  4493                           fsr2h	equ	0xFDA
  4494                           fsr2l	equ	0xFD9
  4495                           status	equ	0xFD8
  4496                           
  4497 ;; *************** function _FindIR *****************
  4498 ;; Defined at:
  4499 ;;		line 21 in file "ecm.c"
  4500 ;; Parameters:    Size  Location     Type
  4501 ;;  L_IR            2   33[COMRAM] PTR unsigned int 
  4502 ;;		 -> main@LeftIR(2), 
  4503 ;;  R_IR            2   35[COMRAM] PTR unsigned int 
  4504 ;;		 -> main@RightIR(2), 
  4505 ;; Auto vars:     Size  Location     Type
  4506 ;;		None
  4507 ;; Return value:  Size  Location     Type
  4508 ;;                  1    wreg      void 
  4509 ;; Registers used:
  4510 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4511 ;; Tracked objects:
  4512 ;;		On entry : 0/0
  4513 ;;		On exit  : 0/0
  4514 ;;		Unchanged: 0/0
  4515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4516 ;;      Params:         4       0       0       0
  4517 ;;      Locals:         0       0       0       0
  4518 ;;      Temps:          2       0       0       0
  4519 ;;      Totals:         6       0       0       0
  4520 ;;Total ram usage:        6 bytes
  4521 ;; Hardware stack levels used:    1
  4522 ;; Hardware stack levels required when called:    4
  4523 ;; This function calls:
  4524 ;;		Nothing
  4525 ;; This function is called by:
  4526 ;;		_main
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	text27
  4531  0010DE                     __ptext27:
  4532                           	opt stack 0
  4533  0010DE                     _FindIR:
  4534                           	opt stack 26
  4535                           
  4536                           ;ecm.c: 22: *L_IR = ((CAP1BUFH << 8) | CAP1BUFL);
  4537                           
  4538                           ;incstack = 0
  4539  0010DE  5068               	movf	3944,w,c	;volatile
  4540  0010E0  CF69 F026          	movff	3945,??_FindIR	;volatile
  4541  0010E4  6A27               	clrf	(??_FindIR+1)& (0+255),c
  4542  0010E6  C026  F027         	movff	??_FindIR,??_FindIR+1
  4543  0010EA  6A26               	clrf	??_FindIR,c
  4544  0010EC  1226               	iorwf	??_FindIR,f,c
  4545  0010EE  0E00               	movlw	0
  4546  0010F0  1227               	iorwf	??_FindIR+1,f,c
  4547  0010F2  C022  FFD9         	movff	FindIR@L_IR,fsr2l
  4548  0010F6  C023  FFDA         	movff	FindIR@L_IR+1,fsr2h
  4549  0010FA  C026  FFDE         	movff	??_FindIR,postinc2
  4550  0010FE  C027  FFDD         	movff	??_FindIR+1,postdec2
  4551                           
  4552                           ;ecm.c: 23: *R_IR = ((CAP2BUFH << 8) | CAP2BUFL);
  4553  001102  5066               	movf	3942,w,c	;volatile
  4554  001104  CF67 F026          	movff	3943,??_FindIR	;volatile
  4555  001108  6A27               	clrf	(??_FindIR+1)& (0+255),c
  4556  00110A  C026  F027         	movff	??_FindIR,??_FindIR+1
  4557  00110E  6A26               	clrf	??_FindIR,c
  4558  001110  1226               	iorwf	??_FindIR,f,c
  4559  001112  0E00               	movlw	0
  4560  001114  1227               	iorwf	??_FindIR+1,f,c
  4561  001116  C024  FFD9         	movff	FindIR@R_IR,fsr2l
  4562  00111A  C025  FFDA         	movff	FindIR@R_IR+1,fsr2h
  4563  00111E  C026  FFDE         	movff	??_FindIR,postinc2
  4564  001122  C027  FFDD         	movff	??_FindIR+1,postdec2
  4565  001126  0012               	return		;funcret
  4566  001128                     __end_of_FindIR:
  4567                           	opt stack 0
  4568                           tblptru	equ	0xFF8
  4569                           tblptrh	equ	0xFF7
  4570                           tblptrl	equ	0xFF6
  4571                           tablat	equ	0xFF5
  4572                           prodh	equ	0xFF4
  4573                           prodl	equ	0xFF3
  4574                           intcon	equ	0xFF2
  4575                           postinc0	equ	0xFEE
  4576                           wreg	equ	0xFE8
  4577                           indf2	equ	0xFDF
  4578                           postinc2	equ	0xFDE
  4579                           postdec2	equ	0xFDD
  4580                           fsr2h	equ	0xFDA
  4581                           fsr2l	equ	0xFD9
  4582                           status	equ	0xFD8
  4583                           
  4584 ;; *************** function _InterruptHandlerHigh *****************
  4585 ;; Defined at:
  4586 ;;		line 183 in file "ecm.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;		None
  4589 ;; Auto vars:     Size  Location     Type
  4590 ;;  read_counter    2   30[COMRAM] int 
  4591 ;;  readIn          1   32[COMRAM] unsigned char 
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  1    wreg      void 
  4594 ;; Registers used:
  4595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4601 ;;      Params:         0       0       0       0
  4602 ;;      Locals:         3       0       0       0
  4603 ;;      Temps:          4       0       0       0
  4604 ;;      Totals:         7       0       0       0
  4605 ;;Total ram usage:        7 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; Hardware stack levels required when called:    3
  4608 ;; This function calls:
  4609 ;;		_getCharSerial
  4610 ;;		i2_SendLCD
  4611 ;;		i2_stop
  4612 ;; This function is called by:
  4613 ;;		Interrupt level 2
  4614 ;; This function uses a non-reentrant model
  4615 ;;
  4616                           
  4617                           	psect	intcode
  4618  000008                     __pintcode:
  4619                           	opt stack 0
  4620  000008                     _InterruptHandlerHigh:
  4621                           	opt stack 23
  4622                           
  4623                           ;incstack = 0
  4624  000008  823E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4625  00000A  CFD9 F01B          	movff	fsr2l,??_InterruptHandlerHigh
  4626  00000E  CFDA F01C          	movff	fsr2h,??_InterruptHandlerHigh+1
  4627  000012  CFF3 F01D          	movff	prodl,??_InterruptHandlerHigh+2
  4628  000016  CFF4 F01E          	movff	prodh,??_InterruptHandlerHigh+3
  4629                           
  4630                           ;ecm.c: 185: if(PIR1bits.RCIF==1)
  4631  00001A  AA9E               	btfss	3998,5,c	;volatile
  4632  00001C  D031               	goto	i2l257
  4633                           
  4634                           ;ecm.c: 186: {;ecm.c: 188: unsigned char readIn=0;
  4635  00001E  0E00               	movlw	0
  4636  000020  6E21               	movwf	InterruptHandlerHigh@readIn,c
  4637                           
  4638                           ;ecm.c: 189: int read_counter=0;
  4639  000022  0E00               	movlw	0
  4640  000024  6E20               	movwf	InterruptHandlerHigh@read_counter+1,c
  4641  000026  0E00               	movlw	0
  4642  000028  6E1F               	movwf	InterruptHandlerHigh@read_counter,c
  4643                           
  4644                           ;ecm.c: 190: readIn = getCharSerial();
  4645  00002A  EC3E  F00A         	call	_getCharSerial	;wreg free
  4646  00002E  6E21               	movwf	InterruptHandlerHigh@readIn,c
  4647                           
  4648                           ;ecm.c: 192: if (readIn == 0x02) {
  4649  000030  0E02               	movlw	2
  4650  000032  1821               	xorwf	InterruptHandlerHigh@readIn,w,c
  4651  000034  B4D8               	btfsc	status,2,c
  4652  000036  D013               	goto	i2l261
  4653  000038  D016               	goto	i2u164_40
  4654  00003A                     
  4655                           ;ecm.c: 196: readIn = getCharSerial();
  4656  00003A  EC3E  F00A         	call	_getCharSerial	;wreg free
  4657  00003E  6E21               	movwf	InterruptHandlerHigh@readIn,c
  4658                           
  4659                           ;ecm.c: 197: if (read_counter <12){
  4660  000040  BE20               	btfsc	InterruptHandlerHigh@read_counter+1,7,c
  4661  000042  D006               	goto	i2u163_40
  4662  000044  5020               	movf	InterruptHandlerHigh@read_counter+1,w,c
  4663  000046  E10B               	bnz	i2l2861
  4664  000048  0E0C               	movlw	12
  4665  00004A  5C1F               	subwf	InterruptHandlerHigh@read_counter,w,c
  4666  00004C  B0D8               	btfsc	status,0,c
  4667  00004E  D007               	goto	i2l261
  4668  000050                     i2u163_40:
  4669                           
  4670                           ;ecm.c: 198: SendLCD(readIn, 1);
  4671  000050  0E01               	movlw	1
  4672  000052  6E05               	movwf	i2SendLCD@type,c
  4673  000054  5021               	movf	InterruptHandlerHigh@readIn,w,c
  4674  000056  EC93  F009         	call	i2_SendLCD
  4675                           
  4676                           ;ecm.c: 199: read_counter++;
  4677  00005A  4A1F               	infsnz	InterruptHandlerHigh@read_counter,f,c
  4678  00005C  2A20               	incf	InterruptHandlerHigh@read_counter+1,f,c
  4679  00005E                     i2l261:
  4680  00005E                     i2l2861:
  4681  00005E  0E03               	movlw	3
  4682  000060  1821               	xorwf	InterruptHandlerHigh@readIn,w,c
  4683  000062  A4D8               	btfss	status,2,c
  4684  000064  D7EA               	goto	i2l260
  4685  000066                     i2u164_40:
  4686                           
  4687                           ;ecm.c: 200: };ecm.c: 201: };ecm.c: 202: };ecm.c: 203: stop(&motorL, &motorR);
  4688  000066  0E35               	movlw	low _motorL
  4689  000068  6E16               	movwf	i2stop@m_L,c
  4690  00006A  0E00               	movlw	high _motorL
  4691  00006C  6E17               	movwf	i2stop@m_L+1,c
  4692  00006E  0E2C               	movlw	low _motorR
  4693  000070  6E18               	movwf	i2stop@m_R,c
  4694  000072  0E00               	movlw	high _motorR
  4695  000074  6E19               	movwf	i2stop@m_R+1,c
  4696  000076  ECC6  F007         	call	i2_stop	;wreg free
  4697                           
  4698                           ;ecm.c: 204: read=1;
  4699  00007A  0E01               	movlw	1
  4700  00007C  0100               	movlb	0	; () banked
  4701  00007E  6FC6               	movwf	_read& (0+255),b
  4702  000080                     i2l257:
  4703                           
  4704                           ; BSR set to: 0
  4705  000080  C01E  FFF4         	movff	??_InterruptHandlerHigh+3,prodh
  4706  000084  C01D  FFF3         	movff	??_InterruptHandlerHigh+2,prodl
  4707  000088  C01C  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  4708  00008C  C01B  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  4709  000090  923E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4710  000092  0011               	retfie		f
  4711  000094                     __end_of_InterruptHandlerHigh:
  4712                           	opt stack 0
  4713                           tblptru	equ	0xFF8
  4714                           tblptrh	equ	0xFF7
  4715                           tblptrl	equ	0xFF6
  4716                           tablat	equ	0xFF5
  4717                           prodh	equ	0xFF4
  4718                           prodl	equ	0xFF3
  4719                           intcon	equ	0xFF2
  4720                           postinc0	equ	0xFEE
  4721                           wreg	equ	0xFE8
  4722                           indf2	equ	0xFDF
  4723                           postinc2	equ	0xFDE
  4724                           postdec2	equ	0xFDD
  4725                           fsr2h	equ	0xFDA
  4726                           fsr2l	equ	0xFD9
  4727                           status	equ	0xFD8
  4728                           
  4729 ;; *************** function i2_stop *****************
  4730 ;; Defined at:
  4731 ;;		line 65 in file "MotorControl.c"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;  m_L             2   21[COMRAM] PTR struct DC_motor
  4734 ;;		 -> motorL(9), 
  4735 ;;  m_R             2   23[COMRAM] PTR struct DC_motor
  4736 ;;		 -> motorR(9), 
  4737 ;; Auto vars:     Size  Location     Type
  4738 ;;		None
  4739 ;; Return value:  Size  Location     Type
  4740 ;;                  1    wreg      void 
  4741 ;; Registers used:
  4742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4743 ;; Tracked objects:
  4744 ;;		On entry : 0/0
  4745 ;;		On exit  : 0/0
  4746 ;;		Unchanged: 0/0
  4747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4748 ;;      Params:         4       0       0       0
  4749 ;;      Locals:         0       0       0       0
  4750 ;;      Temps:          1       0       0       0
  4751 ;;      Totals:         5       0       0       0
  4752 ;;Total ram usage:        5 bytes
  4753 ;; Hardware stack levels used:    1
  4754 ;; Hardware stack levels required when called:    2
  4755 ;; This function calls:
  4756 ;;		i2_setMotorPWM
  4757 ;; This function is called by:
  4758 ;;		_InterruptHandlerHigh
  4759 ;; This function uses a non-reentrant model
  4760 ;;
  4761                           
  4762                           	psect	text29
  4763  000F8C                     __ptext29:
  4764                           	opt stack 0
  4765  000F8C                     i2_stop:
  4766                           	opt stack 23
  4767                           
  4768                           ;MotorControl.c: 67: motorL.direction = 1;
  4769                           
  4770                           ;incstack = 0
  4771  000F8C  0E01               	movlw	1
  4772  000F8E  6E36               	movwf	_motorL+1,c
  4773                           
  4774                           ;MotorControl.c: 68: motorL.power = 0;
  4775  000F90  0E00               	movlw	0
  4776  000F92  6E35               	movwf	_motorL,c
  4777                           
  4778                           ;MotorControl.c: 69: setMotorPWM(m_L);
  4779  000F94  C016  F00F         	movff	i2stop@m_L,i2setMotorPWM@m
  4780  000F98  C017  F010         	movff	i2stop@m_L+1,i2setMotorPWM@m+1
  4781  000F9C  EC4A  F005         	call	i2_setMotorPWM	;wreg free
  4782                           
  4783                           ;MotorControl.c: 70: motorR.direction = 1;
  4784  000FA0  0E01               	movlw	1
  4785  000FA2  6E2D               	movwf	_motorR+1,c
  4786                           
  4787                           ;MotorControl.c: 71: motorR.power = 0;
  4788  000FA4  0E00               	movlw	0
  4789  000FA6  6E2C               	movwf	_motorR,c
  4790                           
  4791                           ;MotorControl.c: 72: setMotorPWM(m_R);
  4792  000FA8  C018  F00F         	movff	i2stop@m_R,i2setMotorPWM@m
  4793  000FAC  C019  F010         	movff	i2stop@m_R+1,i2setMotorPWM@m+1
  4794  000FB0  EC4A  F005         	call	i2_setMotorPWM	;wreg free
  4795                           
  4796                           ;MotorControl.c: 73: _delay((unsigned long)((50)*(8000000/4000.0)));
  4797  000FB4  0E82               	movlw	130
  4798  000FB6  6E1A               	movwf	??i2_stop& (0+255),c
  4799  000FB8  0EDE               	movlw	222
  4800  000FBA                     i2u199_47:
  4801  000FBA  2EE8               	decfsz	wreg,f,c
  4802  000FBC  D7FE               	bra	i2u199_47
  4803  000FBE  2E1A               	decfsz	??i2_stop& (0+255),f,c
  4804  000FC0  D7FC               	bra	i2u199_47
  4805                           
  4806                           ;MotorControl.c: 74: motorL.direction = 1;
  4807  000FC2  0E01               	movlw	1
  4808  000FC4  6E36               	movwf	_motorL+1,c
  4809                           
  4810                           ;MotorControl.c: 75: motorL.power = 0;
  4811  000FC6  0E00               	movlw	0
  4812  000FC8  6E35               	movwf	_motorL,c
  4813                           
  4814                           ;MotorControl.c: 76: setMotorPWM(m_L);
  4815  000FCA  C016  F00F         	movff	i2stop@m_L,i2setMotorPWM@m
  4816  000FCE  C017  F010         	movff	i2stop@m_L+1,i2setMotorPWM@m+1
  4817  000FD2  EC4A  F005         	call	i2_setMotorPWM	;wreg free
  4818                           
  4819                           ;MotorControl.c: 77: motorR.direction = 1;
  4820  000FD6  0E01               	movlw	1
  4821  000FD8  6E2D               	movwf	_motorR+1,c
  4822                           
  4823                           ;MotorControl.c: 78: motorR.power = 0;
  4824  000FDA  0E00               	movlw	0
  4825  000FDC  6E2C               	movwf	_motorR,c
  4826                           
  4827                           ;MotorControl.c: 79: setMotorPWM(m_R);
  4828  000FDE  C018  F00F         	movff	i2stop@m_R,i2setMotorPWM@m
  4829  000FE2  C019  F010         	movff	i2stop@m_R+1,i2setMotorPWM@m+1
  4830  000FE6  EC4A  F005         	call	i2_setMotorPWM	;wreg free
  4831  000FEA  0012               	return		;funcret
  4832  000FEC                     __end_ofi2_stop:
  4833                           	opt stack 0
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           prodh	equ	0xFF4
  4839                           prodl	equ	0xFF3
  4840                           intcon	equ	0xFF2
  4841                           postinc0	equ	0xFEE
  4842                           wreg	equ	0xFE8
  4843                           indf2	equ	0xFDF
  4844                           postinc2	equ	0xFDE
  4845                           postdec2	equ	0xFDD
  4846                           fsr2h	equ	0xFDA
  4847                           fsr2l	equ	0xFD9
  4848                           status	equ	0xFD8
  4849                           
  4850 ;; *************** function i2_setMotorPWM *****************
  4851 ;; Defined at:
  4852 ;;		line 33 in file "MotorControl.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;  m               2   14[COMRAM] PTR struct DC_motor
  4855 ;;		 -> motorR(9), motorL(9), 
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;  setMotorPWM     2   19[COMRAM] int 
  4858 ;; Return value:  Size  Location     Type
  4859 ;;                  1    wreg      void 
  4860 ;; Registers used:
  4861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4867 ;;      Params:         2       0       0       0
  4868 ;;      Locals:         2       0       0       0
  4869 ;;      Temps:          3       0       0       0
  4870 ;;      Totals:         7       0       0       0
  4871 ;;Total ram usage:        7 bytes
  4872 ;; Hardware stack levels used:    1
  4873 ;; Hardware stack levels required when called:    1
  4874 ;; This function calls:
  4875 ;;		i2___awdiv
  4876 ;;		i2___wmul
  4877 ;; This function is called by:
  4878 ;;		i2_stop
  4879 ;; This function uses a non-reentrant model
  4880 ;;
  4881                           
  4882                           	psect	text30
  4883  000A94                     __ptext30:
  4884                           	opt stack 0
  4885  000A94                     i2_setMotorPWM:
  4886                           	opt stack 23
  4887                           
  4888                           ;MotorControl.c: 35: int PWMduty;;MotorControl.c: 36: if (m->direction){
  4889                           
  4890                           ;incstack = 0
  4891  000A94  EE20 F001          	lfsr	2,1
  4892  000A98  500F               	movf	i2setMotorPWM@m,w,c
  4893  000A9A  26D9               	addwf	fsr2l,f,c
  4894  000A9C  5010               	movf	i2setMotorPWM@m+1,w,c
  4895  000A9E  22DA               	addwfc	fsr2h,f,c
  4896  000AA0  50DF               	movf	indf2,w,c
  4897  000AA2  B4D8               	btfsc	status,2,c
  4898  000AA4  D034               	goto	i2l32
  4899                           
  4900                           ;MotorControl.c: 38: PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  4901  000AA6  EE20 F007          	lfsr	2,7
  4902  000AAA  500F               	movf	i2setMotorPWM@m,w,c
  4903  000AAC  26D9               	addwf	fsr2l,f,c
  4904  000AAE  5010               	movf	i2setMotorPWM@m+1,w,c
  4905  000AB0  22DA               	addwfc	fsr2h,f,c
  4906  000AB2  CFDE F011          	movff	postinc2,??i2_setMotorPWM
  4907  000AB6  CFDD F012          	movff	postdec2,??i2_setMotorPWM+1
  4908  000ABA  C00F  FFD9         	movff	i2setMotorPWM@m,fsr2l
  4909  000ABE  C010  FFDA         	movff	i2setMotorPWM@m+1,fsr2h
  4910  000AC2  50DF               	movf	indf2,w,c
  4911  000AC4  6E13               	movwf	(??i2_setMotorPWM+2)& (0+255),c
  4912  000AC6  5013               	movf	??i2_setMotorPWM+2,w,c
  4913  000AC8  6E01               	movwf	i2___wmul@multiplier,c
  4914  000ACA  6A02               	clrf	i2___wmul@multiplier+1,c
  4915  000ACC  EE20 F007          	lfsr	2,7
  4916  000AD0  500F               	movf	i2setMotorPWM@m,w,c
  4917  000AD2  26D9               	addwf	fsr2l,f,c
  4918  000AD4  5010               	movf	i2setMotorPWM@m+1,w,c
  4919  000AD6  22DA               	addwfc	fsr2h,f,c
  4920  000AD8  CFDE F003          	movff	postinc2,i2___wmul@multiplicand
  4921  000ADC  CFDD F004          	movff	postdec2,i2___wmul@multiplicand+1
  4922  000AE0  ECCD  F009         	call	i2___wmul	;wreg free
  4923  000AE4  C001  F007         	movff	?i2___wmul,i2___awdiv@dividend
  4924  000AE8  C002  F008         	movff	?i2___wmul+1,i2___awdiv@dividend+1
  4925  000AEC  0E00               	movlw	0
  4926  000AEE  6E0A               	movwf	i2___awdiv@divisor+1,c
  4927  000AF0  0E64               	movlw	100
  4928  000AF2  6E09               	movwf	i2___awdiv@divisor,c
  4929  000AF4  EC52  F007         	call	i2___awdiv	;wreg free
  4930  000AF8  1E07               	comf	?i2___awdiv,f,c
  4931  000AFA  1E08               	comf	?i2___awdiv+1,f,c
  4932  000AFC  4A07               	infsnz	?i2___awdiv,f,c
  4933  000AFE  2A08               	incf	?i2___awdiv+1,f,c
  4934  000B00  5011               	movf	??i2_setMotorPWM,w,c
  4935  000B02  2407               	addwf	?i2___awdiv,w,c
  4936  000B04  6E14               	movwf	i2setMotorPWM@PWMduty,c
  4937  000B06  5012               	movf	??i2_setMotorPWM+1,w,c
  4938  000B08  2008               	addwfc	?i2___awdiv+1,w,c
  4939  000B0A  6E15               	movwf	i2setMotorPWM@PWMduty+1,c
  4940                           
  4941                           ;MotorControl.c: 39: }
  4942  000B0C  D023               	goto	i2l33
  4943  000B0E                     i2l32:
  4944                           
  4945                           ;MotorControl.c: 40: else {;MotorControl.c: 42: PWMduty=((int)(m->power)*(m->PWMperiod))
      +                          /100;
  4946  000B0E  C00F  FFD9         	movff	i2setMotorPWM@m,fsr2l
  4947  000B12  C010  FFDA         	movff	i2setMotorPWM@m+1,fsr2h
  4948  000B16  50DF               	movf	indf2,w,c
  4949  000B18  6E11               	movwf	??i2_setMotorPWM& (0+255),c
  4950  000B1A  5011               	movf	??i2_setMotorPWM,w,c
  4951  000B1C  6E01               	movwf	i2___wmul@multiplier,c
  4952  000B1E  6A02               	clrf	i2___wmul@multiplier+1,c
  4953  000B20  EE20 F007          	lfsr	2,7
  4954  000B24  500F               	movf	i2setMotorPWM@m,w,c
  4955  000B26  26D9               	addwf	fsr2l,f,c
  4956  000B28  5010               	movf	i2setMotorPWM@m+1,w,c
  4957  000B2A  22DA               	addwfc	fsr2h,f,c
  4958  000B2C  CFDE F003          	movff	postinc2,i2___wmul@multiplicand
  4959  000B30  CFDD F004          	movff	postdec2,i2___wmul@multiplicand+1
  4960  000B34  ECCD  F009         	call	i2___wmul	;wreg free
  4961  000B38  C001  F007         	movff	?i2___wmul,i2___awdiv@dividend
  4962  000B3C  C002  F008         	movff	?i2___wmul+1,i2___awdiv@dividend+1
  4963  000B40  0E00               	movlw	0
  4964  000B42  6E0A               	movwf	i2___awdiv@divisor+1,c
  4965  000B44  0E64               	movlw	100
  4966  000B46  6E09               	movwf	i2___awdiv@divisor,c
  4967  000B48  EC52  F007         	call	i2___awdiv	;wreg free
  4968  000B4C  C007  F014         	movff	?i2___awdiv,i2setMotorPWM@PWMduty
  4969  000B50  C008  F015         	movff	?i2___awdiv+1,i2setMotorPWM@PWMduty+1
  4970  000B54                     i2l33:
  4971                           
  4972                           ;MotorControl.c: 43: };MotorControl.c: 44: PWMduty = (PWMduty << 2);
  4973  000B54  C014  F011         	movff	i2setMotorPWM@PWMduty,??i2_setMotorPWM
  4974  000B58  C015  F012         	movff	i2setMotorPWM@PWMduty+1,??i2_setMotorPWM+1
  4975  000B5C  90D8               	bcf	status,0,c
  4976  000B5E  3611               	rlcf	??i2_setMotorPWM,f,c
  4977  000B60  3612               	rlcf	??i2_setMotorPWM+1,f,c
  4978  000B62  90D8               	bcf	status,0,c
  4979  000B64  3611               	rlcf	??i2_setMotorPWM,f,c
  4980  000B66  3612               	rlcf	??i2_setMotorPWM+1,f,c
  4981  000B68  C011  F014         	movff	??i2_setMotorPWM,i2setMotorPWM@PWMduty
  4982  000B6C  C012  F015         	movff	??i2_setMotorPWM+1,i2setMotorPWM@PWMduty+1
  4983                           
  4984                           ;MotorControl.c: 45: *(m->dutyLowByte) = PWMduty & 0xFF;
  4985  000B70  EE20 F002          	lfsr	2,2
  4986  000B74  500F               	movf	i2setMotorPWM@m,w,c
  4987  000B76  26D9               	addwf	fsr2l,f,c
  4988  000B78  5010               	movf	i2setMotorPWM@m+1,w,c
  4989  000B7A  22DA               	addwfc	fsr2h,f,c
  4990  000B7C  CFDE F011          	movff	postinc2,??i2_setMotorPWM
  4991  000B80  CFDD F012          	movff	postdec2,??i2_setMotorPWM+1
  4992  000B84  C011  FFD9         	movff	??i2_setMotorPWM,fsr2l
  4993  000B88  C012  FFDA         	movff	??i2_setMotorPWM+1,fsr2h
  4994  000B8C  C014  FFDF         	movff	i2setMotorPWM@PWMduty,indf2
  4995                           
  4996                           ;MotorControl.c: 46: *(m->dutyHighByte) = (PWMduty >> 8) & 0x3F;
  4997  000B90  EE20 F004          	lfsr	2,4
  4998  000B94  500F               	movf	i2setMotorPWM@m,w,c
  4999  000B96  26D9               	addwf	fsr2l,f,c
  5000  000B98  5010               	movf	i2setMotorPWM@m+1,w,c
  5001  000B9A  22DA               	addwfc	fsr2h,f,c
  5002  000B9C  CFDE F011          	movff	postinc2,??i2_setMotorPWM
  5003  000BA0  CFDD F012          	movff	postdec2,??i2_setMotorPWM+1
  5004  000BA4  C011  FFD9         	movff	??i2_setMotorPWM,fsr2l
  5005  000BA8  C012  FFDA         	movff	??i2_setMotorPWM+1,fsr2h
  5006  000BAC  5015               	movf	i2setMotorPWM@PWMduty+1,w,c
  5007  000BAE  0B3F               	andlw	63
  5008  000BB0  6EDF               	movwf	indf2,c
  5009                           
  5010                           ;MotorControl.c: 48: if (m->direction){
  5011  000BB2  EE20 F001          	lfsr	2,1
  5012  000BB6  500F               	movf	i2setMotorPWM@m,w,c
  5013  000BB8  26D9               	addwf	fsr2l,f,c
  5014  000BBA  5010               	movf	i2setMotorPWM@m+1,w,c
  5015  000BBC  22DA               	addwfc	fsr2h,f,c
  5016  000BBE  50DF               	movf	indf2,w,c
  5017  000BC0  B4D8               	btfsc	status,2,c
  5018  000BC2  D014               	goto	i2l34
  5019                           
  5020                           ;MotorControl.c: 49: LATB=LATB | (1<<(m->dir_pin));
  5021  000BC4  EE20 F006          	lfsr	2,6
  5022  000BC8  500F               	movf	i2setMotorPWM@m,w,c
  5023  000BCA  26D9               	addwf	fsr2l,f,c
  5024  000BCC  5010               	movf	i2setMotorPWM@m+1,w,c
  5025  000BCE  22DA               	addwfc	fsr2h,f,c
  5026  000BD0  50DF               	movf	indf2,w,c
  5027  000BD2  6E11               	movwf	??i2_setMotorPWM& (0+255),c
  5028  000BD4  0E01               	movlw	1
  5029  000BD6  6E12               	movwf	(??i2_setMotorPWM+1)& (0+255),c
  5030  000BD8  2A11               	incf	??i2_setMotorPWM,f,c
  5031  000BDA  D002               	goto	i2u142_44
  5032  000BDC                     i2u142_45:
  5033  000BDC  90D8               	bcf	status,0,c
  5034  000BDE  3612               	rlcf	??i2_setMotorPWM+1,f,c
  5035  000BE0                     i2u142_44:
  5036  000BE0  2E11               	decfsz	??i2_setMotorPWM,f,c
  5037  000BE2  D7FC               	goto	i2u142_45
  5038  000BE4  5012               	movf	??i2_setMotorPWM+1,w,c
  5039  000BE6  108A               	iorwf	3978,w,c	;volatile
  5040  000BE8  6E8A               	movwf	3978,c	;volatile
  5041                           
  5042                           ;MotorControl.c: 50: } else {
  5043  000BEA  0012               	return	
  5044  000BEC                     i2l34:
  5045                           
  5046                           ;MotorControl.c: 51: LATB=LATB & (~(1<<(m->dir_pin)));
  5047  000BEC  EE20 F006          	lfsr	2,6
  5048  000BF0  500F               	movf	i2setMotorPWM@m,w,c
  5049  000BF2  26D9               	addwf	fsr2l,f,c
  5050  000BF4  5010               	movf	i2setMotorPWM@m+1,w,c
  5051  000BF6  22DA               	addwfc	fsr2h,f,c
  5052  000BF8  50DF               	movf	indf2,w,c
  5053  000BFA  6E11               	movwf	??i2_setMotorPWM& (0+255),c
  5054  000BFC  0E01               	movlw	1
  5055  000BFE  6E12               	movwf	(??i2_setMotorPWM+1)& (0+255),c
  5056  000C00  2A11               	incf	??i2_setMotorPWM,f,c
  5057  000C02  D002               	goto	i2u143_44
  5058  000C04                     i2u143_45:
  5059  000C04  90D8               	bcf	status,0,c
  5060  000C06  3612               	rlcf	??i2_setMotorPWM+1,f,c
  5061  000C08                     i2u143_44:
  5062  000C08  2E11               	decfsz	??i2_setMotorPWM,f,c
  5063  000C0A  D7FC               	goto	i2u143_45
  5064  000C0C  5012               	movf	??i2_setMotorPWM+1,w,c
  5065  000C0E  0AFF               	xorlw	255
  5066  000C10  148A               	andwf	3978,w,c	;volatile
  5067  000C12  6E8A               	movwf	3978,c	;volatile
  5068  000C14  0012               	return	
  5069  000C16                     __end_ofi2_setMotorPWM:
  5070                           	opt stack 0
  5071                           tblptru	equ	0xFF8
  5072                           tblptrh	equ	0xFF7
  5073                           tblptrl	equ	0xFF6
  5074                           tablat	equ	0xFF5
  5075                           prodh	equ	0xFF4
  5076                           prodl	equ	0xFF3
  5077                           intcon	equ	0xFF2
  5078                           postinc0	equ	0xFEE
  5079                           wreg	equ	0xFE8
  5080                           indf2	equ	0xFDF
  5081                           postinc2	equ	0xFDE
  5082                           postdec2	equ	0xFDD
  5083                           fsr2h	equ	0xFDA
  5084                           fsr2l	equ	0xFD9
  5085                           status	equ	0xFD8
  5086                           
  5087 ;; *************** function i2___wmul *****************
  5088 ;; Defined at:
  5089 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  5090 ;; Parameters:    Size  Location     Type
  5091 ;;  multiplier      2    0[COMRAM] unsigned int 
  5092 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;  __wmul          2    4[COMRAM] unsigned int 
  5095 ;; Return value:  Size  Location     Type
  5096 ;;                  2    0[COMRAM] unsigned int 
  5097 ;; Registers used:
  5098 ;;		wreg, status,2, status,0, prodl, prodh
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5104 ;;      Params:         4       0       0       0
  5105 ;;      Locals:         2       0       0       0
  5106 ;;      Temps:          0       0       0       0
  5107 ;;      Totals:         6       0       0       0
  5108 ;;Total ram usage:        6 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; This function calls:
  5111 ;;		Nothing
  5112 ;; This function is called by:
  5113 ;;		i2_setMotorPWM
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           	psect	text31
  5118  00139A                     __ptext31:
  5119                           	opt stack 0
  5120  00139A                     i2___wmul:
  5121                           	opt stack 23
  5122                           
  5123                           ;incstack = 0
  5124  00139A  5001               	movf	i2___wmul@multiplier,w,c
  5125  00139C  0203               	mulwf	i2___wmul@multiplicand,c
  5126  00139E  CFF3 F005          	movff	prodl,i2___wmul@product
  5127  0013A2  CFF4 F006          	movff	prodh,i2___wmul@product+1
  5128  0013A6  5001               	movf	i2___wmul@multiplier,w,c
  5129  0013A8  0204               	mulwf	i2___wmul@multiplicand+1,c
  5130  0013AA  50F3               	movf	prodl,w,c
  5131  0013AC  2606               	addwf	i2___wmul@product+1,f,c
  5132  0013AE  5002               	movf	i2___wmul@multiplier+1,w,c
  5133  0013B0  0203               	mulwf	i2___wmul@multiplicand,c
  5134  0013B2  50F3               	movf	prodl,w,c
  5135  0013B4  2606               	addwf	i2___wmul@product+1,f,c
  5136  0013B6  C005  F001         	movff	i2___wmul@product,?i2___wmul
  5137  0013BA  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  5138  0013BE  0012               	return	
  5139  0013C0                     __end_ofi2___wmul:
  5140                           	opt stack 0
  5141                           tblptru	equ	0xFF8
  5142                           tblptrh	equ	0xFF7
  5143                           tblptrl	equ	0xFF6
  5144                           tablat	equ	0xFF5
  5145                           prodh	equ	0xFF4
  5146                           prodl	equ	0xFF3
  5147                           intcon	equ	0xFF2
  5148                           postinc0	equ	0xFEE
  5149                           wreg	equ	0xFE8
  5150                           indf2	equ	0xFDF
  5151                           postinc2	equ	0xFDE
  5152                           postdec2	equ	0xFDD
  5153                           fsr2h	equ	0xFDA
  5154                           fsr2l	equ	0xFD9
  5155                           status	equ	0xFD8
  5156                           
  5157 ;; *************** function i2___awdiv *****************
  5158 ;; Defined at:
  5159 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awdiv.c"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;  dividend        2    6[COMRAM] int 
  5162 ;;  divisor         2    8[COMRAM] int 
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;  __awdiv         2   12[COMRAM] int 
  5165 ;;  __awdiv         1   11[COMRAM] unsigned char 
  5166 ;;  __awdiv         1   10[COMRAM] unsigned char 
  5167 ;; Return value:  Size  Location     Type
  5168 ;;                  2    6[COMRAM] int 
  5169 ;; Registers used:
  5170 ;;		wreg, status,2, status,0
  5171 ;; Tracked objects:
  5172 ;;		On entry : 0/0
  5173 ;;		On exit  : 0/0
  5174 ;;		Unchanged: 0/0
  5175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5176 ;;      Params:         4       0       0       0
  5177 ;;      Locals:         4       0       0       0
  5178 ;;      Temps:          0       0       0       0
  5179 ;;      Totals:         8       0       0       0
  5180 ;;Total ram usage:        8 bytes
  5181 ;; Hardware stack levels used:    1
  5182 ;; This function calls:
  5183 ;;		Nothing
  5184 ;; This function is called by:
  5185 ;;		i2_setMotorPWM
  5186 ;; This function uses a non-reentrant model
  5187 ;;
  5188                           
  5189                           	psect	text32
  5190  000EA4                     __ptext32:
  5191                           	opt stack 0
  5192  000EA4                     i2___awdiv:
  5193                           	opt stack 23
  5194                           
  5195                           ;incstack = 0
  5196  000EA4  0E00               	movlw	0
  5197  000EA6  6E0C               	movwf	i2___awdiv@sign,c
  5198  000EA8  AE0A               	btfss	i2___awdiv@divisor+1,7,c
  5199  000EAA  D006               	goto	i2l539
  5200  000EAC  6C09               	negf	i2___awdiv@divisor,c
  5201  000EAE  1E0A               	comf	i2___awdiv@divisor+1,f,c
  5202  000EB0  B0D8               	btfsc	status,0,c
  5203  000EB2  2A0A               	incf	i2___awdiv@divisor+1,f,c
  5204  000EB4  0E01               	movlw	1
  5205  000EB6  6E0C               	movwf	i2___awdiv@sign,c
  5206  000EB8                     i2l539:
  5207  000EB8  AE08               	btfss	i2___awdiv@dividend+1,7,c
  5208  000EBA  D006               	goto	i2l540
  5209  000EBC  6C07               	negf	i2___awdiv@dividend,c
  5210  000EBE  1E08               	comf	i2___awdiv@dividend+1,f,c
  5211  000EC0  B0D8               	btfsc	status,0,c
  5212  000EC2  2A08               	incf	i2___awdiv@dividend+1,f,c
  5213  000EC4  0E01               	movlw	1
  5214  000EC6  1A0C               	xorwf	i2___awdiv@sign,f,c
  5215  000EC8                     i2l540:
  5216  000EC8  0E00               	movlw	0
  5217  000ECA  6E0E               	movwf	i2___awdiv@quotient+1,c
  5218  000ECC  0E00               	movlw	0
  5219  000ECE  6E0D               	movwf	i2___awdiv@quotient,c
  5220  000ED0  5009               	movf	i2___awdiv@divisor,w,c
  5221  000ED2  100A               	iorwf	i2___awdiv@divisor+1,w,c
  5222  000ED4  B4D8               	btfsc	status,2,c
  5223  000ED6  D01C               	goto	i2l547
  5224  000ED8  0E01               	movlw	1
  5225  000EDA  6E0B               	movwf	i2___awdiv@counter,c
  5226  000EDC  D004               	goto	i2l542
  5227  000EDE  90D8               	bcf	status,0,c
  5228  000EE0  3609               	rlcf	i2___awdiv@divisor,f,c
  5229  000EE2  360A               	rlcf	i2___awdiv@divisor+1,f,c
  5230  000EE4  2A0B               	incf	i2___awdiv@counter,f,c
  5231  000EE6                     i2l542:
  5232  000EE6  AE0A               	btfss	i2___awdiv@divisor+1,7,c
  5233  000EE8  D7FA               	goto	i2l543
  5234  000EEA                     i2u77_40:
  5235  000EEA  90D8               	bcf	status,0,c
  5236  000EEC  360D               	rlcf	i2___awdiv@quotient,f,c
  5237  000EEE  360E               	rlcf	i2___awdiv@quotient+1,f,c
  5238  000EF0  5009               	movf	i2___awdiv@divisor,w,c
  5239  000EF2  5C07               	subwf	i2___awdiv@dividend,w,c
  5240  000EF4  500A               	movf	i2___awdiv@divisor+1,w,c
  5241  000EF6  5808               	subwfb	i2___awdiv@dividend+1,w,c
  5242  000EF8  A0D8               	btfss	status,0,c
  5243  000EFA  D005               	goto	i2l546
  5244  000EFC  5009               	movf	i2___awdiv@divisor,w,c
  5245  000EFE  5E07               	subwf	i2___awdiv@dividend,f,c
  5246  000F00  500A               	movf	i2___awdiv@divisor+1,w,c
  5247  000F02  5A08               	subwfb	i2___awdiv@dividend+1,f,c
  5248  000F04  800D               	bsf	i2___awdiv@quotient,0,c
  5249  000F06                     i2l546:
  5250  000F06  90D8               	bcf	status,0,c
  5251  000F08  320A               	rrcf	i2___awdiv@divisor+1,f,c
  5252  000F0A  3209               	rrcf	i2___awdiv@divisor,f,c
  5253  000F0C  2E0B               	decfsz	i2___awdiv@counter,f,c
  5254  000F0E  D7ED               	goto	i2u77_40
  5255  000F10                     i2l547:
  5256  000F10  500C               	movf	i2___awdiv@sign,w,c
  5257  000F12  B4D8               	btfsc	status,2,c
  5258  000F14  D004               	goto	i2l548
  5259  000F16  6C0D               	negf	i2___awdiv@quotient,c
  5260  000F18  1E0E               	comf	i2___awdiv@quotient+1,f,c
  5261  000F1A  B0D8               	btfsc	status,0,c
  5262  000F1C  2A0E               	incf	i2___awdiv@quotient+1,f,c
  5263  000F1E                     i2l548:
  5264  000F1E  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
  5265  000F22  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  5266  000F26  0012               	return	
  5267  000F28                     __end_ofi2___awdiv:
  5268                           	opt stack 0
  5269                           tblptru	equ	0xFF8
  5270                           tblptrh	equ	0xFF7
  5271                           tblptrl	equ	0xFF6
  5272                           tablat	equ	0xFF5
  5273                           prodh	equ	0xFF4
  5274                           prodl	equ	0xFF3
  5275                           intcon	equ	0xFF2
  5276                           postinc0	equ	0xFEE
  5277                           wreg	equ	0xFE8
  5278                           indf2	equ	0xFDF
  5279                           postinc2	equ	0xFDE
  5280                           postdec2	equ	0xFDD
  5281                           fsr2h	equ	0xFDA
  5282                           fsr2l	equ	0xFD9
  5283                           status	equ	0xFD8
  5284                           
  5285 ;; *************** function i2_SendLCD *****************
  5286 ;; Defined at:
  5287 ;;		line 43 in file "LDCScreen.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;  Byte            1    wreg     unsigned char 
  5290 ;;  type            1    4[COMRAM] unsigned char 
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;  Byte            1    5[COMRAM] unsigned char 
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  1    wreg      void 
  5295 ;; Registers used:
  5296 ;;		wreg, status,2, status,0, cstack
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5302 ;;      Params:         1       0       0       0
  5303 ;;      Locals:         1       0       0       0
  5304 ;;      Temps:          0       0       0       0
  5305 ;;      Totals:         2       0       0       0
  5306 ;;Total ram usage:        2 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    2
  5309 ;; This function calls:
  5310 ;;		i2_LCDout
  5311 ;; This function is called by:
  5312 ;;		_InterruptHandlerHigh
  5313 ;; This function uses a non-reentrant model
  5314 ;;
  5315                           
  5316                           	psect	text33
  5317  001326                     __ptext33:
  5318                           	opt stack 0
  5319  001326                     i2_SendLCD:
  5320                           	opt stack 23
  5321                           
  5322                           ;incstack = 0
  5323                           ;i2SendLCD@Byte stored from wreg
  5324  001326  6E06               	movwf	i2SendLCD@Byte,c
  5325                           
  5326                           ;LDCScreen.c: 47: LATAbits.LATA6 =type;
  5327  001328  B005               	btfsc	i2SendLCD@type,0,c
  5328  00132A  D002               	bra	i2u112_45
  5329  00132C  9C89               	bcf	3977,6,c	;volatile
  5330  00132E  D001               	bra	i2u112_46
  5331  001330                     i2u112_45:
  5332  001330  8C89               	bsf	3977,6,c	;volatile
  5333  001332                     i2u112_46:
  5334                           
  5335                           ;LDCScreen.c: 49: LCDout((Byte&0b11110000)>>4);
  5336  001332  3806               	swapf	i2SendLCD@Byte,w,c
  5337  001334  0B0F               	andlw	15
  5338  001336  0B0F               	andlw	15
  5339  001338  EC94  F008         	call	i2_LCDout
  5340                           
  5341                           ;LDCScreen.c: 52: LCDout(Byte&0b00001111);
  5342  00133C  5006               	movf	i2SendLCD@Byte,w,c
  5343  00133E  0B0F               	andlw	15
  5344  001340  EC94  F008         	call	i2_LCDout
  5345                           
  5346                           ;LDCScreen.c: 53: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5347  001344  0E21               	movlw	33
  5348  001346                     i2u200_47:
  5349  001346  2EE8               	decfsz	wreg,f,c
  5350  001348  D7FE               	bra	i2u200_47
  5351  00134A  F000               	nop	
  5352  00134C  0012               	return		;funcret
  5353  00134E                     __end_ofi2_SendLCD:
  5354                           	opt stack 0
  5355                           tblptru	equ	0xFF8
  5356                           tblptrh	equ	0xFF7
  5357                           tblptrl	equ	0xFF6
  5358                           tablat	equ	0xFF5
  5359                           prodh	equ	0xFF4
  5360                           prodl	equ	0xFF3
  5361                           intcon	equ	0xFF2
  5362                           postinc0	equ	0xFEE
  5363                           wreg	equ	0xFE8
  5364                           indf2	equ	0xFDF
  5365                           postinc2	equ	0xFDE
  5366                           postdec2	equ	0xFDD
  5367                           fsr2h	equ	0xFDA
  5368                           fsr2l	equ	0xFD9
  5369                           status	equ	0xFD8
  5370                           
  5371 ;; *************** function i2_LCDout *****************
  5372 ;; Defined at:
  5373 ;;		line 30 in file "LDCScreen.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;  number          1    wreg     unsigned char 
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;  number          1    3[COMRAM] unsigned char 
  5378 ;; Return value:  Size  Location     Type
  5379 ;;                  1    wreg      void 
  5380 ;; Registers used:
  5381 ;;		wreg, status,2, status,0, cstack
  5382 ;; Tracked objects:
  5383 ;;		On entry : 0/0
  5384 ;;		On exit  : 0/0
  5385 ;;		Unchanged: 0/0
  5386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5387 ;;      Params:         0       0       0       0
  5388 ;;      Locals:         1       0       0       0
  5389 ;;      Temps:          3       0       0       0
  5390 ;;      Totals:         4       0       0       0
  5391 ;;Total ram usage:        4 bytes
  5392 ;; Hardware stack levels used:    1
  5393 ;; Hardware stack levels required when called:    1
  5394 ;; This function calls:
  5395 ;;		i2_E_TOG
  5396 ;; This function is called by:
  5397 ;;		i2_SendLCD
  5398 ;; This function uses a non-reentrant model
  5399 ;;
  5400                           
  5401                           	psect	text34
  5402  001128                     __ptext34:
  5403                           	opt stack 0
  5404  001128                     i2_LCDout:
  5405                           	opt stack 23
  5406                           
  5407                           ;incstack = 0
  5408                           ;i2LCDout@number stored from wreg
  5409  001128  6E04               	movwf	i2LCDout@number,c
  5410                           
  5411                           ;LDCScreen.c: 33: LATD=((number&0b1100)>>2)|(LATD &0b11111100);
  5412  00112A  CF8C F001          	movff	3980,??i2_LCDout	;volatile
  5413  00112E  0EFC               	movlw	252
  5414  001130  1601               	andwf	??i2_LCDout,f,c
  5415  001132  4004               	rrncf	i2LCDout@number,w,c
  5416  001134  42E8               	rrncf	wreg,f,c
  5417  001136  0B3F               	andlw	63
  5418  001138  0B03               	andlw	3
  5419  00113A  1001               	iorwf	??i2_LCDout,w,c
  5420  00113C  6E8C               	movwf	3980,c	;volatile
  5421                           
  5422                           ;LDCScreen.c: 34: LATC=(((number&0b0011)<<1)|(LATD &0b11111001))<<3;
  5423  00113E  CF8C F001          	movff	3980,??i2_LCDout	;volatile
  5424  001142  0EF9               	movlw	249
  5425  001144  1601               	andwf	??i2_LCDout,f,c
  5426  001146  C004  F002         	movff	i2LCDout@number,??i2_LCDout+1
  5427  00114A  0E03               	movlw	3
  5428  00114C  1602               	andwf	??i2_LCDout+1,f,c
  5429  00114E  90D8               	bcf	status,0,c
  5430  001150  3402               	rlcf	??i2_LCDout+1,w,c
  5431  001152  1001               	iorwf	??i2_LCDout,w,c
  5432  001154  6E03               	movwf	(??i2_LCDout+2)& (0+255),c
  5433  001156  90D8               	bcf	status,0,c
  5434  001158  3603               	rlcf	??i2_LCDout+2,f,c
  5435  00115A  90D8               	bcf	status,0,c
  5436  00115C  3603               	rlcf	??i2_LCDout+2,f,c
  5437  00115E  90D8               	bcf	status,0,c
  5438  001160  3403               	rlcf	??i2_LCDout+2,w,c
  5439  001162  6E8B               	movwf	3979,c	;volatile
  5440                           
  5441                           ;LDCScreen.c: 39: E_TOG();
  5442  001164  EC32  F00A         	call	i2_E_TOG	;wreg free
  5443                           
  5444                           ;LDCScreen.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5445  001168  0E03               	movlw	3
  5446  00116A                     i2u201_47:
  5447  00116A  2EE8               	decfsz	wreg,f,c
  5448  00116C  D7FE               	bra	i2u201_47
  5449  00116E  F000               	nop	
  5450  001170  0012               	return		;funcret
  5451  001172                     __end_ofi2_LCDout:
  5452                           	opt stack 0
  5453                           tblptru	equ	0xFF8
  5454                           tblptrh	equ	0xFF7
  5455                           tblptrl	equ	0xFF6
  5456                           tablat	equ	0xFF5
  5457                           prodh	equ	0xFF4
  5458                           prodl	equ	0xFF3
  5459                           intcon	equ	0xFF2
  5460                           postinc0	equ	0xFEE
  5461                           wreg	equ	0xFE8
  5462                           indf2	equ	0xFDF
  5463                           postinc2	equ	0xFDE
  5464                           postdec2	equ	0xFDD
  5465                           fsr2h	equ	0xFDA
  5466                           fsr2l	equ	0xFD9
  5467                           status	equ	0xFD8
  5468                           
  5469 ;; *************** function i2_E_TOG *****************
  5470 ;; Defined at:
  5471 ;;		line 24 in file "LDCScreen.c"
  5472 ;; Parameters:    Size  Location     Type
  5473 ;;		None
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;		None
  5476 ;; Return value:  Size  Location     Type
  5477 ;;                  1    wreg      void 
  5478 ;; Registers used:
  5479 ;;		wreg
  5480 ;; Tracked objects:
  5481 ;;		On entry : 0/0
  5482 ;;		On exit  : 0/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5485 ;;      Params:         0       0       0       0
  5486 ;;      Locals:         0       0       0       0
  5487 ;;      Temps:          0       0       0       0
  5488 ;;      Totals:         0       0       0       0
  5489 ;;Total ram usage:        0 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; This function calls:
  5492 ;;		Nothing
  5493 ;; This function is called by:
  5494 ;;		i2_LCDout
  5495 ;; This function uses a non-reentrant model
  5496 ;;
  5497                           
  5498                           	psect	text35
  5499  001464                     __ptext35:
  5500                           	opt stack 0
  5501  001464                     i2_E_TOG:
  5502                           	opt stack 23
  5503                           
  5504                           ;LDCScreen.c: 25: LATCbits.LATC0 = 1;
  5505                           
  5506                           ;incstack = 0
  5507  001464  808B               	bsf	3979,0,c	;volatile
  5508                           
  5509                           ;LDCScreen.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5510  001466  0E03               	movlw	3
  5511  001468                     i2u202_47:
  5512  001468  2EE8               	decfsz	wreg,f,c
  5513  00146A  D7FE               	bra	i2u202_47
  5514  00146C  F000               	nop	
  5515                           
  5516                           ;LDCScreen.c: 27: LATCbits.LATC0 = 0;
  5517  00146E  908B               	bcf	3979,0,c	;volatile
  5518  001470  0012               	return		;funcret
  5519  001472                     __end_ofi2_E_TOG:
  5520                           	opt stack 0
  5521                           tblptru	equ	0xFF8
  5522                           tblptrh	equ	0xFF7
  5523                           tblptrl	equ	0xFF6
  5524                           tablat	equ	0xFF5
  5525                           prodh	equ	0xFF4
  5526                           prodl	equ	0xFF3
  5527                           intcon	equ	0xFF2
  5528                           postinc0	equ	0xFEE
  5529                           wreg	equ	0xFE8
  5530                           indf2	equ	0xFDF
  5531                           postinc2	equ	0xFDE
  5532                           postdec2	equ	0xFDD
  5533                           fsr2h	equ	0xFDA
  5534                           fsr2l	equ	0xFD9
  5535                           status	equ	0xFD8
  5536                           
  5537 ;; *************** function _getCharSerial *****************
  5538 ;; Defined at:
  5539 ;;		line 177 in file "ecm.c"
  5540 ;; Parameters:    Size  Location     Type
  5541 ;;		None
  5542 ;; Auto vars:     Size  Location     Type
  5543 ;;		None
  5544 ;; Return value:  Size  Location     Type
  5545 ;;                  1    wreg      unsigned char 
  5546 ;; Registers used:
  5547 ;;		wreg, status,2
  5548 ;; Tracked objects:
  5549 ;;		On entry : 0/0
  5550 ;;		On exit  : 0/0
  5551 ;;		Unchanged: 0/0
  5552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5553 ;;      Params:         0       0       0       0
  5554 ;;      Locals:         0       0       0       0
  5555 ;;      Temps:          0       0       0       0
  5556 ;;      Totals:         0       0       0       0
  5557 ;;Total ram usage:        0 bytes
  5558 ;; Hardware stack levels used:    1
  5559 ;; This function calls:
  5560 ;;		Nothing
  5561 ;; This function is called by:
  5562 ;;		_InterruptHandlerHigh
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           	psect	text36
  5567  00147C                     __ptext36:
  5568                           	opt stack 0
  5569  00147C                     _getCharSerial:
  5570                           	opt stack 25
  5571                           
  5572                           ;ecm.c: 178: while (!PIR1bits.RCIF);
  5573                           
  5574                           ;incstack = 0
  5575  00147C  AA9E               	btfss	3998,5,c	;volatile
  5576  00147E  D7FE               	goto	_getCharSerial
  5577                           
  5578                           ;ecm.c: 179: return RCREG;
  5579  001480  50AE               	movf	4014,w,c	;volatile
  5580  001482  0012               	return	
  5581  001484                     __end_of_getCharSerial:
  5582                           	opt stack 0
  5583                           tblptru	equ	0xFF8
  5584                           tblptrh	equ	0xFF7
  5585                           tblptrl	equ	0xFF6
  5586                           tablat	equ	0xFF5
  5587                           prodh	equ	0xFF4
  5588                           prodl	equ	0xFF3
  5589                           intcon	equ	0xFF2
  5590                           postinc0	equ	0xFEE
  5591                           wreg	equ	0xFE8
  5592                           indf2	equ	0xFDF
  5593                           postinc2	equ	0xFDE
  5594                           postdec2	equ	0xFDD
  5595                           fsr2h	equ	0xFDA
  5596                           fsr2l	equ	0xFD9
  5597                           status	equ	0xFD8
  5598                           tblptru	equ	0xFF8
  5599                           tblptrh	equ	0xFF7
  5600                           tblptrl	equ	0xFF6
  5601                           tablat	equ	0xFF5
  5602                           prodh	equ	0xFF4
  5603                           prodl	equ	0xFF3
  5604                           intcon	equ	0xFF2
  5605                           postinc0	equ	0xFEE
  5606                           wreg	equ	0xFE8
  5607                           indf2	equ	0xFDF
  5608                           postinc2	equ	0xFDE
  5609                           postdec2	equ	0xFDD
  5610                           fsr2h	equ	0xFDA
  5611                           fsr2l	equ	0xFD9
  5612                           status	equ	0xFD8
  5613                           
  5614                           	psect	rparam
  5615  0000                     tblptru	equ	0xFF8
  5616                           tblptrh	equ	0xFF7
  5617                           tblptrl	equ	0xFF6
  5618                           tablat	equ	0xFF5
  5619                           prodh	equ	0xFF4
  5620                           prodl	equ	0xFF3
  5621                           intcon	equ	0xFF2
  5622                           postinc0	equ	0xFEE
  5623                           wreg	equ	0xFE8
  5624                           indf2	equ	0xFDF
  5625                           postinc2	equ	0xFDE
  5626                           postdec2	equ	0xFDD
  5627                           fsr2h	equ	0xFDA
  5628                           fsr2l	equ	0xFD9
  5629                           status	equ	0xFD8
  5630                           
  5631                           	psect	temp
  5632  00003E                     btemp:
  5633                           	opt stack 0
  5634  00003E                     	ds	1
  5635  0000                     int$flags	set	btemp
  5636  0000                     wtemp8	set	btemp+1
  5637  0000                     ttemp5	set	btemp+1
  5638  0000                     ttemp6	set	btemp+4
  5639  0000                     ttemp7	set	btemp+8
  5640                           tblptru	equ	0xFF8
  5641                           tblptrh	equ	0xFF7
  5642                           tblptrl	equ	0xFF6
  5643                           tablat	equ	0xFF5
  5644                           prodh	equ	0xFF4
  5645                           prodl	equ	0xFF3
  5646                           intcon	equ	0xFF2
  5647                           postinc0	equ	0xFEE
  5648                           wreg	equ	0xFE8
  5649                           indf2	equ	0xFDF
  5650                           postinc2	equ	0xFDE
  5651                           postdec2	equ	0xFDD
  5652                           fsr2h	equ	0xFDA
  5653                           fsr2l	equ	0xFD9
  5654                           status	equ	0xFD8


Data Sizes:
    Strings     47
    Constant    10
    Data        0
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     43      61
    BANK0           160     51     154
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(3) Largest target is 8191
		 -> STR_4(CODE[9]), STR_3(CODE[12]), ROM(CODE[8191]), STR_2(CODE[13]), 
		 -> STR_1(CODE[13]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> main@buf(BANK0[16]), IRScreen2@buf(COMRAM[16]), IRScreen@buf(COMRAM[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    FindIR@R_IR	PTR unsigned int  size(2) Largest target is 2
		 -> main@RightIR(BANK0[2]), 

    FindIR@L_IR	PTR unsigned int  size(2) Largest target is 2
		 -> main@LeftIR(BANK0[2]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> main@buf(BANK0[16]), IRScreen2@buf(COMRAM[16]), IRScreen@buf(COMRAM[16]), 

    back@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    back@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    forward@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    forward@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnRight@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnRight@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnLeft@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnLeft@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    stop@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    stop@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S74DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S74DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), motorL(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _SetLine->_SendLCD
    _Motor_Init->_initPWM
    _LCD_String->_SendLCD
    _LCD_Init->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_stop
    i2_stop->i2_setMotorPWM
    i2_setMotorPWM->i2___awdiv
    i2___awdiv->i2___wmul
    i2_SendLCD->i2_LCDout

Critical Paths under _main in BANK0

    _main->_TrackIR
    _sprintf->___lwmod
    _back->_setMotorPWM
    _TrackIR->_stop
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _forward->_setMotorPWM
    _setMotorPWM->___awdiv

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0   39568
                                             25 BANK0     26    26      0
                             _FindIR
                            _IR_Init
                               _Init
                      _InterruptINIT
                           _LCD_Init
                         _LCD_String
                         _Motor_Init
                            _SendLCD
                            _SetLine
                            _TrackIR
                            ___lwdiv
                               _back
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             26    19      7    2561
                                              4 BANK0     17    10      7
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                             40 COMRAM     1     1      0
                                              0 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                             33 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _back                                                 4     0      4    3076
                                             11 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _TrackIR                                              9     5      4   16029
                                             16 BANK0      9     5      4
                            _forward
                           _fwdCount
                          _leftCount
                         _rightCount
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            4     0      4    3436
                                             11 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             4     0      4    3796
                                             11 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4    5048
                                             11 BANK0      5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _rightCount                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _leftCount                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _fwdCount                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _forward                                              4     0      4    3256
                                             11 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          7     5      2    2834
                                              4 BANK0      7     5      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     504
                                             33 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     717
                                             39 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0     964
                                             39 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _Motor_Init                                           2     2      0      90
                                             35 COMRAM     2     2      0
                            _initPWM
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     2      0      45
                                             33 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           2     0      2    1345
                                             39 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0     964
                                             39 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1     920
                                             37 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      44
                                             33 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InterruptINIT                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IR_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FindIR                                               6     2      4     196
                                             33 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _InterruptHandlerHigh                                 7     7      0    1543
                                             26 COMRAM     7     7      0
                      _getCharSerial
                          i2_SendLCD
                             i2_stop
 ---------------------------------------------------------------------------------
 (6) i2_stop                                               5     1      4    1268
                                             21 COMRAM     5     1      4
                      i2_setMotorPWM
 ---------------------------------------------------------------------------------
 (7) i2_setMotorPWM                                        7     5      2    1074
                                             14 COMRAM     7     5      2
                          i2___awdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     193
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___awdiv                                            8     4      4     298
                                              6 COMRAM     8     4      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) i2_SendLCD                                            2     1      1     136
                                              4 COMRAM     2     1      1
                           i2_LCDout
 ---------------------------------------------------------------------------------
 (7) i2_LCDout                                             4     4      0      44
                                              0 COMRAM     4     4      0
                            i2_E_TOG
 ---------------------------------------------------------------------------------
 (8) i2_E_TOG                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _getCharSerial                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FindIR
   _IR_Init
   _Init
   _InterruptINIT
   _LCD_Init
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _Motor_Init
     _initPWM
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _TrackIR
     _forward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _fwdCount
     _leftCount
     _rightCount
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   ___lwdiv
   _back
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnRight
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)
   _getCharSerial
   i2_SendLCD
     i2_LCDout
       i2_E_TOG
   i2_stop
     i2_setMotorPWM
       i2___awdiv
         i2___wmul (ARG)
       i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     33      9A       5       96.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2B      3D       1       64.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D7       3        0.0%
DATA                 0      0      D7      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sun Dec 09 13:05:39 2018

                              l32 0986                                l33 09CC  
                              l34 0A68                                l94 123A  
                              l95 124C                                l99 1218  
                    ___awdiv@sign 00C8               ___wmul@multiplicand 0024  
                     ?_LCD_String 0028                       main@RightIR 00F5  
                             l100 11FA                               l300 0C22  
                             l301 0C32                               l302 0C4C  
                             l231 05C0                               l223 041C  
                             l311 0D26                               l232 056E  
                             l224 03CA                               l312 0CD0  
                             l305 0C38                               l242 13CA  
                             l306 0C46                               l227 04F4  
                             l307 0C82                               l236 063A  
                             l228 04A2                               l308 0CA0  
                             l237 068A                               l280 08F2  
                             l272 06AE                               l281 07E8  
                             l282 082E                               l275 073C  
                             l540 0E44                               l284 0876  
                             l277 076E                               l542 0E62  
                             l286 08BE                               l278 07D4  
                             l543 0E5A                               l546 0E82  
                             l802 1080                               l547 0E8C  
                             l539 0E34                               l803 108A  
                             l548 0E9A                               l812 11A2  
                             l813 11AC                               l808 118A  
                             l809 1182                               l798 1060  
                             l799 1058                               u820 1064  
                             u805 1308                               u806 130A  
                             wreg 000FE8                      __CFG_LVP$OFF 000000  
           __end_ofi2_setMotorPWM 0C16                              l2645 0C2C  
                            l2675 0CC2                              l2793 068A  
                            STR_1 030B                              STR_2 0318  
                            STR_3 0325                              STR_4 0331  
                            u1300 0E66                              _LATA 000F89  
                            _LATB 000F8A                              _LATC 000F8B  
                            _LATD 000F8C                              u1354 0A5A  
                            u1355 0A56                              u1364 0A84  
                            u1540 0506                              u1380 118E  
                            u1365 0A80                              u1550 0516  
                            u1470 0CCA                              u1480 0D2E  
                            u1570 05D2                              u1490 0D5A  
                            u1580 05E2                              u1807 0548  
                            u1817 059A                              u1907 0DB0  
                            u1827 0614                              u1747 074C  
                            u1917 0DC8                              u1837 0666  
                            u1757 08CA                              u1927 0DDA  
                            u1847 0F58                              u1767 03A4  
                            u1937 0DF0                              u1857 124E  
                            u1777 03F6                              u1947 0E04  
                            u1867 1212                              u1787 047C  
                            u1957 0E16                              u1877 0D82  
                            u1797 04CE                              u1967 131E  
                            u1887 0D92                              u1977 10D6  
                            u1897 0DA2                              u1987 145A  
                            i2l32 0B0E                              i2l33 0B54  
                            i2l34 0BEC                   __end_ofi2_E_TOG 1472  
                            _Init 13C0                   __end_of_IR_Init 1456  
                            _back 1256                              _main 06A2  
                            _read 00C6                              fsr2h 000FDA  
                            indf2 000FDF                              fsr2l 000FD9  
                            btemp 003E                              _stop 0F28  
                            prodh 000FF4                              prodl 000FF3  
                            start 0094                      ___param_bank 000000  
                 __end_of_SendLCD 1326                   __end_of_SetLine 1256  
                __end_of_LCD_Init 0E1E                   __end_of_TrackIR 06A2  
                           ?_Init 0001                             ?_back 00D2  
                           ?_main 0001                   __end_of___awdiv 0EA4  
                           ?_stop 00D2                   ___awdiv@divisor 002A  
                           _PDC0H 000F78                             _PDC1H 000F76  
                           _PDC0L 000F79                             _PDC1L 000F77  
                           _T5CON 000FB7                   __end_of___lwdiv 1094  
                 __end_of___lwmod 11B6                             i2l260 003A  
                           i2l261 005E                             i2l257 0080  
                           i2l540 0EC8                             i2l542 0EE6  
                           i2l543 0EDE                             i2l546 0F06  
                           i2l547 0F10                             i2l539 0EB8  
                           i2l548 0F1E                   ___awdiv@counter 00C7  
                           _RCREG 000FAE                             _E_TOG 1456  
                __end_ofi2_LCDout 1172                             _SPBRG 000FAF  
                           _TRISA 000F92                             _TRISC 000F94  
                           _TRISD 000F95                   __end_of_initPWM 11F8  
                 __end_of_dpowers 030B                   __end_of_forward 12FE  
                           main@i 00F9                __size_ofi2_SendLCD 0028  
                           tablat 000FF5                  __end_ofi2___wmul 13C0  
                           ttemp5 003F                             ttemp6 0042  
                           ttemp7 0046                             status 000FD8  
                           wtemp8 003F               __size_of_LCD_String 0030  
                 __end_of_sprintf 0D68                __size_ofi2___awdiv 0084  
                  __CFG_MCLRE$OFF 000000                   __initialization 134E  
                    __end_of_Init 13E2                      __end_of_back 1280  
                    __end_of_main 0908                      __end_of_stop 0F8C  
                  __CFG_OSC$IRCIO 000000                  LCD_String@string 0028  
                          ??_Init 0022                            ??_back 002C  
                          ??_main 00E0                            ??_stop 00D6  
                   __activetblptr 000002                            ?_E_TOG 0001  
      InterruptHandlerHigh@readIn 0021                         ??i2_E_TOG 0001  
                       ??_IR_Init 0022                      ?_setMotorPWM 00CB  
                ___awdiv@dividend 0028                            _ANSEL0 000FB8  
                          _ANSEL1 000FB9                            i2l2861 005E  
                          _LCDout 1094                       SendLCD@Byte 0027  
                          _OSCCON 000FD3             __end_of_getCharSerial 1484  
                          _PTCON0 000F7F                            _PTCON1 000F7E  
                          _SPBRGH 000FB0                            _PTPERH 000F7A  
                          _PTPERL 000F7B                       SendLCD@type 0026  
                          _FindIR 10DE                            i2_stop 0F8C  
                       ??_SendLCD 0027                         ??_SetLine 0028  
                       ??_TrackIR 00DB                        _Motor_Init 0FEC  
                __end_of_fwdCount 143C                            ___wmul 1374  
                       ??___awdiv 002C            __size_of_InterruptINIT 000A  
                       ??___lwdiv 0026                         ??___lwmod 0029  
                          clear_0 1354                            clear_1 1360  
                ___awdiv@quotient 00C9                 __end_ofi2_SendLCD 134E  
                  TrackIR@RightIR 00D9                            _motorL 0035  
                          _motorR 002C                    i2___awdiv@sign 000C  
                       ??_initPWM 0022                         ??_forward 002C  
               __end_ofi2___awdiv 0F28                      __mediumconst 0000  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                         ??_sprintf 00D2  
                __end_of_turnLeft 12D4                        __accesstop 0060  
         __end_of__initialization 1366                         ?_LCD_Init 0001  
                   ___rparam_used 000001                       SetLine@line 0028  
                   __end_of_E_TOG 1464                         ?i2_LCDout 0001  
                  __pcstackCOMRAM 0001                      ??_LCD_String 002A  
                       ?i2___wmul 0001                           ??_E_TOG 0022  
   __size_of_InterruptHandlerHigh 008C                     _InterruptINIT 1472  
              __size_of_leftCount 001E                        __pbssBANK0 0060  
                         ?_LCDout 0001                        ??_LCD_Init 0028  
              __end_of_LCD_String 1228                           ?_FindIR 0022  
                         ?i2_stop 0016                        ??i2_LCDout 0001  
                     ?_Motor_Init 0001                           ?___wmul 0022  
                         _CAP1CON 000F63                           _CAP2CON 000F62  
                         _DFLTCON 000F60                        ??i2___wmul 0005  
                      _arrayCount 0060                           i2_E_TOG 1464  
                         i2u77_40 0EEA                           _IR_Init 143C  
                  ?_InterruptINIT 0001                           _PWMCON0 000F6F  
                         _PWMCON1 000F6E                         ?_fwdCount 0001  
            __size_of_setMotorPWM 018C                   __size_of_LCDout 004A  
              __size_of_turnRight 002A                   __size_of_FindIR 004A  
                         _SendLCD 12FE                   __size_ofi2_stop 0060  
                         __Hparam 0000                           _SetLine 1228  
                         __Lparam 0000                           _TrackIR 033C  
                         ___awdiv 0E1E                   __size_of___wmul 0026  
                         ___lwdiv 1042                           ___lwmod 1172  
                    __psmallconst 0300            __size_ofi2_setMotorPWM 0182  
               __end_of_leftCount 141E                           back@m_L 00D2  
                         back@m_R 00D4                           __pcinit 134E  
                         __ramtop 0300                         ?_turnLeft 00D2  
                         __ptext0 06A2                           __ptext1 0C16  
                         __ptext2 1172                           __ptext3 1042  
                         __ptext4 1256                           __ptext5 033C  
                         __ptext6 1280                           __ptext7 12AA  
                         __ptext8 0F28                           __ptext9 13E2  
                         _initPWM 11B6                           _counter 00C4  
                         _dpowers 0301                           _forward 12D4  
                    LCDout@number 0025               __size_of_Motor_Init 0056  
                         main@fin 00F4                           main@buf 00E4  
                         _sprintf 0C16              end_of_initialization 1366  
                      ??_fwdCount 0022                setMotorPWM@PWMduty 00D0  
                   __Lmediumconst 0000               i2___wmul@multiplier 0001  
                      _rightCount 13E2                      turnRight@m_L 00D2  
                    turnRight@m_R 00D4                         _RCSTAbits 000FAB  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc2 000FDE                           stop@m_L 00D2  
                         stop@m_R 00D4                        ??_turnLeft 002C  
                       _PORTCbits 000F82                 __end_of_turnRight 12AA  
                       i2_SendLCD 1326                   ??_InterruptINIT 0022  
                       _TRISBbits 000F93                         _TRISCbits 000F94  
                      main@LeftIR 00F7                         i2___awdiv 0EA4  
                   i2_setMotorPWM 0A94                    __end_of_LCDout 10DE  
                       _TXSTAbits 000FAC                i2___awdiv@dividend 0007  
               __size_of_LCD_Init 00B6                    __end_of_FindIR 1128  
                  __end_ofi2_stop 0FEC                 __size_ofi2_LCDout 004A  
                  __end_of___wmul 139A                       _BAUDCONbits 000FAA  
          __size_of_getCharSerial 0008                  i2___wmul@product 0005  
                      ?i2_SendLCD 0005               start_initialization 134E  
              i2___awdiv@quotient 000D                 __size_ofi2___wmul 0026  
                  ?i2_setMotorPWM 000F                        ?i2___awdiv 0007  
                       i2stop@m_L 0016                         i2stop@m_R 0018  
                   initPWM@period 0022                          ??_LCDout 0022  
                     ?_rightCount 0001      __end_of_InterruptHandlerHigh 0094  
                        ??_FindIR 0026                          ??i2_stop 001A  
                    ??_Motor_Init 0024                     TrackIR@LeftIR 00D7  
                        ??___wmul 0026                        forward@m_L 00D2  
                      forward@m_R 00D4                       __pbssCOMRAM 002C  
                   __pcstackBANK0 00C7                          ?i2_E_TOG 0001  
                        ?_IR_Init 0001                    i2LCDout@number 0004  
              __end_of_Motor_Init 1042                       sprintf@flag 00D5  
               __size_of_fwdCount 001E                       sprintf@prec 00DA  
                   _getCharSerial 147C                          ?_SendLCD 0026  
                        ?_SetLine 0001                  ___lwdiv@dividend 0022  
                        ?_TrackIR 00D7                         __pintcode 0008  
                        ?___awdiv 0028                          ?___lwdiv 0022  
                        ?___lwmod 00C7                          _CAP1BUFH 000F69  
                        _CAP1BUFL 000F68                          _CAP2BUFH 000F67  
                        _CAP2BUFL 000F66                          ?_initPWM 0001  
                     __smallconst 0300                         _leftCount 1400  
             __size_of_rightCount 001E                    __size_of_E_TOG 000E  
                        ?_forward 00D2                 __size_of_turnLeft 002A  
                     ??i2_SendLCD 0006                   ??i2_setMotorPWM 0011  
                   ??_setMotorPWM 00CD                  ___lwdiv@quotient 0026  
                     ??i2___awdiv 000B                          ?_sprintf 00CB  
                     turnLeft@m_L 00D2                       turnLeft@m_R 00D4  
                  ?_getCharSerial 0001                          _LCD_Init 0D68  
                  ___wmul@product 0026                          _LATAbits 000F89  
                        _LATCbits 000F8B                          _PIE1bits 000F9D  
                        i2u112_45 1330                          i2u112_46 1332  
                        i2u200_47 1346                          i2u201_47 116A  
                        i2u202_47 1468                          i2u142_44 0BE0  
                        i2u142_45 0BDC                          i2u143_44 0C08  
                        i2u143_45 0C04                          i2u163_40 0050  
                        i2u164_40 0066                          _PIR1bits 000F9E  
                        i2_LCDout 1128                          i2u199_47 0FBA  
                        _RCONbits 000FD0                 ___wmul@multiplier 0022  
                        i2___wmul 139A                      setMotorPWM@m 00CB  
                      ?_leftCount 0001              _InterruptHandlerHigh 0008  
               i2___awdiv@divisor 0009                 i2___awdiv@counter 000B  
InterruptHandlerHigh@read_counter 001F                         _turnRight 1280  
                __size_ofi2_E_TOG 000E                  __size_of_IR_Init 001A  
              Motor_Init@PWMcycle 0024                     i2SendLCD@Byte 0006  
             __end_of_setMotorPWM 0A94                     i2SendLCD@type 0005  
                        __Hrparam 0000                  __size_of_SendLCD 0028  
                        __Lrparam 0000                  __size_of_SetLine 002E  
                __size_of_TrackIR 0366                  __size_of___awdiv 0086  
                    TrackIR@limit 00DE             i2___wmul@multiplicand 0003  
                __size_of___lwdiv 0052                  __size_of___lwmod 0044  
           ?_InterruptHandlerHigh 0001                        sprintf@val 00D8  
                __size_of_initPWM 0042                  __size_of_forward 002A  
                 ___lwdiv@divisor 0024                   ___lwdiv@counter 0028  
                      ?_turnRight 00D2             __end_of_InterruptINIT 147C  
                        __ptext10 1400                          __ptext11 141E  
                        __ptext20 0D68                          __ptext12 12D4  
                        __ptext21 12FE                          __ptext13 0908  
                        __ptext30 0A94                          __ptext22 1094  
                        __ptext14 1374                          __ptext31 139A  
                        __ptext23 1456                          __ptext15 0E1E  
                        __ptext32 0EA4                          __ptext24 1472  
                        __ptext16 1228                          __ptext33 1326  
                        __ptext25 13C0                          __ptext17 0FEC  
                        __ptext34 1128                          __ptext26 143C  
                        __ptext18 11B6                          __ptext35 1464  
                        __ptext27 10DE                          __ptext19 11F8  
                        __ptext36 147C                          __ptext29 0F8C  
                 ??_getCharSerial 0001                          _fwdCount 141E  
                __size_of_sprintf 0152              i2setMotorPWM@PWMduty 0014  
                   __size_of_Init 0022                     __size_of_back 002A  
                    ??_rightCount 0022                     __size_of_main 0266  
                   __size_of_stop 0064                          int$flags 003E  
                      _LCD_String 11F8                          _turnLeft 12AA  
                     ??_leftCount 0022                        _INTCONbits 000FF2  
              __end_of_rightCount 1400                       _setMotorPWM 0908  
                      FindIR@L_IR 0022                        FindIR@R_IR 0024  
                        intlevel2 0000                         sprintf@ap 00D6  
                       sprintf@sp 00CB                  ___lwmod@dividend 00C7  
                      _OSCCONbits 000FD3            ??_InterruptHandlerHigh 001B  
                        sprintf@c 00DB                          sprintf@f 00CD  
                 ___lwmod@divisor 00C9                   ___lwmod@counter 0029  
                  i2setMotorPWM@m 000F                       ??_turnRight 002C  
